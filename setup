#!/bin/csh
#############################################################################
# $Id$
# Set up configuration file for building BL3DFS Software.
#
# Global setup
#
set imod_copyright    = '1994-2001'

set source_dir    = `pwd`
set endian_dir    = include

set configure     = configure
set hconfigure    = include/imodconfig.h

set debug           = false
set bin_dir         = $source_dir/bin/
set inc_dir         = $source_dir/include/
set lib_dir         = $source_dir/buildlib/
set include_flags   = "-I. -I$inc_dir"
set optimization    = "-O2"
set gfx             = default
set compiler        = default
set machine         =
set defines         = 
set target_computer = manual_overide
set shared_libs     = default
set flags           = 
set fallback        = 
set swap_ieee       = true

set inst_bin_dir    = default
set inst_lib_dir    = default
set instdir         = default
set glwincdir       = .
set glwlibdir       = .
set tifflibs        = default
set usfftdir        = default
set blockio         =
set imsubsobj       = '*.o'
set tiltalilib      =

#
# Input options
#


while($#argv > 0)
        switch($argv[1])
                case -d:
		case -debug:
			set debug = true
			breaksw

		case -shared:
			set shared_libs = true
			breaksw
		case -no_shared:
			set shared_libs = false
			breaksw

		case -tiff:
			set tifflibs = true
			breaksw
		case -no_tiff:
			set tifflibs = false
			breaksw

		case -m:
		case -mach:
		case -machine:
			shift
			set machine = $argv[1]
			breaksw

		case -flags:
			shift
			set flags  = $argv[1]        		
                        breaksw
		case -i:
		case -inst:
			shift
			set instdir = $argv[1]
			breaksw

		case -compiler:
			shift
			set compiler = $argv[1]
			breaksw

		case -swapieee:
			set swap_ieee = true
			breaksw

		case -swapvms:
			set swap_ieee = false
			breaksw

		case -h:
		case -help:
			goto usage

		default:
			echo Bad option
			goto usage
			breaksw
	endsw
        shift
end

#
# get machine specifics
#
set UMACHINE = `uname -m`
set URELEASE = `uname -r`
set USYSTEM  = `uname -s`
#set UVERSION = `uname -v`
#set target_computer = {$UMACHINE}__{$USYSTEM}__{$URELEASE}__{$UVERSION}
set target_computer = {$UMACHINE}__{$USYSTEM}__{$URELEASE}__all

#echo "CER:  target_computer is: " $target_computer

#
# Create imodconfig.h file
#
set imod_version = `sed '/\./s///g' .version`
set imod_version_name = `cat .version`
echo "#ifndef IMOD_CONFIG_INCLUDED"                >! $hconfigure
echo "#define IMOD_CONFIG_INCLUDED"                >> $hconfigure
echo "#define VERSION              $imod_version"  >> $hconfigure
echo '#define VERSION_NAME "'"$imod_version_name"'"'  >> $hconfigure
echo '#define COPYRIGHT_YEARS "'"$imod_copyright"'"'  >> $hconfigure

echo "#define DRAW_OpenGL 1" >> $hconfigure

#
# Copy default include file for Fortran byte-ordering
# Set up default include file for number of bytes per item when defining
# record length for direct unformatted I/O
\cp $endian_dir/big_endian.inc $endian_dir/endian.inc
echo "      parameter (nbytes_recl_item=4)" >! $endian_dir/recl_bytes.inc


if ($debug == false) then
        echo "#define NDEBUG"                 >> $hconfigure
endif

#
# Create make config file
#
echo "# Configure file for making BL3DFS software." >! $configure 
echo "# Do not edit this file it is created by setup." >> $configure
echo "# setup for $target_computer" >> $configure
echo " " >> $configure
echo "IMOD_VERSION $imod_version_name"


#
# Go To Machine dependent parts.
#
if ($machine != "") then
	echo target is $machine
	goto $machine
endif

switch($target_computer)

	case *__IRIX64__6.0*:
	case *__IRIX__6.0*:
	case *__IRIX64__6.1*:
	case *__IRIX__6.1*:
	case *__IRIX64__6.2*:
	case *__IRIX__6.2*:
		echo target computer is SGI running $USYSTEM $URELEASE
		set machine = irix6-32
		goto irix6-32
		breaksw
	case *__IRIX64__6*:
	case *__IRIX__6*:
		echo target computer is SGI running $USYSTEM $URELEASE
		set machine = irix6-n32
		goto irix6-n32
		breaksw
	case *__IRIX__5.3*:
		echo target computer is SGI running $USYSTEM $URELEASE
		set machine = irix5
		goto irix5
		breaksw

	case sun4*__SunOS__5.*__*:
		echo $target_computer is solaris
		set machine = solaris
		goto solaris
		breaksw

        # Red Hat Linux on Intel (i686 for the time being 6 21 00)
        case i686__Linux__*__*:
                echo $target_computer is Intel running Red Hat Linux
                set machine = rhlinux
                goto rhlinux
                breaksw

	# OSF1 V3.2 17 alpha
	case *__OSF1__V3.2__*:
		echo $target_computer is alpha running OSF1
		set machine = alphaosf
		goto alphaosf
		breaksw

        # Alpha Linux (running SuSE 7.1 axp)
	# added by HmK 30/07/2001
        case alpha__Linux__*__*:
                echo $target_computer is ALPHA running Linux
                set machine = alphalinux
                goto alphalinux
                breaksw

	default:
		echo WARNING: no definition for $target_computer
		echo $target_computer error
        	breaksw

endsw

#############################################################################
#
# The default system, to document the meaning of the variables that need
# to be defined.
# 
echo "You need to specify a machine; the generic settings are not usable"
exit 1

# define the compilers to use
echo "CC      = cc"               >> $configure
echo "CXX     = CC"               >> $configure
echo "CPPC    = CC"               >> $configure
echo "FC     = f77"              >> $configure

# May need to define as \cp and \find if you have aliases
echo "CP      = cp"          	  >> $configure
echo "FIND    = find"          	  >> $configure

# define how to make libraries - see specific machines for shared libs
echo "AR      = ar"               >> $configure
echo "ARFLAGS = r"                >> $configure
echo 'LDFLAGS = -L$(LIBDIR)'      >> $configure
echo "RANLIB  = ranlib"           >> $configure
echo 'MAKELIB = $(AR) $(ARFLAGS)' >> $configure

# MAKELIBSO needs to be defined to describe how to make a .so plugin
# from .o files; all systems are OK with MAKELIB for shared libraries

# Basic C libraries, used to build almost all programs, C and Fortran; but
# the Fortran Makefiles use FORTCLIBS
echo "CLIBS       = -lm -lc"                >> $configure
echo 'LIBS        = $(CLIBS)'               >> $configure
echo 'FORTCLIBS   = $(LIBS)'               >> $configure

# Libraries for programs using X and OpenGL 
echo "XLIBS       = -lXm -lXt -lX11 -lXext" >> $configure
echo "GLIBS   = -lGLw -lGLU -lGL"       >> $configure

# Libraries for non-graphical and graphics Fortran programs
echo "IMLIBS     = -lhvem -lim -lifft -limod" >> $configure
echo 'GRAPHLIBS    = -ldnmncar $(IMLIBS) $(XLIBS)' >> $configure

# extra library and option entries for making imod run plugins
echo 'PLUGLIBS = ' >> $configure

# Link command for imod, may need to be FC to use the Fortran plugins
echo 'IMODCC    = $(CC)'  >> $configure

# Command for building a Fortran plugin
echo  'MAKEF77PLUGIN  = ld $(LDFLAGS) -shared -all -lftn -o'  >> $configure

# clip uses the Fortran fft library; it is linked with FLCC and has the
# entry F77LIBS for any libraries that may be needed
echo 'FLCC      = $(CC)'  >> $configure
echo 'F77LIBS   = '                  >> $configure

# set compilation flags for debugging
if ($debug == true) then
        set optimization = "-g"
endif
		
# A slew of compilation flags - on the SGI, some Fortran programs needed not
# to be optimized, hence NOOPFLAGS.  Some Fortran and C programs don't
# work with -n32, so they have to be done with "fallback" flags that compile
# them -32.  For all other machines, the fallback flags can match the regular
# ones, as they do here

# you can set "defines" with extra defines for C programs, but it's better to
# use imodconfig instead

# also note that the flags variable is a way for flags to be added on
# the command-line, and to be defined globally for all compilations

echo "CFLAGS   = $flags $defines $optimization $include_flags" >> $configure
echo "CXXFLAGS = $flags $defines $optimization $include_flags" >> $configure
echo "FFLAGS   = $flags $optimization  $include_flags"         >> $configure
echo "NOOPFFLAGS   = $flags $optimization -O0  $include_flags"     >> $configure
echo "FFALLBACK   = $flags $optimization  $include_flags"         >> $configure
echo "CFALLBACK   = $flags $defines $optimization $include_flags" >> $configure
echo 'LDFALLBACK = $(LDFLAGS)'       >> $configure
echo 'NOOPFFALLBACK = $(NOOPFFLAGS)' >> $configure

# Make tilt program from Fortran subroutines
echo 'TILTOBJS = bpsumnox.o bpsumxtilt.o bpsumlocal.o' >> $configure

# To indicate that librandm and libdtrigs need to be built
echo 'LINUXFLIBS = ' >> $configure

# To indicate that programs that use SGI rgb format can be built
echo 'RGBPROGS = '  >> $configure

# A machine-specific directory for the USFFT libraries
set usfftdir = $source_dir/USFFTlib/default

goto standard_defines



###########################################################################
# SGI running IRIX 6
#
irix6-32:
irix6:
irix6-n32:
irix5:
source machines/irix5-6

goto standard_defines

#############################################################################
# Intel running Red Hat Linux 7.0
#
rhlinux:
source machines/rhlinux

goto standard_defines

##############################################################################
# Solaris 2.x or SunOS5 using gcc compiler.
#
solaris:
source machines/solaris

goto standard_defines

##############################################################################
#
# Dec Alpha running OSF1
# NOT TESTED - MODIFIED ONLY FOR CONSISTENCY
#
alphaosf:
source machines/alphaosf

goto standard_defines


#############################################################################
# Alpha running SuSE Linux 7.1 axp
# added by HmK 30/07/2001
alphalinux:
source machines/alphalinux

goto standard_defines

##############################################################################
# Defines used for every system:
#
standard_defines:

if ($instdir != default) then
	if ($inst_bin_dir == default) then
		set inst_bin_dir = $instdir/bin
	endif
	if ($inst_lib_dir == default) then
		set inst_lib_dir = $instdir/lib
	endif
	set inst_plug_dir = $instdir/lib/imodplug
	set inst_plug_parent = $instdir/lib
else
	set inst_bin_dir = $bin_dir
	if ($inst_lib_dir == default) then
		set inst_lib_dir = $source_dir/lib
	endif
	set inst_plug_dir = $source_dir/lib/imodplug
	set inst_plug_parent = $source_dir/lib
endif

if (($tifflibs == default) || ($tifflibs == false)) then
    echo 'DUMMYTIFF = libtiff' >> $configure
    echo 'TIFFLIBS = -ltiff' >> $configure
    echo '#define NOTIFFLIBS'  >> $hconfigure
else
    if ($tifflibs == true) set tifflibs = -ltiff
    echo 'DUMMYTIFF = nolibtiff' >> $configure
    echo "TIFFLIBS = $tifflibs" >> $configure
endif

if (! -e $usfftdir/libusfft_r3.a ) then
    echo "USFFTLIBS = " >> $configure
    echo "FBPLIB = nolibfbp.a" >> $configure
else
    echo "USFFTLIBS = $usfftdir/libusfft_r3.a $usfftdir/libtest_usfft.a -lnsl" >> $configure
    echo "FBPLIB = libfbp.a" >> $configure
endif

echo "BLOCKIO =   $blockio"  >> $configure
echo "IMSUBSOBJ = $imsubsobj"  >> $configure
echo "TILTALILIB = $tiltalilib"  >> $configure

echo "GLWINCDIR = $glwincdir" >> $configure
echo "GLWLIBDIR = $glwlibdir" >> $configure
echo "BINDIR  = $bin_dir" >> $configure
echo "INSTBINDIR = $inst_bin_dir"  >> $configure
echo "LIBDIR  = $lib_dir" >> $configure
echo "INSTLIBDIR = $inst_lib_dir"  >> $configure
echo "INCDIR  = $inc_dir"          >> $configure
echo "IMOD_PLUGIN_DIR = $inst_plug_dir" >> $configure
echo "# end of configure"          >> $configure

echo "#endif"                      >> $hconfigure
echo " "                           >> $hconfigure

#
# Make needed links in include
#
if (! -e include/stat_source:statsize.inc) ln -s statsize.inc include/stat_source:statsize.inc
if (! -e include/nimp_source:model.inc) ln -s model.inc include/nimp_source:model.inc
if (! -e include/imod.h) ln -s ../imod/imod.h include/imod.h

#
# Make the directories if needed.
#
if (! -e $bin_dir) then
	mkdir $bin_dir
endif
if (! -e $lib_dir) then
	mkdir $lib_dir
endif

if (! -e $inst_bin_dir) then
        mkdir $inst_bin_dir
endif
if (! -e $inst_lib_dir) then
        mkdir $inst_lib_dir
endif

if (! -e $inst_plug_parent) then
        mkdir $inst_plug_parent
endif
if (! -e $inst_plug_dir) then
        mkdir $inst_plug_dir
endif

exit


#
# Usage, help.
#

usage:
echo "setup [options]"
echo "Options are: -help,-h     Print this message."
echo "             -debug,-d    Set up with debug flags."
echo "             -machine,-m  Set target machine to one of: (irix5 | irix6-32 |" 
echo "                          (irix6-n32 | solaris | rhlinux | alphalinux) "
echo "             -inst,-i     Set installation directory for bin and lib."
echo "                          e.g., /usr/local/IMOD"
echo "             -swapieee    Make Fortran code on SGI swap IEEE floats"
echo "             -swapvms     Make Fortran code on SGI swap VMS floats"
echo "             -shared      Make libraries shared"
echo "             -no_shared   Make libraries non-shared"
echo "             -tiff        Link with TIFF libraries"
echo "             -no_tiff     Do not try to link with TIFF libraries"
echo "             -compiler    Use specified compilers (intel for rhlinux)"
echo "             -flags       Set flags for compilation"
exit


