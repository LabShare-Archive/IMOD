#!/bin/csh
#############################################################################
#
set c_includes = '-I$(QTDIR)/include'
#
#   default is to assume tifflib does exist
#
if ($tifflibs == default) set tifflibs = true

if ($tifflibs == true) set c_includes = '-I$(QTDIR)/include -I/usr/local/include'

echo 'LDFLAGS = -L$(LIBDIR) -dynamic -read_only_relocs warning' >> $configure

# DNM 1/1/9/03: remove the defines for FILE_OFFSET_BITS=64 here and in the
# qconfigures - it doesn't work anymore on OS 10.3

echo "SHELL     = /bin/csh"         >> $configure

echo "CC        = gcc"              >> $configure
echo "FC        = g77"              >> $configure
#
# tell the C routines being called by Fortran that they need two __
#
echo '#define G77__HACK' >> $hconfigure

# Needed under tcsh 6.12 in RH 8.0 to avoid getting two \ out
cat << EOF >> $configure
CP        = \\cp
FIND      = \\find
EOF

#set shared_libs = false

if ($shared_libs != false) then
	echo "AR      = c++"                 >> $configure
	echo "ARCPP   = c++"                >> $configure
	echo "ARFLAGS = $flags -dynamiclib -Wl,-single_module -Wl,-flat_namespace -Wl,-undefined,suppress -Wl,-read_only_relocs,warning -o "    >> $configure
	echo "RANLIB    = true"                     >> $configure
	echo "LIBEXT  = dylib"                 >> $configure
else
	echo "AR      = ar"                 >> $configure
	echo "ARCPP   = ar"                 >> $configure
	echo "ARFLAGS = ruv "                >> $configure
	echo "RANLIB    = ranlib"            >> $configure
	echo "LIBEXT  = a"                  >> $configure
endif

echo 'MAKELIB   = $(AR) $(ARFLAGS)' >> $configure
echo 'MAKELIBCPP = $(ARCPP) $(ARFLAGS)' >> $configure

set fort_cpplibs = -lstdc++

echo "CLIBS   = -lc -lm" >> $configure
echo 'LIBS    = $(CLIBS)'  >> $configure
echo 'FORTCLIBS = '  >> $configure

echo "IMLIBS     = -lhvem -lim -lifft  -limod -lrandm -ldtrigs" >> $configure

# For OS 10.3, clip needed libgcc.a to define restFP and saveFP (-lgcc no good)
#
echo 'FLCC      = $(FC)'              >> $configure
echo "F77LIBS   = /usr/lib/libgcc.a"                  >> $configure

# 
# tell the C routines which way to swap floats
#
echo '#define SWAP_IEEE_FLOATS' >> $hconfigure

#
# Fork does not work
# Clipboard works WITHOUT the timer hack and not with it
# GLU quadric objects seem to be context specific
# Clipboard is unreliable so resend events at given interval
#
echo '#define NO_IMOD_FORK' >> $hconfigure
echo '#define GLU_QUADRIC_HACK' >> $hconfigure
echo '#define SENDEVENT_RETRY_HACK 300' >> $hconfigure
echo '#define MAC103_BIGFILE' >> $hconfigure

set optimization = "-O3 -w"
if ($debug == true) set optimization = "-g -O0"

#
#
#  The fallbacks need to be defined because of problems with n32 code on the
#  SGI; just define them the same as non-fallback versions.
#
echo "CFLAGS  = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "CXXFLAGS = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "FFLAGS  = $flags $optimization $include_flags" >> $configure
echo "NOOPFFLAGS = $flags $optimization -O0 $include_flags" >> $configure

echo "CFALLBACK  = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "FFALLBACK  = $flags $optimization $include_flags" >> $configure
echo 'LDFALLBACK = $(LDFLAGS)'       >> $configure
echo 'NOOPFFALLBACK = $(NOOPFFLAGS)' >> $configure

# Use fortran code for tilt program, make extra fortran libs
echo 'TILTOBJS = bpsumnox.o bpsumxtilt.o bpsumlocal.o' >> $configure
echo 'LINUXFLIBS = $(LIBDTRIGS) $(LIBRANDM)' >> $configure

#
# Set the switch point include file for the FBP algorithm in Tilt
#
set fbpswitch       = fbpswitch-pc.inc


# Set the string for the "ctrl" key
#
set ctrl_string = Apple

# Copy files for libdl, ranlib may not be needed if preserve date, but do it
#
\cp -p sysdep/mac/dlfcn.h $inc_dir
\cp -p sysdep/mac/libdl.a $lib_dir
ranlib $lib_dir/libdl.a

#
# Set up things for Qt include files
#

# get target executable name pattern from sendevent
#
(cd $sendevent_dir ; qmake imodsendevent.pro)
set send_target = `sed -n '/^TARGET *= */s///p' $sendevent_dir/Makefile`
set imod_target = `echo $send_target | sed '/imod/s/imodsendevent/3dmod/g'`
set midas_target = `echo $send_target | sed '/imod/s/imodsendevent/midas/g'`
set qt_libs = `sed -n '/^LIBS /s/^LIBS.*-L\$(QTDIR/-L\$(QTDIR/p' $sendevent_dir/Makefile`

# Tell plugins where imod is
#
set plug_loader = ${source_dir}/${imod_dir}/${imod_target}
echo 'MAKELIBSO = $(ARCPP) -bundle -dynamic -bundle_loader '"$plug_loader"' $(LDFLAGS) -limod -ldiaqt '"$qt_libs -o" >> $configure
echo  'MAKEF77PLUGIN  = $(FC)  -bundle -dynamic -bundle_loader '"$plug_loader"' $(LDFLAGS) -limod -ldiaqt -ldtrigs '"$qt_libs $fort_cpplibs -o" >> $configure

# make script files to run programs
# Set DYLD_LIBRARY_PATH with qtlib before running program
#
cat <<EOF >! $imod_dir/runimod
#!/bin/csh -f
setenv DYLD_LIBRARY_PATH \${IMOD_QTLIBDIR}:\$DYLD_LIBRARY_PATH
set background = 1
foreach i (\$*)
    if ("\$i" == '-D' || "\$i" == '-W') set background = 0
end
if (\$background == 0) then
    \$IMOD_DIR/bin/${imod_target} \$*
else
    \$IMOD_DIR/bin/${imod_target} \$* &
endif
EOF

cat <<EOF >! $imod_dir/runimodv
#!/bin/csh -f
setenv DYLD_LIBRARY_PATH \${IMOD_QTLIBDIR}:\$DYLD_LIBRARY_PATH
set background = 1
foreach i (\$*)
    if ("\$i" == '-D') set background = 0
end
if (\$background == 0) then
    \$IMOD_DIR/bin/${imod_target} -view \$*
else
    \$IMOD_DIR/bin/${imod_target} -view \$* &
endif
EOF

cat <<EOF >! $sendevent_dir/runsendevent
#!/bin/csh -f
setenv DYLD_LIBRARY_PATH \${IMOD_QTLIBDIR}:\$DYLD_LIBRARY_PATH
\$IMOD_DIR/bin/${send_target} \$*
EOF

cat <<EOF >! $midas_dir/runmidas
#!/bin/csh -f
setenv DYLD_LIBRARY_PATH \${IMOD_QTLIBDIR}:\$DYLD_LIBRARY_PATH
set background = 1
foreach i (\$*)
    if ("\$i" == '-D') set background = 0
end
if (\$background == 0) then
    \$IMOD_DIR/bin/${midas_target} \$*
else
    \$IMOD_DIR/bin/${midas_target} \$* &
endif
EOF

chmod +x $imod_dir/runimod $imod_dir/runimodv 
chmod +x $midas_dir/runmidas $sendevent_dir/runsendevent

cat << EOF  >! $midas_qconf

EOF

cat << EOF >! $imod_qconf
SOURCES += linegui.cpp
HEADERS += linegui.h
LIBS += -L$lib_dir -liimod -limod -ldiaqt -ltiff -ltrack -ldtrigs
LIBS += -ldl -lm
RC_FILE = b3dicon.icns
EOF

#
# Set up to copy qt lib for a distribution, and set name of LD_LIBRARY variable
echo 'QTINSTLIBDIR = qtlib' >> $configure
set ld_lib_var      = DYLD_LIBRARY_PATH
echo 'MACAPPS = mtk nda sda genhstplt mtoverlap mtpairing avgstatplot' >> $configure
set qtapp_path  = '$1.app/Contents/MacOS/'
echo 'INSTALL_FILES = IMOD-mac.csh mac.cshrc linklibs-mac' >> $configure
if ($distname == "") set distname = _osx
