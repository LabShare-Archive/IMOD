#!/bin/csh
#############################################################################
#
set c_includes = ''
#
#   default is to assume tifflib does exist
#
if ($tifflibs == default) set tifflibs = true

if ($tifflibs == true) set c_includes = "$c_includes"' -I/usr/local/include'

# Set defaults for using gcc
#
set openmpFlags = ""
set ccompFlags = ""
set ccomp = "gcc"
set cxx = "g++"
set libmt = ""
setenv QMAKESPEC macx-g++
gcc -v >&! gcc.tmp
set gccvers = `sed -n '/gcc version/s/.*sion \([0-9\.]*\).*/\1/p' gcc.tmp |sed '/\./s// /g'`
\rm -f gcc.tmp
if ($#gccvers < 2) set gccvers = (3 0)
@ minorvers = $gccvers[2]
set unameout = `uname -r | sed '/\./s// /g'`
@ darversion = $unameout[1]

# Set default fortran compiler to intel for intel, but only if it exists and 
# its true location has been put on the path
#
if ($compiler == default && $intel == true) then
    set ifortout = `which ifort`
    if ($status || "$ifortout:h" == "/usr/bin") then
	set compiler = gfortran
        if ($minorvers < 2) set openmp = false
    else
	set compiler = ifort
    endif
endif
if ($compiler == gnu) set compiler = gfortran

# If using intel fortran compiler, check for C compiler too
# Let an intel entry force use of C++ compiler if possible
#
if ($compiler == ifort || $compiler == intel) then
    set iccout = `which icc`
    if (! $status && ("$iccout:h" != "/usr/bin" || $compiler == intel)) then
        set ccomp = "icc"
        set cxx = "icpc"
        setenv QMAKESPEC macx-icc
        set ccompFlags = '-vec-report0'
        if ($openmp == true) then
            set openmpFlags = "-openmp"
            set openmpfFlags = "-openmp"
            set libmt = "mt"
        endif
        set nnvulnflags = '-fp-model source'
    else
        if ($minorvers < 2) set openmp = false
    endif
    set compiler = ifort

    # Get the fortran version, they changed libraries
    #
    ifort -v >&! ifort.tmp
    set ifortnum = `sed -n -e '/\./s// /g' -e '/ersion/s/.*ersion \([0-9 ]*\).*/\1/p' ifort.tmp`
    \rm -f ifort.tmp
    @ ifortversion = 9
    if ("$ifortnum" != "") @ ifortversion = $ifortnum[1]
    set openmplib = "libguide"
    if ($ifortversion > 10) set openmplib = "libiomp5"
endif

# If using gcc, assume that version 4.2 has openmp for C and fortran
if ($ccomp == gcc) then
    if ($gccvers[1] == 3) then
        echo "IMOD can no longer be compiled with g77/gcc 3"
        exit 1
    endif
    if ($minorvers >= 2 && $openmp == true) then
        set openmpFlags = "-fopenmp"
        set openmpfFlags = "-fopenmp"
        set libmt = "mt"

        # For mixed compilation, the library must be libiomp, and need to
        # specify this before version 11 where it became default
        if ($compiler == ifort) then
            set openmpfFlags = "-openmp --openmp-lib compat"
            set openmplib = "libiomp5"
            if ($ifortversion > 10) set openmpfFlags = "-openmp"
        endif
    endif

    if ($?MACOSX_DEPLOYMENT_TARGET) then
	set sdkpath = `ls -d /Developer/SDKs/*${MACOSX_DEPLOYMENT_TARGET}*`
	if ($#sdkpath == 1) then
	    set macsdkFlags = "-isysroot $sdkpath"
	    echo "Setting gcc compile flag  $macsdkFlags"
	endif
    endif
endif

# DNM 1/1/9/03: remove the defines for FILE_OFFSET_BITS=64 here and in the
# qconfigures - it doesn't work anymore on OS 10.3

echo "CC        = $ccomp"              >> $configure
echo "CXX       = $cxx"              >> $configure

# Figure out if 64-bit from Qt moc program and set name of LD_LIBRARY variable
# Set -m32 as a default for gcc compiles (m32/m64 could be set for Intel too?)
# Since setup puts out DYLD_FRAMEWORK_PATH, only DYLD_LIBRARY_PATH is needed
#
set filetext = `file $QTDIR/bin/moc | grep 64-bit`
set m64flags = ""
set ld_lib_var      = DYLD_LIBRARY_PATH
set tiffa = libtiff.a
set jpega = libjpeg.a
if ($ccomp == gcc) set m64flags = '-m32'
if ("$filetext" != "") then
    set m64bit = true
    set m64notIA = true
    if ($ccomp == gcc) set m64flags = '-m64'
    if (-e /usr/local/lib/libtiff64.a) set tiffa = libtiff64.a
    if (-e /usr/local/lib/libjpeg64.a) set jpega = libjpeg64.a

    # This could be a Qt 4.5 requirement...  (as maybe was QtAssistant)
    set midasGL = ""
endif

# Set the TIFF libs.  libiimod needs to have all of them; it is not clear
# if the executables linking it need to have them all too
# The 64 and 32-bit libraries can coexist...
if ($tifflibs == true) then
    set ltiff = "/usr/local/lib/$tiffa -lz"
    if (-e /usr/local/lib/$jpega) set ltiff = "$ltiff /usr/local/lib/$jpega"
else
    set ltiff = ""
endif

# -read_only_relocs warning is not supposed to be used with 64-bit OS 10.6
#
set ldread_only = "-read_only_relocs warning"
set wlread_only = "-Wl,-dynamic -Wl,-read_only_relocs,warning"
if ($m64bit == true && $darversion > 9) then
    set ldread_only = ""
    set wlread_only = ""
endif

echo "LDFLAGS = $m64flags"' -L$(LIBDIR) '"-dynamic $openmpFlags $ldread_only" >> $configure

if ($compiler == ifort) then
    set fcomp = "ifort"

    
    set fcompFlags = "-132 -assume bscc -vec-report0 -heap-arrays 100"

    echo "      parameter (nbytes_recl_item=4)" >! $endian_dir/recl_bytes.inc
    set ldfflags = '-L$(LIBDIR) '"-i-dynamic $openmpfFlags $wlread_only"
    set fcmpldFlags = "-i-dynamic"
    set exefflags = "-mdynamic-no-pic"
    set fortdir = `which ifort`
    set fortlibdir = $fortdir:h:h/lib
    if (! -e $fortlibdir) set fortlibdir = $fortdir:h:h:h/lib
    echo "DLLSOURCEDIR1 = $fortlibdir" >> $configure
    set dllstocopy1 = "libifcore$libmt libifport$libmt libimf libsvml"
    if ($ifortversion <= 9) then
        set dllstocopy1 = "$dllstocopy1 libirc"
    else
        set dllstocopy1 = "$dllstocopy1 libintlc"
    endif    
    if ($openmp == true) set dllstocopy1 = "$dllstocopy1 $openmplib"
    echo "DLLSTOCOPY1 = $dllstocopy1" >> $configure
else

    set fcompFlags = "-ffixed-line-length-0"
    set exefflags = ""
    set fcmpldFlags = $ldfflags

    set dllsourcedir1 = "/usr/local/lib"
    #
    # gfortran needs unlimited fixed format, and date and time subroutines
    # also needs -fbackslash starting at 4.3 
    gfortran -v >&! gfortran.tmp
    set gfortvers = `sed -n '/gcc version/s/.*sion \([0-9\.]*\).*/\1/p' gfortran.tmp |sed '/\./s// /g'`
    \rm -f gfortran.tmp
    @ minorvers = $gfortvers[2]
    if ($gfortvers[1] != 4 || $minorvers > 2) set fcompFlags = "-fbackslash $fcompFlags"
    set fcomp = "gfortran"

    # Sometimes this is needed, sometimes not, just put it in
    set lapack_flibs = "-lgfortran"
    echo "DATESRC   = compat/datetime.f" >> $configure
    echo "DIRDATEOBJ  = compat/datetime.o" >> $configure
    echo "DATEOBJ  = datetime.o" >> $configure
    echo "DLLSTOCOPY1 = libgfortran" >> $configure
    if (-e /usr/lib/libgfortran.dylib) set dllsourcedir1 = "/usr/lib"
    echo "DLLSOURCEDIR1 = $dllsourcedir1" >> $configure
endif
if ($wrapintel == true && $compiler == ifort) then
    echo "DLLDESTDIR = qtlib" >> $configure
else
    echo "DLLDESTDIR = lib" >> $configure
endif
@ dllnum = 2

# Needed under tcsh 6.12 in RH 8.0 to avoid getting two \ out
cat << EOF >> $configure
CP        = \\cp
FIND      = \\find
EOF

#set shared_libs = false

set release = `echo $URELEASE | sed 's/\./ /g'`
@ majorrel = $release[1]

if ($shared_libs != false) then
    if ($ccomp == icc) then
        echo "AR      = icc"                 >> $configure
        echo "ARCPP   = icpc"                 >> $configure
        set far = 'ifort'
    else
	echo "AR      = c++"                 >> $configure
	echo "ARCPP   = c++"                >> $configure
    endif
    echo "ARFLAGS = $flags $openmpFlags $m64flags -i-dynamic -dynamiclib -Wl,-single_module -Wl,-flat_namespace -Wl,-undefined,suppress $wlread_only -o "    >> $configure
    set farflags = "$flags $openmpfFlags $m64flags -i-dynamic -dynamiclib -Wl,-single_module -Wl,-flat_namespace -Wl,-undefined,suppress $wlread_only -o "
    echo "RANLIB    = true"                     >> $configure
    echo "LIBEXT  = dylib"                 >> $configure
    if ($majorrel > 7) then
        set far = $fcomp
        set makestaticlib = "ar -sruv "
        set makenmcar = '$(MAKESTATICLIB)'
        set nmcarext = "a"
        if ($tifflibs == true) echo "LIBIIMODDEF = $ltiff -lSystemStubs" >> $configure
    endif
else
    echo "AR      = ar"                 >> $configure
    echo "ARCPP   = ar"                 >> $configure
    echo "ARFLAGS = ruv "                >> $configure
    echo "RANLIB    = ranlib"            >> $configure
    echo "LIBEXT  = a"                  >> $configure
endif

echo 'MAKELIB   = $(AR) $(ARFLAGS)' >> $configure
echo 'MAKELIBCPP = $(ARCPP) $(ARFLAGS)' >> $configure

# Simplified 7/26/10 since there is no gcc 3 compile any more
set fort_cpplibs = "-lstdc++.6"
if ($compiler == ifort) set fort_cpplibs = "-lstdc++ -lgcc_s.1"

echo "CLIBS   = -lc -lm" >> $configure
echo 'LIBS    = $(CLIBS)'  >> $configure
echo 'FORTCLIBS = '  >> $configure

# Removed FLCC and F77LIBS since clip no longer needs fortran

# 
# tell the C routines which way to swap floats
#
echo '#define SWAP_IEEE_FLOATS' >> $hconfigure

# 
# tell the C and fortran routines to swap the bytes for INTEL
#
if ($intel == true) then
    echo '#define B3D_LITTLE_ENDIAN' >> $hconfigure
    \cp $endian_dir/little_endian.inc $endian_dir/endian.inc
endif

#
# Fork does not work
# Clipboard works WITHOUT the timer hack and not with it
# GLU quadric objects seem to be context specific
# Clipboard is unreliable so resend events at given interval
#
echo '#define NO_IMOD_FORK' >> $hconfigure
echo '#define GLU_QUADRIC_HACK' >> $hconfigure
echo '#define SENDEVENT_RETRY_HACK 300' >> $hconfigure
echo '#define MAC103_BIGFILE' >> $hconfigure

# Set the GLU_CALLBACK for OS 10.4 with gcc 4
if ($darversion < 9 && $ccomp == gcc) echo '#define GLU_CALLBACK GLvoid (*)(...)' >> $hconfigure

set optimization = "-O3 -w"
# 12/9/05: hurt more than helped on G5
#if ($fortvers[1] != 3) set optimization = "-O3 -w -ftree-vectorize -maltivec"
if ($compiler == ifort) set optimization = "-O2"
if ($debug == true) set optimization = "-g -O0"

set cflags = "$flags $m64flags $ccompFlags $optimization $defines $include_flags $c_includes $macsdkFlags"
set fflags = "$flags $m64flags $fcompFlags $fcmpldFlags $optimization $include_flags"

echo "CFLAGS  = $cflags" >> $configure
echo "CXXFLAGS = $cflags" >> $configure
echo "FFLAGS  = $fflags $exefflags" >> $configure
echo "NOOPFFLAGS = $fflags $exefflags -O0" >> $configure
echo "LIBCFLAGS  = $cflags" >> $configure
echo "LIBFFLAGS  = $fflags" >> $configure

# RAPTOR on ppc64: The safest course for getting it to compile
if ($intel != true && $m64bit == true) echo "EIGENFLAGS = -DEIGEN_DONT_VECTORIZE" >> $configure

# 7/6/05: took out the fallbacks; no longer needed on SGI
#

# Use fortran code for tilt program
echo 'TILTOBJS = bpsumnox.o bpsumxtilt.o bpsumlocal.o' >> $configure

# make extra fortran libs
if ($compiler == ifort) then
    echo 'LINUXFLIBS = ' >> $configure
    echo "IMLIBS     = -lhvem -lmrcim -lifft  -lcfshr" >> $configure
else
    echo 'LINUXFLIBS = $(LIBCOMPAT)' >> $configure
    echo "IMLIBS     = -lhvem -lmrcim -lifft  -lcfshr -lb3dcmpt" >> $configure
endif

# Adjust variables for CUDA.  Libraries are hardcoded to user's installed 
# copies but we still have to pack libraries for users without CUDA
#
if ($?CUDA_DIR) then
    set cudavers = `nvcc --version | sed -n -e '/[,.]/s// /g' -e '/^.*release/s///p'`
    @ cudamajor = $cudavers[1]
    if ($cudamajor > 2) then
        set nvcc_flags = "$nvcc_flags -m64 -DUNIX -Xcompiler -fno-strict-aliasing -O3"
    else
        set nvcc_flags = "$nvcc_flags -DUNIX -Xcompiler -fno-strict-aliasing -O3 --host-compilation C"
    endif
    set cudalibs = "-L$CUDA_DIR/lib -Wl,-rpath,/usr/local/cuda/lib -lcudart -lcufft -ltlshook"
    if ($m64bit == true) set cudalibs = "$cudalibs -lstdc++"
    echo "DLLSTOCOPY$dllnum = libcudart libcufft libtlshook" >> $configure
    echo "DLLSOURCEDIR$dllnum = $CUDA_DIR/lib" >> $configure
endif

# Set the string for the "ctrl" key
#
set ctrl_string = Apple

# 5/11/05: removed libdl.a and dlfcn.h copying, no longer needed
# set up strip to use -x flag (needed for 10.4)
# 9/23/08: Intel compiler 10.1, strip -x needed for mtk.  So it is safest
# to make this unconditional, not gnu compiler only
set strip = "strip -x"

#
# Set up things for Qt include files
#

# get target executable name pattern from sendevent
# This is just enough in qconfigure to keep it happy
#
echo target.path = $inst_bin_dir >! $sendevent_qconf
(cd $sendevent_dir ; qmake imodsendevent.pro)
set send_target = `sed -n '/^TARGET *= */s///p' $sendevent_dir/Makefile`
set imod_target = `echo $send_target | sed '/imod/s/imodsendevent/3dmod/g'`
set midas_target = `echo $send_target | sed '/imod/s/imodsendevent/midas/g'`
set assist_target = `echo $send_target | sed '/imod/s/imodsendevent/imodqtassist/g'`
set ctf_target = `echo $send_target | sed '/imod/s/imodsendevent/ctfplotter/g'`
set prochunk_target = `echo $send_target | sed '/imod/s/imodsendevent/processchunks/g'`
set sourcedoc_exe = `echo $send_target | sed '/imod/s/imodsendevent/sourcedoc/g'`

# Make some more lists for looping
#
set qrun = (runsendevent runqtassist runctfplotter runprocesschunks runmidas)
set qtarget = ($send_target $assist_target $ctf_target $prochunk_target)

# make script files to run programs
# Set DYLD_LIBRARY_PATH with qtlib before running program
#
@ i = 0   # Loop on imodsendevent imodqtassist ctfplotter processchunks
while ($i < 4)
    @ i++
cat <<EOF >! $qdir[$i]/$qrun[$i]
#!/bin/sh
export DYLD_LIBRARY_PATH="\${IMOD_QTLIBDIR}:\${IMOD_DIR}/lib:\$DYLD_LIBRARY_PATH"
export DYLD_FRAMEWORK_PATH="\${IMOD_QTLIBDIR}:\$DYLD_FRAMEWORK_PATH"
\$IMOD_DIR/bin/${qtarget[$i]} "\$@"
EOF
chmod a+x $qdir[$i]/$qrun[$i]
end

cat <<EOF >! $imod_dir/runimod
#!/bin/sh
export DYLD_LIBRARY_PATH="\${IMOD_QTLIBDIR}:\${IMOD_DIR}/lib:\$DYLD_LIBRARY_PATH"
export DYLD_FRAMEWORK_PATH="\${IMOD_QTLIBDIR}:\$DYLD_FRAMEWORK_PATH"
background=1
for i
do
    if [[ "\$i" == '-D' || "\$i" == '-W' || "\$i" == '-L' ]] ; then
        background=0
    fi
done
if [[ \$background == "0" ]] ; then
    \$IMOD_DIR/bin/${imod_target} "\$@"
else
    \$IMOD_DIR/bin/${imod_target} "\$@" &
fi
EOF

cat <<EOF >! $imod_dir/runimodv
#!/bin/sh
export DYLD_LIBRARY_PATH="\${IMOD_QTLIBDIR}:\${IMOD_DIR}/lib:\$DYLD_LIBRARY_PATH"
export DYLD_FRAMEWORK_PATH="\${IMOD_QTLIBDIR}:\$DYLD_FRAMEWORK_PATH"
background=1
for i
do
    if [[ "\$i" == '-D' || "\$i" == '-W' || "\$i" == '-L' ]] ; then
        background=0
    fi
done
if [[ \$background == "0" ]] ; then
    \$IMOD_DIR/bin/${imod_target} -view "\$@"
else
    \$IMOD_DIR/bin/${imod_target} -view "\$@" &
fi
EOF

cat <<EOF >! $midas_dir/runmidas
#!/bin/sh
export DYLD_LIBRARY_PATH="\${IMOD_QTLIBDIR}:\${IMOD_DIR}/lib:\$DYLD_LIBRARY_PATH"
export DYLD_FRAMEWORK_PATH="\${IMOD_QTLIBDIR}:\$DYLD_FRAMEWORK_PATH"
background=1
for i
do
    if [[ "\$i" == '-D' ]] ; then
        background=0
    fi
done
if [[ \$background == "0" ]] ; then
    \$IMOD_DIR/bin/${midas_target} "\$@"
else
    \$IMOD_DIR/bin/${midas_target} "\$@" &
fi
EOF

chmod a+x $imod_dir/runimod $imod_dir/runimodv $midas_dir/runmidas 

cat << EOF  >! $midas_qconf
INCLUDEPATH += $QTDIR/include/QtOpenGL
EOF

# 3/33/04: removed -ldl from the second LIBS line because it is in libqt now
# 6/4/04: removed -ldtrigs because track is rewritten not to need it
cat << EOF >! $imod_qconf
SOURCES += linegui.cpp
HEADERS += linegui.h
LIBS += -L$lib_dir -liimod -limesh -limod -ltrack -lcfshr -ldiaqt -lifft $ltiff
LIBS += -lm
RC_FILE = b3dicon.icns
EOF

# 3/30/10: Start this file, it is now expected to be started
echo " " >! $ctfplot_qconf
echo " " >! $prochunk_qconf

# Make run scripts for the fortran Qt programs
# They have to be named run... because the programs install in bin first
#
set fortqtprogs = (mtk nda sda genhstplt mtoverlap mtpairing avgstatplot filterplot)
set gen_scripts = ()
foreach i ($fortqtprogs)
    set gen_scripts = ($gen_scripts run$i)
    cat <<EOF >! $scripts_dir/run$i
#!/bin/sh
export DYLD_LIBRARY_PATH="\${IMOD_QTLIBDIR}:\${IMOD_DIR}/lib:\$DYLD_LIBRARY_PATH"
export DYLD_FRAMEWORK_PATH="\${IMOD_QTLIBDIR}:\$DYLD_FRAMEWORK_PATH"
\$IMOD_DIR/bin/$i.app/Contents/MacOS/$i "\$@"
EOF
    chmod a+x $scripts_dir/run$i
end

#
# Set up to copy qt lib for a distribution, 
echo 'QTINSTLIBDIR = qtlib' >> $configure
echo "MACAPPS = $fortqtprogs" >> $configure
set qtapp_path  = '$1.app/Contents/MacOS/'
echo 'INSTALL_FILES = IMOD-mac.csh mac.cshrc IMOD-mac.sh mac.profile linklibs-mac' >> $configure
if ($distname == "") then
    set distname = _osx_ppc
    if ($intel == true) set distname = _osx_intel 
    if ($m64bit == true) set distname = ${distname}64
endif

