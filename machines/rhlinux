#############################################################################
# Intel running Red Hat Linux 7.0
# Modified for Intel running Red Hat 7.3  7/18/02 by dnm and rjg
#
#  Use OpenMotif 2.1.30 included with the RH 7.0 Powertools
#  Separate pointers are needed for X and Motif includes
#
set Xlibdir = /usr/X11R6/lib
set Xincdir = /usr/X11R6/include/X11
set Mincdir = /usr/X11R6/include

set opengl_inc = /usr/include/GL
set opengl_lib = /usr/lib

# DNM 12/3/00: define directories for installing GLw includes and library
set glwincdir = /usr/include/X11/GLw
set glwlibdir = /usr/lib

# add -I$opengl_inc if it's not on the system include path
# add -I$glw_inc if using the glw installed by "make installglw"
set c_includes =  "-I$Xincdir -I$Mincdir -I$opengl_inc -I$glwincdir"

# add -I$opengl_lib if it's not on the system library path
echo 'LDFLAGS = -L$(LIBDIR)' "-L$Xlibdir" >> $configure

# DNM 8/27/01: Needed for large files to work right.  Use a -D define instead
# of #define in imodconfig because it must precede all system includes.
set defines = -D_FILE_OFFSET_BITS=64

echo "SHELL     = /bin/csh"         >> $configure

if ($compiler == intel) then
	echo "CC        = icc"              >> $configure
	echo "FC        = ifc"              >> $configure
else
	echo "CC        = gcc"              >> $configure
	echo "FC        = f77"              >> $configure
	set usfftdir = $source_dir/USFFTlib/pc
	#
	# tell the C routines being called by Fortran that they need two __
	#
	echo '#define G77__HACK' >> $hconfigure
endif

echo 'CP        = \\cp'              >> $configure
echo 'FIND      = \\find'            >> $configure

set wrapper = ""

if ($shared_libs != false) then
	echo "AR      = ld"                 >> $configure
	echo "ARFLAGS = $flags -shared -o"    >> $configure
	echo "RANLIB    = true"                     >> $configure
	echo "LIBEXT  = so"                 >> $configure
	#
	# With Intel compiler, call an ld wrapper to strip out the -static flag
	# make blockio into a static libary  to drag in stat64 properly, and 
	# exclude it from libim.so
	#
	if ($compiler == intel) then
		set wrapper = "-Qlocation,link,$source_dir/scripts"
		set blockio = libblockio.a
		set imsubsobj = '[^b]*.o'
	endif
else
	echo "AR      = ar"                 >> $configure
	echo "ARFLAGS = ruv"                >> $configure
	echo "RANLIB    = ranlib"            >> $configure
	echo "LIBEXT  = a"                  >> $configure
endif

echo 'MAKELIB   = $(AR) $(ARFLAGS)' >> $configure
echo "MAKELIBSO = ld $flags -shared -o" >> $configure


echo "CLIBS   = -lc -lm" >> $configure
echo 'LIBS    = $(CLIBS)'  >> $configure
echo 'FORTCLIBS = '  >> $configure
echo "GLIBS = -lGLw -lGL -lGLU" >> $configure

if ($compiler == intel) then
	# For Intel, add -lXp, add -Vaxlib flag for compatibility calls
	echo "XLIBS   = -lXm -lXp -lXt -lSM -lICE -lXext -lX11" >> $configure
	echo "IMLIBS     = $wrapper -Vaxlib -lhvem -lim -lblockio -lifft  -limod -lrandm -ldtrigs " >> $configure
else
	echo "XLIBS   = -lXm -lXt -lSM -lICE -lXext -lX11" >> $configure
	echo "IMLIBS     = -lhvem -lim -lifft  -limod -lrandm -ldtrigs" >> $configure
endif
echo 'GRAPHLIBS    = -ldnmncar $(IMLIBS) $(XLIBS)' >> $configure

# 
# If using plugins, need to tell linker to export symbols
echo 'PLUGLIBS  = -ldl -Wl,-E' >> $configure
echo 'IMODCC    = $(CC)'              >> $configure
echo  'MAKEF77PLUGIN  = $(FC) '"$wrapper"' -shared $(LDFLAGS) -ldtrigs -o'  >> $configure
echo 'FLCC      = $(FC)'              >> $configure
echo "F77LIBS   = $wrapper"                  >> $configure

# 
# tell the C routines to swap the bytes for INTEL
#
echo '#ifndef LITTLE_ENDIAN' >> $hconfigure
echo '#define LITTLE_ENDIAN' >> $hconfigure
echo '#endif' >> $hconfigure
echo '#define SWAP_IEEE_FLOATS' >> $hconfigure

#
# Tell fortran routines how to swap bytes too, and set # of bytes per
# item to 1 for defining record length in fortran direct unformatted I/O
#
\cp $endian_dir/little_endian.inc $endian_dir/endian.inc
echo "      parameter (nbytes_recl_item=1)" >! $endian_dir/recl_bytes.inc

#
#
# tell zap window to redraw twice after a resize (GeForce3/RH7.1 problem)
#
echo '#define ZAP_RESIZE_HACK'  >> $hconfigure
#
# The following hacks were needed for Nvidia 0.95 drivers
#
# tell imod to not count on GL_LINE_LOOP working
#echo '#define LINE_LOOP_HACK'  >> $hconfigure
# tell imod to fill all the way across lines when drawing pixels
#echo '#define PIXELDRAW_HACK'  >> $hconfigure
# tell imod to clear top of xyz window after draw
#echo '#define XYZ_CLEAR_HACK'  >> $hconfigure
# tell imod to draw images in chunks
#echo '#define CHUNKDRAW_HACK 4'  >> $hconfigure
#
# If using Mesa libGLU, tell imod that hacks are needed for contour fill by
# tesselation
#
#echo '#define TESS_HACK'  >> $hconfigure
#
# tell midas to time out expose events in montage fixing mode
#
echo '#define MIDAS_EXPOSE_HACK'  >> $hconfigure
#
# Use fixed CLK_TCK so code compiled on 7.1 runs on 7.0
#
echo '#define FIXED_CLK_TCK 100'  >> $hconfigure

if ($compiler == intel) then
	set optimization = "-O2 -axK -unroll -w"
	#set optimization = "-O2 -w"
	if ($debug == true) set optimization = "-g -O0"
else
	set optimization = "-O3 -w"
	if ($debug == true) set optimization = "-ggdb -O0"
endif

#
#
#  The fallbacks need to be defined because of problems with n32 code on the
#  SGI; just define them the same as non-fallback versions.
#
echo "CFLAGS  = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "CXXFLAGS = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "FFLAGS  = $flags $optimization $include_flags" >> $configure
echo "NOOPFFLAGS = $flags $optimization -O0 $include_flags" >> $configure

echo "CFALLBACK  = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "FFALLBACK  = $flags $optimization $include_flags" >> $configure
echo 'LDFALLBACK = $(LDFLAGS)'       >> $configure
echo 'NOOPFFALLBACK = $(NOOPFFLAGS)' >> $configure

# Use assembly code for tilt program, make extra fortran libs, skip SGI progs
echo 'TILTOBJS = handnox.o handxtilt.o handlocal.o' >> $configure
echo 'LINUXFLIBS = $(LIBDTRIGS) $(LIBRANDM)' >> $configure
echo 'RGBPROGS = '  >> $configure
#
#   default is to assume tifflib exists
#
if ($tifflibs == default) set tifflibs = true

