#!/bin/csh
#############################################################################
# Intel running Red Hat Linux 7-8
# Modified for Intel running Red Hat 7.3  7/18/02 by dnm and rjg
#
# 3/28/03: eliminated all X includes and libs
#
set c_includes =  ' -I$(QTDIR)/include'

echo 'LDFLAGS = -L$(LIBDIR)' >> $configure

# DNM 8/27/01: Needed for large files to work right.  Use a -D define instead
# of #define in imodconfig because it must precede all system includes.
set defines = -D_FILE_OFFSET_BITS=64

echo "SHELL     = /bin/csh"         >> $configure

if ($compiler == intel) then
	echo "CC        = icc"              >> $configure
	echo "FC        = ifc"              >> $configure
	set usfftdir = $source_dir/USFFTlib/pc-intel
else
	echo "CC        = gcc"              >> $configure
	echo "FC        = f77"              >> $configure
	set usfftdir = $source_dir/USFFTlib/pc
	#
	# tell the C routines being called by Fortran that they need two __
	#
	echo '#define G77__HACK' >> $hconfigure
endif

# Needed under tcsh 6.12 in RH 8.0 to avoid getting two \ out
cat << EOF >> $configure
CP        = \\cp
FIND      = \\find
EOF

set wrapper = ""

if ($shared_libs != false) then
	echo "AR      = ld"                 >> $configure
	echo "ARCPP   = g++"                >> $configure
	echo "ARFLAGS = $flags -shared -o "    >> $configure
	echo "RANLIB    = true"                     >> $configure
	echo "LIBEXT  = so"                 >> $configure
	#
	# With Intel compiler, call an ld wrapper to strip out the -static flag
	# make blockio into a static libary  to drag in stat64 properly, and 
	# exclude it from libim.so
	#
	if ($compiler == intel) then
		set wrapper = "-Qlocation,link,$source_dir/scripts"
		set blockio = libblockio.a
		set imsubsobj = '[^b]*.o'
	endif
else
	echo "AR      = ar"                 >> $configure
	echo "ARCPP   = ar"                 >> $configure
	echo "ARFLAGS = ruv "                >> $configure
	echo "RANLIB    = ranlib"            >> $configure
	echo "LIBEXT  = a"                  >> $configure
endif

echo 'MAKELIB   = $(AR) $(ARFLAGS)' >> $configure
echo 'MAKELIBCPP = $(ARCPP) $(ARFLAGS)' >> $configure
echo "MAKELIBSO = g++ $flags -shared -o" >> $configure


echo "CLIBS   = -lc -lm" >> $configure
echo 'LIBS    = $(CLIBS)'  >> $configure
echo 'FORTCLIBS = '  >> $configure

if ($compiler == intel) then
	# For Intel, add -lXp, add -Vaxlib flag for compatibility calls
	echo "IMLIBS     = $wrapper -Vaxlib -lhvem -lim -lblockio -lifft  -limod -lrandm -ldtrigs " >> $configure
else
	echo "IMLIBS     = -lhvem -lim -lifft  -limod -lrandm -ldtrigs" >> $configure
endif

echo 'IMODCC    = $(CC)'              >> $configure
echo  'MAKEF77PLUGIN  = $(FC) '"$wrapper"' -shared $(LDFLAGS) -ldtrigs -o'  >> $configure
echo 'FLCC      = $(FC)'              >> $configure
echo "F77LIBS   = $wrapper"                  >> $configure

#
# Needed for Red Hat 9/Qt 3.1
#
set fort_cpplibs = -lstdc++

# 
# tell the C routines to swap the bytes for INTEL
#
echo '#define B3D_LITTLE_ENDIAN' >> $hconfigure
echo '#define SWAP_IEEE_FLOATS' >> $hconfigure

#
# Tell fortran routines how to swap bytes too, and set # of bytes per
# item to 1 for defining record length in fortran direct unformatted I/O
#
\cp $endian_dir/little_endian.inc $endian_dir/endian.inc
echo "      parameter (nbytes_recl_item=1)" >! $endian_dir/recl_bytes.inc

#
#
# tell zap window to redraw twice after a resize (GeForce3/RH7.1 problem)
#
#echo '#define ZAP_RESIZE_HACK'  >> $hconfigure
#
# The following hacks were needed for Nvidia 0.95 drivers
#
# tell imod to not count on GL_LINE_LOOP working
#echo '#define LINE_LOOP_HACK'  >> $hconfigure
# tell imod to fill all the way across lines when drawing pixels
#echo '#define PIXELDRAW_HACK'  >> $hconfigure
# tell imod to clear top of xyz window after draw
#echo '#define XYZ_CLEAR_HACK'  >> $hconfigure
# tell imod to draw images in chunks
#echo '#define CHUNKDRAW_HACK 4'  >> $hconfigure
#
# If using Mesa libGLU, tell imod that hacks are needed for contour fill by
# tesselation
#
#echo '#define TESS_HACK'  >> $hconfigure
#
# tell midas to time out expose events in montage fixing mode, and imod
# to do it generally
#
#echo '#define MIDAS_EXPOSE_HACK'  >> $hconfigure
#echo '#define ZAP_EXPOSE_HACK'  >> $hconfigure
#
# Use fixed CLK_TCK so code compiled on 7.1 runs on 7.0
#
#echo '#define FIXED_CLK_TCK 100'  >> $hconfigure

#
# Use a workaround when window managers won't do StaysOnTop reliably
#
echo '#define STAY_ON_TOP_HACK' >> $hconfigure

if ($compiler == intel) then
	## -axK fails on tiltalign-beadtrack
	set optimization = "-O2 -unroll -w"
	#set optimization = "-O2 -w"
	if ($debug == true) set optimization = "-g -O0"
else
	set optimization = "-O3 -w"
	if ($debug == true) set optimization = "-ggdb -O0"
endif

#
#
#  The fallbacks need to be defined because of problems with n32 code on the
#  SGI; just define them the same as non-fallback versions.
#
echo "CFLAGS  = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "CXXFLAGS = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "FFLAGS  = $flags $optimization $include_flags" >> $configure
echo "NOOPFFLAGS = $flags $optimization -O0 $include_flags" >> $configure

echo "CFALLBACK  = $flags $optimization $defines $include_flags $c_includes" >> $configure
echo "FFALLBACK  = $flags $optimization $include_flags" >> $configure
echo 'LDFALLBACK = $(LDFLAGS)'       >> $configure
echo 'NOOPFFALLBACK = $(NOOPFFLAGS)' >> $configure

# Use assembly code for tilt program, make extra fortran libs
echo 'TILTOBJS = handnox.o handxtilt.o handlocal.o' >> $configure
echo 'LINUXFLIBS = $(LIBDTRIGS) $(LIBRANDM)' >> $configure
#
#   default is to assume tifflib exists
#
if ($tifflibs == default) set tifflibs = true

#
# Set the switch point include file for the FBP algorithm in Tilt
#
set fbpswitch       = fbpswitch-pc.inc

#
# Set up things for Qt include files
#
cat << EOF  >! $midas_qconf
DEFINES	+= _FILE_OFFSET_BITS=64
EOF

cat << EOF >! $imod_qconf
LIBS += -L$lib_dir -limod -liimod -ldiaqt -ltiff -ldl
LIBS += -lm
DEFINES	+= _FILE_OFFSET_BITS=64
QMAKE_LFLAGS_DEBUG += -Wl,-E 
QMAKE_LFLAGS_RELEASE += -Wl,-E
EOF
