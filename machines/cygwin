#!/bin/csh
#############################################################################
# Intel running Cygwin/Windows
#
#

# Make intel the default
#
if ($compiler == default) set compiler = intel

#  Separate pointers are needed for X and Motif includes
#
set Xlibdir = /usr/X11R6/lib
set Xincdir = /usr/X11R6/include/X11
set Mincdir = /usr/X11R6/include
if ($no_xlibs == false) then
    if (!(-e $Xlibdir) || !(-e $Xincdir)) set no_xlibs = true
endif

set fcompFlags = ""

if ($compiler == intel) then
    set c_includes =  '-I"$(QTDIR)\include"'
    set cyg_lib = `cygpath -w $lib_dir`
    set xplax = qtplax.obj
    set cyg_inc = `cygpath -w $inc_dir`
    set include_flags = '-I. -I"'$cyg_inc'"'
    set objext = obj
    set moc = `cygpath $QTDIR/bin/moc`
    set inc_dir = `cygpath --mixed $inc_dir`
    set rgbprogs = 
    set ldfflags = "/C90 /4Yportlib"
    set fortcomp = ifl
    set delayload = gibberish
    
    # Get the version from icl, assuming we have matched c++/fortran compilers
    #
    icl >&! icl.tmp
    set iclnum = `sed -n '/Version/s/.*Version \([0-9]*\).*/\1/p' icl.tmp`
    \rm -f icl.tmp
    @ iclversion = 7
    if ("$iclnum" != "") @ iclversion = $iclnum

    # version 8 and above: remove /C90, set record length to 4 bytes
    # also need to specify that \ is an escape character
    # Also stack size needs to be set high for a few programs (findwarp and ?)
    # The delayload may be a temporary bug in the 9.0 that was tested 11/18/05
    if ($iclversion > 7) then
        set fortcomp = ifort
        set ldfflags = "/4Yportlib /F66000000"
        echo "      parameter (nbytes_recl_item=4)" >! $endian_dir/recl_bytes.inc
        set fcompFlags = "/assume:bscc"
        if ($iclversion == 9) set delayload = "DELAYLOAD"
    endif
    
cat << EOF >> $configure
LDFLAGS = /nologo /MD -link -LIBPATH:"$cyg_lib" /NODEFAULTLIB:libc.lib
.SUFFIXES: .cpp .obj .f .c
.cpp.obj:
	\$(CXX) -c \$(CXXFLAGS) \$<

.c.obj:
	\$(CC) -c \$(CFLAGS) \$<

.f.obj:
	\$(FC) -c \$(FFLAGS) \$<

EOF


else if ($no_xlibs == false) then
    set c_includes =  "-I$Xincdir -I$Mincdir"
    echo 'LDFLAGS = -L$(LIBDIR)' "-L$Xlibdir" >> $configure
    set xplax = xplax.o
else
    set c_includes =
    echo 'LDFLAGS = -L$(LIBDIR)' >> $configure
    set xplax = noplax.o
endif

if ($compiler == intel) then
    echo "CC        = icl"              >> $configure
    echo "CXX       = icl"              >> $configure
    echo "FC        = $fortcomp"              >> $configure
   # set usfftdir = $source_dir/USFFTlib/pc-intel
    echo '#define F77FUNCAP' >> $hconfigure
else
# DNM 8/27/01: Needed for large files to work right.  Use a -D define instead
# of #define in imodconfig because it must precede all system includes.
    set defines = -D_FILE_OFFSET_BITS=64
    echo "CC        = gcc"              >> $configure
    echo "FC        = g77"              >> $configure
    #
    # tell the C routines being called by Fortran that they need two __
    #
    echo '#define G77__HACK' >> $hconfigure
    echo '#define DLLEXPORT_H' >> $hconfigure
    echo '#define DLL_IM_EX' >> $hconfigure
endif

# Needed under tcsh 6.12 in RH 8.0 to avoid getting two \ out
cat << EOF >> $configure
SHELL     = /bin/sh
CP        = \\cp
FIND      = /usr/bin/find
EOF


set wrapper = ""
#
if ($compiler == intel) then
        if ($shared_libs == default) set shared_libs = true
	echo "AR      = link"                 >> $configure
	echo "ARCPP   = link"                 >> $configure
        if ($shared_libs == true) then
        #
        # to make dll's, set the extension, define the def files for the link 
        # lines and provide libraries that the dll depends on, 
        # and set the install directory to bin
        #
            set dllext = dll
            echo "ARFLAGS = -dll /NOLOGO /out:"         >> $configure
            echo 'MAKELIBCPP = link -dll /NOLOGO /out:' >> $configure
            echo 'LIBIIMODDEF = /def:libiimod.def ../buildlib/libimod.lib ../buildlib/libtiff.lib'   >> $configure
            echo 'LIBIMODDEF = /def:libimod.def'     >> $configure
            echo 'LIBIMDEF = /def:libim.def ../../buildlib/libifft.lib ../../buildlib/libimod.lib'  >> $configure
            echo 'LIBHVEMDEF = /def:libhvem.def libim.lib ../../buildlib/libimod.lib'  >> $configure
            echo 'LIBIFFTDEF = /def:libifft.def'     >> $configure
            echo 'LIBTRACKDEF = /def:libtrack.def'   >> $configure
            set inst_lib_dir = $inst_dir/bin
            #
            # Define a command for making non-dll libs still, needed for 
            # libdnmncar because it calls back to program.
            # Also need to make separate static libwmod, because it accesses
            # common in the program
            #
            set makenondll = 'link -lib /NOLOGO /out:'
            set modelallo =
            echo "LIBWMOD = libwmod.lib"  >> $configure
        else
            echo "ARFLAGS = -lib /NOLOGO /out:"                >> $configure
            echo 'MAKELIBCPP = $(ARCPP) $(ARFLAGS)' >> $configure
        endif
        echo "LIBEXT  = lib"                  >> $configure
	echo "RANLIB    = true"            >> $configure
        set makestaticlib = "link -lib /NOLOGO /out:"
        set staticranlib = true
else
        #
        # setup for cygwin static stuff
        #
        set shared_libs = false
	echo "AR      = ar"                 >> $configure
	echo "ARCPP   = ar"                 >> $configure
	echo "ARFLAGS = ruv "                >> $configure
	echo "RANLIB    = ranlib"            >> $configure
	echo "LIBEXT  = a"                  >> $configure
        echo 'MAKELIBCPP = $(ARCPP) $(ARFLAGS)' >> $configure
endif

echo 'MAKELIB   = $(AR) $(ARFLAGS)' >> $configure


if ($compiler == intel) then
    echo "XLIBS   = " >> $configure
    echo "CLIBS   = " >> $configure
    set limod = libimod.lib
    set liimod = libiimod.lib
    set lifft = libifft.lib
    set ltiff = libtiff.lib
    set imsubsobj = '*.obj'
    set ldnmncar = "libdnmncar.lib"
    echo 'IMLIBS     =  $(LIBWMOD) libhvem.lib libim.lib libifft.lib libimod.lib' >> $configure
    echo 'LINUXFLIBS = ' >> $configure
    echo '#define WIN32_BIGFILE' >> $hconfigure
else
    echo "CLIBS   = -lc -lm" >> $configure
    echo "XLIBS   = -lXm -lXt -lSM -lICE -lXext -lX11" >> $configure
    echo "IMLIBS     = -lhvem -lim -lifft  -limod -lrandm -ldtrigs" >> $configure
    echo 'LINUXFLIBS = $(LIBDTRIGS) $(LIBRANDM)' >> $configure
endif
echo 'LIBS    = $(CLIBS)'  >> $configure
echo 'FORTCLIBS = '  >> $configure


echo 'FLCC      = $(FC)'              >> $configure
echo "F77LIBS   = $wrapper"                  >> $configure

# 
# tell the C routines to swap the bytes for INTEL
#
echo '#define B3D_LITTLE_ENDIAN' >> $hconfigure
echo '#define SWAP_IEEE_FLOATS' >> $hconfigure

echo '#define NO_IMOD_FORK' >> $hconfigure
echo '#define CLIPBOARD_TIMER_HACK 100' >> $hconfigure

#
# Tell fortran routines how to swap bytes too
#
\cp $endian_dir/little_endian.inc $endian_dir/endian.inc

if ($compiler == intel) then
    set optimization = "/O2 /w /nologo"
    set noop = /Od
    set qopt = -O2
    if ($debug == true) then
        set optimization = "/Zi /Od /w /nologo"
        set qopt = -Od
    endif
else
    set noop = -O0
    set optimization = "-O3 -w"
    if ($debug == true) set optimization = "-ggdb -O0"
endif

# 7/6/05: took out the fallbacks; no longer needed on SGI
#

set flags = "$flags /MD"
set cflags = "$flags $optimization $defines $include_flags $c_includes"
set fflags = "$flags $fcompFlags $ldfflags $optimization $include_flags"

cat << EOF >> $configure
CFLAGS  = $cflags
CXXFLAGS = $cflags
FFLAGS  = $fflags
NOOPFFLAGS = $fflags $noop
LIBCFLAGS = $cflags
LIBFFLAGS = $fflags

EOF

# Use fortran code for tilt program, make extra fortran libs
echo 'TILTOBJS = bpsumnox.$(O) bpsumxtilt.$(O) bpsumlocal.$(O)' >> $configure

#
#   default is to assume tifflib exists
#
if ($tifflibs == default) set tifflibs = true
\cp sysdep/win/tiff*.h include
if ($m64bit == true) then
    \cp sysdep/win/libtiff64.lib buildlib/libtiff.lib
else
    \cp sysdep/win/libtiff.lib buildlib
endif

#
# Set the switch point include file for the FBP algorithm in Tilt
#
set fbpswitch       = fbpswitch-pc.inc

set binext = .exe
set junit_home      = `cygpath -m /usr/local/junit`
set class_sep       = ';'

#
# Start Qt include files
#
echo CONFIG += CONSOLE >! $sendevent_qconf
echo LIBS += qassistantclient.lib >! $qtassist_qconf
echo CONFIG += CONSOLE >! $sourcedoc_qconf

cat << EOF >! $imod_qconf
SOURCES += linegui.cpp
HEADERS += linegui.h
LIBS += libdiaqt.lib libiimod.lib libimod.lib libtiff.lib libtrack.lib libifft.lib qassistantclient.lib
QMAKE_LFLAGS_RELEASE += /LIBPATH:"..\buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib
QMAKE_LFLAGS_DEBUG += /LIBPATH:"..\buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrt.lib
RC_FILE = 3dmod.rc
EOF

cat <<EOF >! $midas_qconf
LIBS += libdiaqt.lib libiimod.lib libimod.lib libtiff.lib
QMAKE_LFLAGS_RELEASE += /LIBPATH:"..\buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib
QMAKE_LFLAGS_DEBUG += /LIBPATH:"..\buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrt.lib
EOF

set qdir = ($midas_dir $imod_dir $sendevent_dir $qtassist_dir $sourcedoc_dir)
set qpro = (midas.pro imod.pro imodsendevent.pro imodqtassist.pro sourcedoc.pro)
set warn = (warn_on warn_off warn_on warn_on warn_on)
@ i = 0
while ($i < 5)
    @ i++

    echo "INCLUDEPATH += ..\include ." >> $qdir[$i]/qconfigure
    echo "target.path = $inst_bin_dir" >> $qdir[$i]/qconfigure
    if ($debug == true) then
        echo CONFIG += thread debug warn_off >> $qdir[$i]/qconfigure
        set vcexedir = Debug
    else
        echo CONFIG += thread release $warn[$i] >> $qdir[$i]/qconfigure
        set vcexedir = Release
    endif

    if ($compiler == intel) then
        # Fix the Makefiles.  New Cygwin 6/11/04 doesn't manage times well
        # enough so need to delete the qmake commands
        # 3/20/05: Removed strip from install - it removes 3KB of symbols that
        # are needed for plugins to work
        (cd $qdir[$i] ; qmake -o makefile.tmp $qpro[$i])
        set badrules = `sed -n '/{.*}.*{.*}/p' < $qdir[$i]/makefile.tmp`
        sed -e '/^<</d'  -e '/^	$/d' -e '/-del/s//-rm -f/' -e '/@<< */s//\\/' \
        -e '/DEL_FILE.*=.*del/s/del/rm -f/' -e '/makefile.tmp/s//Makefile/g' \
        -e '/^	\$</d' -e '/{.*}.*{.*}/d'  -e '/UIC/s/-f *<< */\\/' \
        -e '/.SUFFIXES.*$/s//.SUFFIXES: .c .cpp .obj/'  \
        -e "/^C.*FLAGS[ 	]*=/s/-Od/$qopt/" \
        -e "/\/${delayload}[^ ]*/s///g" \
        -e '/^install/a\	/usr/bin/cp \$(TARGET) '"$inst_bin_dir" \
        -e '/QMAKE.*Makefile/d' \
        < $qdir[$i]/makefile.tmp >! $qdir[$i]/Makefile
        \rm $qdir[$i]/makefile.tmp

        # append new build rules if the bad ones were there (Qt 3.1.1)
        if ("$badrules" != "") then
            cat <<EOF >> $qdir[$i]/Makefile
.cpp.obj:
	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) \$<

.c.obj:
	\$(CC) -c \$(CFLAGS) \$(INCPATH) \$<
EOF
        endif
    endif
end

# Make new project files for 3dmod and midas if needed
# set QMAKESPEC here for msvc, now that real makefiles are done
#
setenv QMAKESPEC win32-msvc
set newer = `\find $imod_dir -name 3dmod.dsp -newer $imod_dir/imod.pro \
 -exec echo newer \;`
if ($newer != newer) then
    (cd $imod_dir ; qmake -t vcapp -o 3dmod.dsp imod.pro)
   echo "MADE NEW 3dmod PROJECT FILE - RESET WARNING LEVEL TO 1 IN C++/General"
   echo "exclude linegui.cpp, moc_linegui.cpp, libtrack.lib, define TRACK_PLUGIN"
endif

set newer = `\find $midas_dir -name midas.dsp -newer $midas_dir/midas.pro \
 -exec echo newer \;`
if ($newer != newer) then
   (cd $midas_dir ; qmake -t vcapp -o midas.dsp midas.pro)
endif

# set up make files for things built by VisualC, or finish imod makefile
#
if ($compiler == intel) then
    set qt_libs = `sed -n '/^LIBS[ 	]*=/s/^[^"]*\("[^"]*"\).*$/\1/p' $sendevent_dir/Makefile | sed '/\\/s//\\\\/g'`
    set qt_libs = '/LIBPATH:"$(QTDIR)\\lib"'" $qt_libs"

    # Set variables for library/dll makes that depended on qt_libs
    #
    echo "MAKELIBSO = link -dll /NOLOGO  $qt_libs ../../buildlib/libimod.lib ../../imod/3dmod.lib ../../buildlib/libdiaqt.lib /out:" >> $configure
    if ($shared_libs == true) then
        set opengl_lib = `sed -n '/^LIBS[ 	]*=/s/^.*\(opengl[^ ]*.lib\).*$/\1/p' $midas_dir/Makefile`
        echo "LIBDIAQTDEF = $qt_libs qassistantclient.lib $opengl_lib" >> $configure
    endif

    cat <<EOF >> $imod_dir/Makefile

mkargv : mkargv.c

imodhelp.h : imodhelp mkargv
	./mkargv imodhelp imodhelp.h "Imod_help_text[]"
EOF

    # Set up dependencies on real source in imod for users of Qt assistant

    foreach dir ($qtassist_dir)
        cat <<EOF >> $dir/Makefile
imod_assistant.cpp: ../imod/imod_assistant.cpp
	\cp ../imod/imod_assistant.cpp .

imod_assistant.h: ../imod/imod_assistant.h
	\cp ../imod/imod_assistant.h .
EOF
    end

    # Output variables for libraries to copy to bin
    #
    if ($m64bit == true) then
        set strip = true
        echo "DLLSOURCEDIR1 = $SYSTEMDRIVE/Program Files (x86)/GnuWin32/bin" >> $configure
        echo 'DLLSTOCOPY1 = libtiff.dll' >> $configure
    else
        echo "DLLSOURCEDIR1 = $SYSTEMDRIVE/Program Files/GnuWin32/bin" >> $configure
        echo 'DLLSTOCOPY1 = libtiff.dll libjpeg.dll zlib.dll' >> $configure
    endif
    if ($iclversion == 7) then
        echo "DLLSOURCEDIR2 = $SYSTEMDRIVE/Program Files/Intel/Compiler70/IA32/Bin" >> $configure
        echo 'DLLSTOCOPY2 = libCEPCF90MD.dll libF90MD.dll libIEPCF90MD.dll libPCEPCF90MD.dll libintrinsMD.dll libmmd.dll' >> $configure
    else
        set fortbin = `which ifort | sed '/\/[^\/]*$/s///'`
        echo "DLLSOURCEDIR2 = $fortbin" >> $configure
        echo 'DLLSTOCOPY2 = libifcoremd.dll libifportmd.dll libmmd.dll' >> $configure
    endif

    # Build imodwincpu
    #
    echo 'IMODWINCPU = imodwincpu.exe' >> $configure
else
    set makefile_ext = dummy
    set makefile_dirs = ($midas_dir $imod_dir $sendevent_dir $libdiaqt_dir $plugsrc_dir $qtassist_dir $sourcedoc_dir)
    set sourcedoc_exe = '$(VCEXEDIR)/sourcedoc'

endif


echo VCEXEDIR = $vcexedir >> $configure


# Set up to copy qt lib to bin dir for a distribution
#
echo 'QTINSTLIBDIR = bin' >> $configure
echo 'INSTALL_FILES = IMOD-cygwin.csh IMOD-cygwin.sh' >> $configure
if ($distname == "") set distname = _win

# Add scripts for running from command line.  The chmod doesn't work but it
# might be needed in the future
#
echo '3dmod $* &' >! $scripts_dir/3dmodbg
echo '3dmod -view $* &' >! $scripts_dir/3dmodv
chmod +x  $scripts_dir/3dmodbg  $scripts_dir/3dmodv
echo "GENERATED_SCRIPTS = 3dmodbg 3dmodv" >> $configure

# Make sure critical scripts are in unix mode
#
(cd scripts ; dos2unix copytomocoms setupcombine makejoincom transferfid xfalign matchorwarp newst dm2mrc matchrotpairs chunksetup finishjoin tomosnapshot processchunks >& /dev/null)
(cd dist ; dos2unix installIMOD installStub >& /dev/null)
