#!/bin/csh
#############################################################################
# Intel running Cygwin/Windows
#
#

# Make intel the default
#
if ($compiler == default) set compiler = intel

#  Separate pointers are needed for X and Motif includes
#
set Xlibdir = /usr/X11R6/lib
set Xincdir = /usr/X11R6/include/X11
set Mincdir = /usr/X11R6/include
if ($no_xlibs == false) then
    if (!(-e $Xlibdir) || !(-e $Xincdir)) set no_xlibs = true
endif

set fcompFlags = ""
set fcmpldFlags = ""
set openmpFlags = ""
set ccompFlags = ""

if ($compiler == intel) then
    set c_includes =  
    set qt_flags = '-I"$(QTDIR)\include" -I"$(QTDIR)\include\Qt" -I"$(QTDIR)\include\QtCore" -I"$(QTDIR)\include\QtGui"'
    set qt3_flags = '-DQT3_SUPPORT -I"$(QTDIR)\include\Qt3Support"'
    set cyg_lib = `cygpath -w $lib_dir`
    set xplax = (qtplax.obj moc_qtplax.obj)
    set cyg_inc = `cygpath -w $inc_dir`
    set include_flags = '-I. -I"'$cyg_inc'"'
    set objext = obj
    set moc = `cygpath $QTDIR/bin/moc`
    set inc_dir = `cygpath --mixed $inc_dir`
    set rgbprogs = 
    set fcmpNoportFlags = "/C90"
    set fcomp = ifl
    set fcompFlags = "/4L132 /Qvec-report:0"
    set ccompFlags = "/Qvec-report:0 -D_CRT_SECURE_NO_WARNINGS"
    
    # Get the version from icl, assuming we have matched c++/fortran compilers
    #
    icl >&! icl.tmp
    set iclnum = `sed -n  -e '/\./s// /g' -e '/[[:cntrl:]]/s///g' -e '/Version/s/.*Version \([0-9 ]*\).*/\1/p' icl.tmp`
    set iclbuild = `sed -n  -e '/[[:cntrl:]]/s///g' -e '/Build/s/.*Build \([0-9]*\).*/\1/p' icl.tmp`
    \rm -f icl.tmp
    @ iclversion = 7
    @ subversion = 0
    if ("$iclnum" != "") @ iclversion = $iclnum[1]
    if ($#iclnum > 1) then
        @ subversion = $iclnum[2]
    endif

    # version 8 and above: remove /C90, set record length to 4 bytes
    # also need to specify that \ is an escape character
    # Also stack size needs to be set high for a few programs (findwarp and ?)
    # This Intel bug was fixed in ifort 9.1.29 but is back in 10.1
    # There was a temporary need to remove delayload for 9.0, removed 4/6/06
    if ($iclversion > 7) then
        set fcomp = ifort
        set fcmpNoportFlags = "/F66000000"
#        if ("$iclbuild" != "") then
#            @ build = $iclbuild
#            if ($build >= 20060816) set fcmpNoportFlags = ""
#        endif
        echo "      parameter (nbytes_recl_item=4)" >! $endian_dir/recl_bytes.inc
        set fcompFlags = "/assume:bscc /4L132 /Qvec-report:0"
        
    endif
    set fcmpldFlags = "$fcmpNoportFlags /4Yportlib"
    set ldfflags = "$fcmpldFlags "'$(LDFLAGS)'
    if ($openmp == true) set openmpFlags = '/Qopenmp'

    # Get a Visual Studio version from link /VERSION which gives errors
    # Make change in nodefaultlib known to work for VC 9, we don't know about 8
    # 
    set vcvertext = `link /VERSION | head -n 1 | sed -e '/[^0-9.]/s///g' -e '/\./s// /g'`
    @ vcversion = $vcvertext[1]
    set nodeflib = libc.lib
    if ($vcversion >= 9) set nodeflib = libcmt.lib
    
cat << EOF >> $configure
LDFLAGS = /nologo /MD $openmpFlags -link -LIBPATH:"$cyg_lib" /NODEFAULTLIB:$nodeflib
.SUFFIXES: .cpp .obj .f .c
.cpp.obj:
	\$(CXX) -c \$(CXXFLAGS) \$<

.c.obj:
	\$(CC) -c \$(CFLAGS) \$<

.f.obj:
	\$(FC) -c \$(FFLAGS) \$<

EOF


else if ($no_xlibs == false) then
    set c_includes =  "-I$Xincdir -I$Mincdir"
    echo 'LDFLAGS = -L$(LIBDIR)' "-L$Xlibdir" >> $configure
    set xplax = xplax.o
else
    set c_includes =
    echo 'LDFLAGS = -L$(LIBDIR)' >> $configure
    set xplax = noplax.o
endif

if ($compiler == intel) then
    echo "CC        = icl"              >> $configure
    echo "CXX       = icl"              >> $configure
   # set usfftdir = $source_dir/USFFTlib/pc-intel
    echo '#define F77FUNCAP' >> $hconfigure
else
# DNM 8/27/01: Needed for large files to work right.  Use a -D define instead
# of #define in imodconfig because it must precede all system includes.
    set defines = -D_FILE_OFFSET_BITS=64
    echo "CC        = gcc"              >> $configure
    set fcomp = "g77"
    #
    # tell the C routines being called by Fortran that they need two __
    #
    echo '#define G77__HACK' >> $hconfigure
    echo '#define DLLEXPORT_H' >> $hconfigure
    echo '#define DLL_IM_EX' >> $hconfigure
    set openmp = false
    unsetenv CUDA_DIR
endif

# Needed under tcsh 6.12 in RH 8.0 to avoid getting two \ out
cat << EOF >> $configure
SHELL     = /bin/sh
CP        = /bin/cp
FIND      = /usr/bin/find
EOF

# Under visual C there is really no strdup (enforced in 2005)
echo '#ifdef _MSC_VER' >> $hconfigure
echo '#define strdup _strdup' >> $hconfigure
echo '#endif' >> $hconfigure


#
if ($compiler == intel) then
        if ($shared_libs == default) set shared_libs = true
	echo "AR      = link"                 >> $configure
	echo "ARCPP   = link"                 >> $configure
        if ($shared_libs == true) then
        #
        # to make dll's, set the extension, define the def files for the link 
        # lines and provide libraries that the dll depends on, 
        # and set the install directory to bin
        #
            set dllext = dll
            echo "ARFLAGS = -dll /NOLOGO /out:"         >> $configure
            echo 'MAKELIBCPP = link -dll /NOLOGO /out:' >> $configure
            echo 'LIBIIMODDEF = /def:libiimod.def ../buildlib/libcfshr.lib ../buildlib/libtiff.lib'   >> $configure
            echo 'LIBIMODDEF = /def:libimod.def ../buildlib/libcfshr.lib'  >> $configure
            echo 'LIBCFSHRDEF = /def:libcfshr.def'     >> $configure
            echo 'LIBIMESHDEF = /def:libimesh.def ../buildlib/libcfshr.lib ../buildlib/libimod.lib'     >> $configure
            echo 'LIBMRCIMDEF = /def:libmrcim.def ../../buildlib/libifft.lib ../../buildlib/libcfshr.lib'  >> $configure
            echo 'LIBHVEMDEF = /def:libhvem.def ../../buildlib/libmrcim.lib ../../buildlib/libcfshr.lib'  >> $configure
            echo 'LIBIFFTDEF = /def:libifft.def'     >> $configure
            echo 'LIBTRACKDEF = /def:libtrack.def ../../buildlib/libcfshr.lib'   >> $configure
            set inst_lib_dir = $inst_dir/bin
            #
            # Define a command for making non-dll libs still, needed for 
            # libdnmncar because it calls back to program.
            # Also need to make separate static libwmod, because it accesses
            # common in the program
            #
            set makenmcar = '$(MAKESTATICLIB)'
        else
            echo "ARFLAGS = -lib /NOLOGO /out:"                >> $configure
            echo 'MAKELIBCPP = $(ARCPP) $(ARFLAGS)' >> $configure
        endif
        set lwmod = 'libwmod.lib'
        set lsmlmod = 'libsmlmod.lib'
        set wmodext = 'lib'
        set makewmod = '$(MAKESTATICLIB)'
        echo "LIBEXT  = lib"                  >> $configure
	echo "RANLIB    = true"            >> $configure
        set makestaticlib = "link -lib /NOLOGO /out:"
        set staticranlib = true
        set staticext = lib
else
        #
        # setup for cygwin static stuff
        #
        set shared_libs = false
	echo "AR      = ar"                 >> $configure
	echo "ARCPP   = ar"                 >> $configure
	echo "ARFLAGS = ruv "                >> $configure
	echo "RANLIB    = ranlib"            >> $configure
	echo "LIBEXT  = a"                  >> $configure
        echo 'MAKELIBCPP = $(ARCPP) $(ARFLAGS)' >> $configure
endif

echo 'MAKELIB   = $(AR) $(ARFLAGS)' >> $configure


if ($compiler == intel) then
    echo "XLIBS   = " >> $configure
    echo "CLIBS   = " >> $configure
    set limod = libimod.lib
    set lcfshr = libcfshr.lib
    set liimod = libiimod.lib
    set limesh = libimesh.lib
    set lifft = libifft.lib
    set ltiff = libtiff.lib
    set lapacklibs = "liblapack.lib libblas.lib"
    set imsubsobj = '*.obj'
    set ldnmncar = "libdnmncar.lib"
    echo 'IMLIBS     =  $(LIBWMOD) libhvem.lib libmrcim.lib libifft.lib libcfshr.lib' >> $configure
    echo 'LINUXFLIBS = ' >> $configure
    echo '#define WIN32_BIGFILE' >> $hconfigure
else
    echo "CLIBS   = -lc -lm" >> $configure
    echo "XLIBS   = -lXm -lXt -lSM -lICE -lXext -lX11" >> $configure
    echo "IMLIBS     = -lhvem -lmrcim -lifft -lcfshr -lb3dcmpt" >> $configure
    echo 'LINUXFLIBS = $(LIBCOMPAT)' >> $configure
endif
echo 'LIBS    = $(CLIBS)'  >> $configure
echo 'FORTCLIBS = '  >> $configure

# 
# tell the C routines to swap the bytes for INTEL
#
echo '#define B3D_LITTLE_ENDIAN' >> $hconfigure
echo '#define SWAP_IEEE_FLOATS' >> $hconfigure

echo '#define NO_IMOD_FORK' >> $hconfigure
echo '#define CLIPBOARD_TIMER_HACK 100' >> $hconfigure

echo '#define GLU_CALLBACK void (__stdcall *)(void)' >> $hconfigure

#
# Tell fortran routines how to swap bytes too
#
\cp $endian_dir/little_endian.inc $endian_dir/endian.inc

if ($compiler == intel) then
    set optimization = "/O2 /w /nologo"
    set noop = /Od
    set qopt = -O2
    if ($debug == true) then
        set optimization = "/Zi /Od /w /nologo"
        set qopt = -Od
    endif
else
    set noop = -O0
    set optimization = "-O3 -w"
    if ($debug == true) set optimization = "-ggdb -O0"
endif

# 7/6/05: took out the fallbacks; no longer needed on SGI
#

set flags = "$flags /MD"
set cflags = "$flags $ccompFlags $optimization $defines $include_flags $c_includes"
set fflags = "$flags $fcompFlags $fcmpldFlags $optimization $include_flags"
if ($compiler == intel) set libtrackFlags = "$flags $fcompFlags $fcmpNoportFlags $optimization $include_flags"

# Add -DWIN32 for opencv and lasik in RAPTOR
#
cat << EOF >> $configure
CFLAGS  = $cflags
CXXFLAGS = $cflags -DWIN32
FFLAGS  = $fflags
NOOPFFLAGS = $fflags $noop
LIBCFLAGS = $cflags
LIBFFLAGS = $fflags

EOF

# Use fortran code for tilt program, make extra fortran libs
echo 'TILTOBJS = bpsumnox.$(O) bpsumxtilt.$(O) bpsumlocal.$(O)' >> $configure

# Variables for building RAPTOR
#
echo 'LASIKOBJS = dirent.obj' >> $configure
echo 'RAPTORLIBS = user32.lib' >> $configure
echo 'MARCORLIBS = user32.lib Advapi32.lib' >> $configure 

#
#   default is to assume tifflib exists
#
if ($tifflibs == default) set tifflibs = true
\cp sysdep/win/tiff*.h include
if ($m64bit == true) then
    \cp sysdep/win/libtiff64.lib buildlib/libtiff.lib
else
    \cp sysdep/win/libtiff.lib buildlib
endif

set binext = .exe
set junit_home      = `cygpath -m /usr/local/junit`
set jfcunit_home      = `cygpath -m /usr/local/jfcunit`
set class_sep       = ';'

#
# Start Qt include files
#
echo CONFIG += CONSOLE >! $sendevent_qconf
echo CONFIG += CONSOLE >! $sourcedoc_qconf

#  /LARGEADDRESSAWARE flag allows up to 3GB memory on a 32-bit system if it
# has the /3GB boot flag; isn't needed for 64-bit link since it is the default
cat << EOF >! $imod_qconf
SOURCES += linegui.cpp
HEADERS += linegui.h
LIBS += libdiaqt.lib libiimod.lib libimesh.lib libimod.lib libtrack.lib libcfshr.lib libtiff.lib libifft.lib
QMAKE_LFLAGS_RELEASE += /LIBPATH:"../buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib /LARGEADDRESSAWARE
QMAKE_LFLAGS_DEBUG += /LIBPATH:"../buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrt.lib /LARGEADDRESSAWARE
RC_FILE = 3dmod.rc
EOF

cat <<EOF >! $midas_qconf
LIBS += libdiaqt.lib libiimod.lib libimod.lib libcfshr.lib libtiff.lib libifft.lib
QMAKE_LFLAGS_RELEASE += /LIBPATH:"../buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib /LARGEADDRESSAWARE
QMAKE_LFLAGS_DEBUG += /LIBPATH:"../buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrt.lib /LARGEADDRESSAWARE
INCLUDEPATH += $QTDIR/include/QtOpenGL
LIBS += $QTDIR/lib/QtOpenGL4.lib
EOF

cat <<EOF >! $ctfplot_qconf
LIBS += liblapack.lib libblas.lib libiimod.lib libcfshr.lib libtiff.lib libifft.lib
QMAKE_LFLAGS_RELEASE += /LIBPATH:"../buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrtd.lib /LARGEADDRESSAWARE
QMAKE_LFLAGS_DEBUG += /LIBPATH:"../buildlib" /NODEFAULTLIB:libc.lib /NODEFAULTLIB:libcd.lib /NODEFAULTLIB:msvcrt.lib /LARGEADDRESSAWARE
EOF

cat <<EOF >! $qtassist_qconf
LIBS += libcfshr.lib
QMAKE_LFLAGS_RELEASE += /LIBPATH:"../buildlib"
QMAKE_LFLAGS_DEBUG += /LIBPATH:"../buildlib"
EOF

cat <<EOF >! $prochunk_qconf
CONFIG += CONSOLE
LIBS += libcfshr.lib
QMAKE_LFLAGS_RELEASE += /LIBPATH:"../buildlib"
QMAKE_LFLAGS_DEBUG += /LIBPATH:"../buildlib"
EOF

if ($no_qt3 == false) then
    echo 'QT +=  qt3support' >> $imod_qconf
    echo 'QT +=  qt3support' >> $midas_qconf
    echo 'QT +=  qt3support' >> $ctfplot_qconf
    echo 'QT +=  qt3support' >> $prochunk_qconf
endif

set warn = (warn_on warn_on warn_on warn_on warn_on warn_off warn_on)
@ i = 0
while ($i < $#qdir)
    @ i++

    echo "INCLUDEPATH += ../include ." >> $qdir[$i]/qconfigure
    set inst_bin_cyg = `cygpath -m $inst_bin_dir`
    echo "target.path = $inst_bin_cyg" >> $qdir[$i]/qconfigure
    if ($debug == true) then
        echo CONFIG += thread debug warn_off >> $qdir[$i]/qconfigure
        echo CONFIG -= debug_and_release release >> $qdir[$i]/qconfigure
        set vcexedir = Debug
        if ($openmp == true) then
            echo QMAKE_CXXFLAGS_DEBUG += $openmpFlags >> $qdir[$i]/qconfigure
            echo QMAKE_CFLAGS_DEBUG += $openmpFlags >> $qdir[$i]/qconfigure
        endif
        echo QMAKE_CXXFLAGS_DEBUG += -D_CRT_SECURE_NO_WARNINGS >> $qdir[$i]/qconfigure
    else
        echo CONFIG += thread release $warn[$i] >> $qdir[$i]/qconfigure
        echo CONFIG -= debug_and_release debug >> $qdir[$i]/qconfigure
        set vcexedir = Release
        if ($openmp == true) then
            echo QMAKE_CXXFLAGS_RELEASE += $openmpFlags >> $qdir[$i]/qconfigure
            echo QMAKE_CFLAGS_RELEASE += $openmpFlags >> $qdir[$i]/qconfigure
        endif
        echo QMAKE_CXXFLAGS_RELEASE += -D_CRT_SECURE_NO_WARNINGS >> $qdir[$i]/qconfigure
    endif

    if ($compiler == intel) then
        # Fix the Makefiles.  New Cygwin 6/11/04 doesn't manage times well
        # enough so need to delete the qmake commands
        # 3/20/05: Removed strip from install - it removes 3KB of symbols that
        # are needed for plugins to work
        # Guess what, they are perfectly valid nmake files!
        (cd $qdir[$i] ; qmake -o makefile.tmp $qprog[$i].pro)
        set badrules = `sed -n '/{.*}.*{.*}/p' < $qdir[$i]/makefile.tmp`
        sed -e '/^<</d'  -e '/^	$/d' -e '/-del/s//-rm -f/' -e '/@<< */s//\\/' \
        -e '/DEL_FILE.*=.*del/s/del/rm -f/' -e '/makefile.tmp/s//Makefile/g' \
        -e '/^	\$</d' -e '/{.*}.*{.*}/d'  -e '/UIC/s/-f *<< */\\/' \
        -e '/.SUFFIXES.*$/s//.SUFFIXES: .c .cpp .obj/'  \
        -e "/^C.*FLAGS[ 	]*=/s/-Od/$qopt/" \
        -e '/\\bin\\moc.exe/s/\\/\//g' -e '/\\bin\\uic/s/\\/\//g' \
        -e '/images\\/s//images\//g' -e '/CHK_DIR_EXISTS/d' \
        -e '/^COPY[ 	]*=/s/=.*/= \/usr\/bin\/cp/' \
        -e '/^LIBS[ 	]*=/s/\\/\//g' -e '/^QMAKE[ 	]*=/s/\\/\//g' \
        -e '/QMAKE.*Makefile/d' \
        < $qdir[$i]/makefile.tmp >! $qdir[$i]/Makefile
        \rm $qdir[$i]/makefile.tmp
#        -e '/^install/a\	/usr/bin/cp \$(TARGET) '"$inst_bin_dir" \

        # append new build rules if the bad ones were there (Qt 3.1.1)
        if ("$badrules" != "") then
            cat <<EOF >> $qdir[$i]/Makefile
.cpp.obj:
	\$(CXX) -c \$(CXXFLAGS) \$(INCPATH) \$<

.c.obj:
	\$(CC) -c \$(CFLAGS) \$(INCPATH) \$<
EOF
        endif
    endif
end

# Make new project files for 3dmod and midas if needed
# set QMAKESPEC here for msvc, now that real makefiles are done
#
setenv QMAKESPEC win32-msvc
set newer = `\find $imod_dir -name 3dmod.dsp -newer $imod_dir/imod.pro \
 -exec echo newer \;`
if ($newer != newer) then
    (cd $imod_dir ; qmake -t vcapp -o 3dmod.dsp imod.pro)
   echo "MADE NEW 3dmod PROJECT FILE"
   echo "exclude linegui.cpp, moc_linegui.cpp, libtrack.lib, define TRACK_PLUGIN"
endif

set newer = `\find $midas_dir -name midas.dsp -newer $midas_dir/midas.pro \
 -exec echo newer \;`
if ($newer != newer) then
   (cd $midas_dir ; qmake -t vcapp -o midas.dsp midas.pro)
endif

# set up make files for things built by VisualC, or finish imod makefile
#
if ($compiler == intel) then

    # Set variables for library/dll makes that depended on qt_libs
    # First set for making libdiaqt
    #
    set qt_libs = '/LIBPATH:"$(QTDIR)/lib" QtCore4.lib QtGui4.lib QtOpenGl4.lib'
    if ($no_qt3 == false) set qt_libs = "$qt_libs Qt3Support4.lib"
    if ($shared_libs == true) then
        set opengl_lib = `sed -n '/^LIBS[ 	]*=/s/^.*\(opengl[^ ]*.lib\).*$/\1/p' $midas_dir/Makefile`
        echo "LIBDIAQTDEF = $qt_libs $opengl_lib" >> $configure
    endif

    # Then for making plugins
    #set qt_libs = "$qt_libs QtXml4.lib QtNetwork4.lib"
    echo "MAKELIBSO = link -dll /NOLOGO  $qt_libs ../../buildlib/libimod.lib ../../buildlib/libcfshr.lib ../../imod/3dmod.lib ../../buildlib/libdiaqt.lib  ../../buildlib/libimesh.lib /out:" >> $configure

    # Then get simple set for fortran graphics
    set qt_libs = `sed -n '/^LIBS[ 	]*= */s///p' $sendevent_dir/Makefile | sed '/\\/s//\//g'`

    # Output variables for libraries to copy to bin
    #
    @ dllnum = 3
    if ($m64bit == true) then
        if ($distname == "") set distname = _win64
        set strip = true
        echo "DLLSOURCEDIR1 = $SYSTEMDRIVE/Program Files (x86)/GnuWin32/bin" >> $configure
        echo 'DLLSTOCOPY1 = libtiff' >> $configure
    else
        if ($distname == "") set distname = _win
        echo "DLLSOURCEDIR1 = $SYSTEMDRIVE/Program Files/GnuWin32/bin" >> $configure
        echo 'DLLSTOCOPY1 = libtiff libjpeg zlib' >> $configure
    endif
    if ($iclversion == 7) then
        echo "DLLSOURCEDIR2 = $SYSTEMDRIVE/Program Files/Intel/Compiler70/IA32/Bin" >> $configure
        echo 'DLLSTOCOPY2 = libCEPCF90MD libF90MD libIEPCF90MD libPCEPCF90MD libintrinsMD libmmd' >> $configure
    else

        # Version 8 or higher has different libraries, and also needs to
        # include msvcr71.dll from .NET for Win2K, or more complicated stuff
        #
        set fortbin = `which ifort | sed '/\/[^\/]*$/s///'`
        echo "DLLSOURCEDIR2 = $fortbin" >> $configure
        set dllstocopy2 = "libifcoremd libifportmd libmmd"
        if ($openmp == true) set dllstocopy2 = "$dllstocopy2 libguide40"
        echo "DLLSTOCOPY2 = $dllstocopy2" >> $configure

        # If this variable is set, we need to copy a redist directory and 
        # install manifests in executables.  The variable is the dir
        #
        if ($?MSVCREDIST) then
            if ($m64bit == false) then
                echo "MANIFEST = sysdep/win/generic.manifest" >> $configure
            else
                echo "MANIFEST = sysdep/win/generic64.manifest" >> $configure
            endif

        else

            # Older 32-bit compilations
            if ($m64bit == false) then
                set dllsrc3 = `cygpath $SYSTEMROOT/system32`
                echo "DLLSOURCEDIR3 = $dllsrc3" >> $configure
                echo 'DLLSTOCOPY3 = msvcr71 msvcp71' >> $configure
                @ dllnum = 4
            endif
        endif
    endif

    # Adjust variables for CUDA and set to copy the library
    #
    if ($?CUDA_DIR) then
        set cudabin = $CUDA_DIR/bin
        set cudalib = $CUDA_DIR/lib
        if ($?CUDA_BIN_PATH && $?CUDA_LIB_PATH) then
            set cudabin = `cygpath -m $CUDA_BIN_PATH`
            set cudalib = `cygpath -m $CUDA_LIB_PATH`
        endif
        set cudart = `cd $cudabin ; ls cudart*.dll | sed -e '/[[:cntrl:]]/s///g' -e '/[^ ]*emu[^ ]*/s///g' -e '/.dll/s///g'`
        set cufft = `cd $cudabin ; ls cufft*.dll | sed -e '/[[:cntrl:]]/s///g' -e '/[^ ]*emu[^ ]*/s///g' -e '/.dll/s///g'`
        set nvcc_flags = "$nvcc_flags -O2"
        set cudalibs = "-LIBPATH:$cudalib cudart.lib cufft.lib"
        echo "DLLSOURCEDIR$dllnum = $cudabin" >> $configure
        echo "DLLSTOCOPY$dllnum = $cudart $cufft" >> $configure
    endif

    # Build imodwincpu
    #
    echo 'IMODWINCPU = imodwincpu.exe' >> $configure

    # Compiler 9.1 suddenly started assuming VC6 compatibility flag 
    # (No, I installed it wrong).  But not for 64-build...  THIS SHOULD
    # BE DONE WITH A VC VERSION BASED ON LINK
    if ($iclversion > 8 && $subversion > 0 && $iclversion < 10) echo "WINCPUVC = /Qvc7.1" >> $configure
else
    set makefile_ext = dummy
    set makefile_dirs = ($qdir $libdiaqt_dir $plugsrc_dir)
    set sourcedoc_exe = '$(VCEXEDIR)/sourcedoc'

endif


echo VCEXEDIR = $vcexedir >> $configure

# 5/20/10: removed Workaround for vista w/o manifest, i.e. imod2vatch etc.
#
echo "GENERATED_SCRIPTS = 3dmodbg 3dmodv processchunksbg" >> $configure

# Set up to copy qt lib to bin dir for a distribution
#
echo 'QTINSTLIBDIR = bin' >> $configure
echo 'INSTALL_FILES = IMOD-cygwin.csh IMOD-cygwin.sh' >> $configure

# 1/16/09: Remove dual python build, the altpy path was broken (4.0.2)

# Add scripts for running from command line to the install.  They are no
# longer generated because of permission problems and to handle spaces in args
#
echo "CMDWRAPPERS = cmdwrappers" >> $configure

# Set up for Qt image plugin copy
#
echo "QTPLUGS_TOCOPY1 = qjpeg4.dll qico4.dll" >> $configure

# Make sure critical scripts are in unix mode
# ALL BASH/SH SCRIPTS MUST BE INCLUDED
#
(cd scripts ; dos2unix copytomocoms setupcombine makejoincom transferfid xfalign matchorwarp newst dm2mrc matchrotpairs chunksetup finishjoin tomosnapshot processchunks splitcombine splittilt splitcorrection trimvol queuechunk alignlog submfg runpyscript 3dmodbg 3dmodv patch2imod imod2patch imodhelp >& /dev/null)
(cd dist ; dos2unix installIMOD installStub IMOD-cygwin.sh >& /dev/null)
(cd Etomo/scripts ; dos2unix etomo >& /dev/null)
dos2unix installqtlib >& /dev/null
