Kernel Building for Red Hat 7.1

Chuck Robertson

July 22, 2001


Install Red Hat 7.1 and all of the Kernel sources, (I usually do this from the
"custom" option in the install process.  I leave out all of the "server"
oriented stuff and include most everything else.  For my examples, I am
assuming that I am building from a kernel called linux-2.4.4.  Red Hat calls
the kernel that comes off of the 7.1 CD's linux-2.4.2, even though it is NOT
the same as the 2.4.2 which is available from www.kernel.org.  Be aware that
the mtrr.c which accompanies Red Hat's linux-2.4.2 breaks AGP (accelerated
graphics port) for AMD based systems.

1. cd /usr/src

Suggest you do a "ls -al" and carefully note the links which are symbolic.  If
you bring in a tarball and unpack it, it will (usually) unpack into a
directory named "linux".  To make the rest of the Red Hat set up work cleanly,
rename the untarred directory according to the Red Hat kernel naming protocol,
(just emulate the format that you see, for example linux-2.4.3.  Then delete
the "linux-2.4" link and make a new one which points to the source tree you
want to build:

     cp /mnt/cdrom/linux-2.4.4.tar.gz   /usr/src
     tar xvzf linux-2.4.4.tar.gz
     mv linux   linux-2.4.4
     rm -f    linux-2.4
     ln -s   linux-2.4.4   linux-2.4
     cd    /usr/src/linux-2.4

Note:  Unless stated otherwise, all other operations will be performed from
within this directory.

2.  make mrproper
3.  make distclean
4.  make xconfig
     [This assumes you are running X windows... if not use "make menuconfig"]

    click "Load configuration from file"
    In the file name dialog supply the config of your choice, for example:
            /usr/src/linux-2.4.2/configs/kernel-2.4.2-athlon.config

The "configs" directory is a change made by Red Hat between 7.0 and 7.1.  The
kernels from kernel.org do not have this "configs" directory.
Red Hat supplies a variety of configuration files.  The one for Athlon is the
only one that I have attempted to use.

    click "Processor Type and Features"
    set "4GB" to YES.

    Return to the main menu.

      (Note:  I get compile errors in kernels from kernel.org after 2.4.2 in
      the "Video for Linux" module.  To avoid these, I set
      Multimdedia Devices->"Video for Linux" to NO.)

    click "Save and Exit" on the main menu.


    Do not change any other configurations unless you really, really know
    what you are doing.  This recipe preserves all of the other "goodies"
    that Red Hat provides... USB, device drivers, Gnome, NFS, etc, etc.

5.  While still in the /usr/src/linux-2.4 directory, edit the Makefile.
    Change the line that says:

        EXTRAVERSION = -xx

    to:

        EXTRAVERSION = -yy


This is a key step as the kernel build scripts will create a variety of
directories and variables that key off of the name formed by concatenating
this "extraversion" symbol to the end of the kernel version.  This is how the
Linux finds its copies of the modules, etc, which are unique to this
particular build.  (eg linux-2.4.2-yy) (Note: the string that is concatenated
starts after the equals sign, skipping spaces.  I (and most others) use the
dash for readability.)


6. make dep
7. make bzImage
8.  cp System.map  /boot/System.map-2.4.4-yy
9.  cp arch/i386/boot/bzImage  /boot/vmlinuz-2.4.4-yy
10. make modules
11. make modules_install

12. Edit the file /etc/lilo.conf.
     Add a section to the end of the file which looks like:

    image=/boot/vmlinuz-2.4.4-yy
      label=mylinux
      read-only
      root=/dev/hdaX

    Where the X at the end of hda is the partition from which you will boot.
    The easy way to know this is to use whatever value of X is in the
    lilo.conf file in the section which controls the CURRENT boot process... so
    just raise your eyes a few lines to see where the current boot
    partition is currently located.

    Note, the section you have added works fine for systems which boot from
    IDE (ATA) drives.  If you are booting from SCSI devices you will likely
    need a couple of extra statements... just CLONE them from the example
    already present in the lilo.conf file for the kernel you are currently
    running.

13. If you want this new kernel to be the one that you boot into by default,
    edit the line in /etc/lilo.conf near the top of the file:

    default=linux


    change to:


    default=mylinux


14. cd /boot
15. Delete the file boot.0306 (or boot.030) if it is present, (rm boot.0306).
16. /sbin/lilo -v
17. Reboot the system and select mylinux at the prompt, (if you did not make
      mylinux the default.)

      NOTE:  if this was a dual boot system with Linux & Win2K, you will have
      to copy the boot sector from the linux partition to the C drive of the
      win2k partition and (possibly) edit the boot.ini file to be able to
      boot into this version of the kernel.  It you mess this up, all sorts of
      odd things will happen as the build you have just completed and
      installed will no longer be consistent with the file you previously put
      in the "C" directory and pointed to with boot.ini.



