     BBoouullddeerr LLaabboorraattoorryy ffoorr 33--DDiimmeennsssiioonnaall EElleeccttrroonn MMiiccrroossccooppyy ooff CCeellllss

ROTATEVOL(1)							ROTATEVOL(1)

NNAAMMEE
  rotatevol - to rotate 3-dimensional data to arbitrary angles

SSYYNNOOPPSSIISS
  rotatevol

DDEESSCCRRIIPPTTIIOONN
  This program will rotate all or part of a three-dimension volume
  of data.  The rotations may be by any angles about the three axes.
  Tilt angles and origin information in the header are properly
  maintained so that the new data stack will have a coordinate system
  congruent with the old one.
  
  Before running the program, examine the data set to determine
  what rotations you desire.  The overall rotation of the data set is
  specified by tilt angles for three successive rotations about the
  the 3 axes, with rotation first around Z, then around Y, then around
  X.  Positive angles give counterclockwise rotations (looking down
  an axis toward the origin).  This is the same way that angles are
  specified and acted on in the Slicer window of 3dmod, so you can use
  the Slicer to determine your desired angles, as long as the data volume
  is not being viewed with Y and Z flipped.  If you only want part of the
  data set, determine the center of the region that you want to extract.
  This region is specified by the index coordinates of that point in the
  input file.

  Rotatevol uses the PIP package for input (see the manual page for pip(1))
  and can take input interactively for options that existed when it was
  converted, to maintain compatibility with old command files.  The
  following options can be specified either as command line arguments (with
  the -) or one per line in a command file or parameter file (without 
  the -):

INSERT OPTION TEXT HERE

  -StandardInput
     Read parameter entries from standard input.


  If the program is started with no command line arguments, it reverts to
  interactive input with the following entries:
  
  Name of the input file with data to be rotated

  Name of the output file for rotated data

  Path name of directory (for example, /usr/tmp) where temporary files
     can be placed, or Return to have files placed in the current
     directory

  X, Y, and Z dimensions of the output file
  
  Index coordinates of the center of the region to be rotated in the
  .  input file, or / to use the coordinates of the center of the file
  
  Rotations around the Z, Y, and X axes
  
  The program can work on an arbitrarily large volume.  It reconstructs
  a series of sub-cubes of the output volume (each cube is currently
  256x256x256).  For each cube, it reads into memory a cube from the
  input volume that contains all of the image area that rotates into
  that cube of output volume.  It then uses triquadratic interpolation
  to find each pixel of the output cube, and writes the cube to a
  scratch file.  When all of the cubes in one layer are done, it reads
  back data from the scratch files and assembles each section in that
  layer.
 	  
HHIISSTTOORRYY
  Written by David Mastronarde 7/25/91
  Converted to PIP/autodoc 10/10/03
