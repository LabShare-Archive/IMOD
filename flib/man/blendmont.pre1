     BBoouullddeerr LLaabboorraattoorryy ffoorr 33--DDiimmeennssiioonnaall EElleeccttrroonn MMiiccrroossccooppyy ooff CCeellllss

BLENDMONT(1)							   BLENDMONT(1)

NNAAMMEE
	blendmont - aligns and blends overlapping edges of montaged images

SSYYNNOOPPSSIISS
	blendmont  [options]

DDEESSCCRRIIPPTTIIOONN

  BLENDMONT will take montaged images, blend their overlapping edges
  together, and output the blended images with essentially no overlap.
  Transformations can be applied to align serial sections, and
  densities can be floated over whole sections so that density
  occupies the maximum range for each section.  The program can also
  correct for minor or substantial displacements between pieces, using
  cross-correlation to find substantial shifts.  

  The program performs these feats by examining each edge, or region
  of overlap, between adjacent pieces, and deriving a function that
  maps pixels in one piece to corresponding pixels in the adjacent
  piece.  These "edge functions" are stored in two separate files (for
  pieces that are adjacent in X or Y, respectively).  Thus, even if one
  needs to run the program more than once on the same input images,
  the edge functions need to be calculated only once, since they can
  be read from the files on later runs.  However, if the input image
  file is changed in any way, the edge functions must be recalculated.

  To blend images at an overlap zone, the program considers each pixel 
  in the output image in turn.  It finds the two corresponding 
  positions (in the two adjacent input pieces) whose weighted average 
  equals the position of the desired output pixel, where the weights
  are proportional to the distance across the overlap zone.  Near one
  edge of the overlap zone, the output pixel has very nearly the same
  position as the corresponding pixel in the nearby piece; in
  the middle of the overlap zone, the output pixel has a position
  midway between the positions of the corresponding pixels in the two
  pieces.

  If pieces are shifted by more than a few pixels from the positions
  specified by their piece coordinates, then the program will not be
  able to find the edge functions without doing an initial 
  cross-correlation between the regions that overlap in adjacent
  pieces.  Thus, if your montage is "sloppy" enough, you should select
  the option for initial cross-correlations.
  
  If the pieces are shifted at all from the positions specified by their
  piece coordinates, the program can correct for this.  It can take the
  information about the shift between each pair of overlapping pieces and use
  it to find the amounts to shift each piece so as to fit the pieces together
  best.  If the shifts are more than a few pixels, then an initial
  cross-correlation should be selected; otherwise this step is not needed.
  There are three ways to implement this correction step.  One is based
  solely on the information in the edge functions.  Another is a hybrid
  method based on both cross-correlation and edge functions; the program will
  solve for shifts twice, using the displacements implied by the edge
  functions then those implied by correlations, and select the solution that
  gives the smallest mean error.  The third method is based on
  cross-correlations alone and is not as reliable as the hybrid method.  This
  method should be used (with the -xcorr option) with older data if it is
  important to have an image stack that exactly matches that produce by
  Blendmont prior to June 1, 2001, when the hybrid option was implemented. It
  might also be useful in cases where the edge functions are not reliable,
  such as when there are large blank areas in the edge regions.  It is also
  used by default (as of IMOD 4.2.3) when there is only one piece in one of
  the two directions, because in this case the mean error is zero regardless
  of whether correlations or edge functions are used.  In such cases, you
  would have to use the -edge option to have it use the displacements from
  edge functions instead.

  In any case where cross-correlations are being computed, the program
  will write the displacements between pieces into a file with the
  extension ".ecd".  On another run of the program, you can choose to
  have these displacements read in from the file, just as edge
  functions can be read in instead of recomputed.  This allows you to
  edit bad displacements with Midas, then use Blendmont to get a
  stack with pieces properly shifted into register.

  If your montage frames have large displacements from their nominal
  positions, then a number of parameter changes can be needed to get
  reliable correlations.  Select the VerySloppyMontage option to get
  these parameter settings (see below for full listing).  If there are
  still numerous bad displacements in edges where there appears to be
  usable image information, then two of these parameters can be varied
  further.  Experiment with larger values of AspectRatio, the ratio of
  length to width of the overlap areas being correlated (up to 10), and
  with a larger value of ExtraXcorrWidth, which makes the areas being
  correlated wider than the nominal overlap zone (up to 0.5 has been
  tried with good results).

  Sometime there is simply not enough information in an overlap zone to allow
  the displacement between pieces to be determined.  You can exclude such
  overlap zones from being considered by making a model marking each edge to
  be excluded.  To make the model, run 3dmod on the unblended montage, and
  edit the object type to make the type be scattered points with symbols
  displayed at each point, but with no sphere radius.  Mark an edge to be
  excluded by placing a point near the middle of the line (discontinuity)
  that appears between the two adjacent pieces.  This position is actually on
  one side of the overlap zone between the pieces, but Blendmont will be able
  to assign your points to edges based upon where it thinks each such line
  appears in 3dmod.  Blendmont will correctly scale a model that was built on
  a montage at a different binning than the one being blended.

  There are several different scenarios that you might follow when excluding
  edges, and they might require different settings of the -nonzero option.
  With the default setting of this option (1), when the program reads in edge
  displacements from a file and finds a nonzero displacement for an edge to
  be excluded, it includes that edge when determining piece shifts but still
  does not try to compute an edge function.  This behavior is appropriate if
  you mark the edges to exclude, run Blendmont to compute edge displacements,
  then use Midas(1) to adjust some of the excluded edges to have nonzero
  displacements, because it can be assumed that the adjsted displacement is
  correct.  If you want edge functions to be computed as well for such edges,
  then you would enter the -nonzero option with a value of 2.  Alternatively,
  suppose you run Blendmont and get bad displacements for some edges, then
  you mark the edges to exclude.  If you want to go on to make a blended image
  without rerunning correlations or setting those displacements to 0, then
  you would need to use the -nonzero option with a value of 0 to make the
  program ignore all of the excluded edges.

  By default, the program puts the output into a single frame.  However,
  when you specify the maximum frame size and minimum overlap of the output
  image, the program will pick the largest frame size less than that maximum,
  with the smallest overlap greater than that minimum, so that the resulting
  image will contain at least as many pixels as the original input image.
  The program picks a frame size that is a multiple of 2 and has no prime
  factor greater than 19 (so that fourier transforms can be run on the
  resulting pieces).  This behavior is silly for very large images and can be
  overridden with the -nofft option.

  The program was originally written to handle montages digitzed from
  multiple film negatives, with each negative transformed so as to produce
  the best fit between the negatives.  This is unlikely to work, but here is
  the documentation for it. If sections come from more than one negative,
  this may be specified in either of two ways.  If every section has the same
  division of pieces into negatives, then one can specify this universal
  division into negatives as an interactive input to the program.
  Alternatively, one may add negative numbers after the z coordinates in the
  file of piece coordinates.  The only restriction on these numbers is that
  they should be non-zero, and every piece from the same negative should have
  the same number.  Thus, one could number negatives 1, 2, 3 ... in each
  section that has multiple negatives, or one could use the identifying
  number on each negative.

  When pieces of a section come from more than one negative, the
  program uses the edge functions between the negatives to determine
  how each negative should be rotated and translated to align it with
  adjacent negatives.  This collection of rotations and translations
  between adjacent negatives is then resolved into a single rotation
  and translation for each negative, so as to bring all of the
  negatives into best alignment.  Blending of edges is performed after
  such rotations and translations have been applied.

  Blendmont uses the PIP package for input (see the manual page for pip(1))
  and can still take sequential input interactively, to maintain compatibility
  with old command files.  The following options can be specified either as
  command line arguments (with the -) or one per line in a command file or
  parameter file (without the -):

INSERT OPTION TEXT HERE

  -StandardInput
     Read parameter entries from standard input.


  If there are no command-line arguments, Blendmont takes sequential input
  the old way, with the following entries:

  Input image file

  Output image file

  Data mode for output file (the default is same as mode of input)

  1 to float each section to maximum range for the data mode, 0 not to

  Name of file of g transforms to apply to align the sections, or a
   	blank line for no transforms

  Name of input file with list of piece coordinates

  IF this file has entries specifying that pieces are on different
  negatives, enter 1 to do an initial cross-correlation in the overlap
  zones to find the average displacement between pieces

  IF this file does NOT have any entries specifying that pieces belong
  to different negatives, there are several possibilities for either
  specifying negatives or correcting for displacements between frames.
  Use the negative of an option to do initial cross-correlations to
  correct for sloppy montages:

   	Enter 1 or -1 to specify how the sections should be divided
           into negatives
        OR 2 or -2 to use edge functions to find a shift for each frame
           that aligns the frames as well as possible
        OR 3 or -3 to use cross-correlations exclusively, rather than
           edge functions to find the best shift for each frame
           (obsolete, use 5/-5 except to replicate old data)
        OR 4 or -4 to use only cross-correlations read from an edge
           correlation displacement file to find the best shifts
           (obsolete, use 6/-6 except to replicate old data)
        OR 5 or -5 to use both cross-correlations and edge functions
           (whichever is better) to find the best shifts
        OR 6 or -6 to use both cross-correlations read from a file and
           edge functions to find the best shifts
  	OR 0 for none of these options

     IF you enter 1 or 2 to specify division into negatives, enter 2 
           lines:

   	# of frames (pieces) per negative in the X direction, and the
   	    # of frames missing from the left-most negative.  E.g., if
   	    there are 2 frames from the left-most negative, 4 from the
   	    middle one, and 1 from the right-most one, there are 4
   	    frames per negative, with 2 missing from the left-most one

   	# of frames (pieces) per negative in the Y direction, and the
   	    # of frames missing from the bottom-most negative.

  Name of new file for list of coordinates of pieces in the output file, or
  Return to skip making this file, which is not needed when the output image
  is a single piece.

  IF you have g transforms, enter on the next line:
     X and Y center coordinates of the transforms, or / to accept the
     default, which is the center of the input image.

  List of sections to be included in output file, or / to include all
     sections from the input file in the output file.  Ranges may be
     entered (e.g. 0-5,8-14,17-23)

  Minimum and maximum X, and minimum and maximum Y coordinates that
   	should be included in the output image.  Enter "/" to obtain
   	the entire input image.

  Maximum limit on the X and Y frame size for output pieces, and
   	minimum limit on overlap between output pieces.  The program
   	will then choose new frame sizes and overlaps based on these
   	limits

  0 to accept the program's choices of frame size and overlap.  When
   	running interactively, entering 1 will allow you to loop back
   	and enter new minimum and maximum X and Y coordinates and a
   	new maximum frame and minimum overlap.  Note that on the first
        two entries, the program will enforce a minimum overlap of 2;
        if for some reason you want an overlap of 0, you need to loop
        back so that you enter the frame size and overlap 3 times.

  0 to build new files of edge functions, 1 to use old files that were
   	generated on a previous run of the program

  Root filename for edge function files. 

  Widths over which to blend positions at an edge, in the X and Y directions.


HHIISSTTOORRYY
  Written by David Mastronarde, February 1989
  12/21/98: added ability to do initial cross-correlation and to find best
  shifts to correct for sloppy montages
  6/1/01: implemented ability to write and read in edge correlation
  displacements; added a search step to improve on cross-correlations  
  8/9/03: converted to PIP input.
