#!/usr/bin/env python
# transferfid - Transfer fiducials from one axis to another
#
# Author: David Mastronarde
#
# $Id$
#

progname = 'transferfid'
prefix = 'ERROR: ' + progname + ' - '

# Filter for tiltxcorr
sigma1 = 0.03
sigma2 = 0.05
radius2 = 0.25

# Search limit parameters
xylimitfrac = 5
rotlimit = 15
otherlimits = '.1,.05,2'

# Number of wins more in one rotation direction than the other that will
# make it abandon the other direction
DIRECTION_WIN_THRESH = 4
BIG_WIN_THRESH = 2
BIG_WIN_FACTOR = 2.

# Global variables needed by functions
tmproot = ''
pid = ''
leavetmp = 0
tmpdir = ''

# Clean up all the temp files before exiting
def cleanup():
   if leavetmp:
      prnstr('Temporary files left in ' + tmpdir + ' as *' + pid)
   else:
      cleanlist = glob.glob(tmproot + '*' + pid + '*')
      cleanupFiles(cleanlist)
         

# Cleanup files, issue top message if any, and do the Imod error exit
def cleanExitError(message = ''):
   cleanup()
   if message:
      prnstr(prefix + message)
   exitFromImodError(progname)
   

# Find the view with the minimum tilt angle from either the tilt file or track.com
def getMinimumAngle(setname, src, AA, lines):
   tiltfile = setname + src + '.rawtlt'
   if not os.path.exists(tiltfile):

      # Try to find starting and increment and compute from them
      first = optionValue(lines, 'FirstTiltAngle', 2)
      increment = optionValue(lines, 'TiltIncrement', 2)
      if not first or not increment:
         exitError(fmtstr('{} not found - it is needed unless you enter the zero-tilt ' +\
                          'view number for {} with -z{} or track{}.com ' +\
                          'has starting angle and increment', tiltfile, AA, src, src))
      if math.fabs(increment[0]) < math.fabs(0.000001 * first[0]):
         exitError('Tilt increment too small to find zero tilt view number')
      zero = 1 + int(math.floor(-first[0] / increment[0] + 0.5))
      if zero <= 0:
         exitError('Cannont find zero tilt view number from first angle and increment')
      return zero

   # Find minimum tilt angle in rawtlt file
   anglines = readTextFile(tiltfile)
   amin = 1.e20
   zero = -1
   try:
      for i in range(len(anglines)):
         ang = math.fabs(float(anglines[i]))
         if ang < amin:
            amin = ang
            zero = i + 1
   except Exception:
      exitError('Converting lines in ' + tiltfile + ' to floating point values')
   if zero <= 0:
      exitError('Cannot find a minimum tilt angles from ' + tiltfile)
   return zero


#### MAIN PROGRAM  ####
#
# load System Libraries
import os, sys, os.path, signal, glob, math

#
# Setup runtime environment
if sys.platform.find("win32") < 0:
   try:
      signal.signal(signal.SIGHUP, signal.SIG_IGN)
   except Exception:
      pass
if os.getenv('IMOD_DIR') != None:
   os.environ['PATH'] = os.path.join(os.environ['IMOD_DIR'], 'bin') + \
                        os.pathsep + os.environ['PATH']
   sys.path.insert(0, os.path.join(os.environ['IMOD_DIR'], 'pylib'))
else:
   sys.stdout.write(prefix + " IMOD_DIR is not defined!\n")
   sys.exit(1)

#
# load IMOD Libraries
from imodpy import *
from pip import *
from pysed import *

# Fallbacks from ../manpages/autodoc2man 3 1 transferfid
options = ["s:Setname:CH:", "b:TransferBtoA:B:", "ia:AImageFile:FN:",
           "ib:BImageFile:FN:", "f:FiducialModel:FN:", "o:SeedModel:FN:",
           "n:ViewsToSearch:I:", "za:ACenterView:I:", "zb:BCenterView:I:",
           "a:AngleOfRotation:I:", "x:MirrorXaxis:B:", "m:RunMidas:B:",
           "c:CorrespondingCoordFile:FN:", "lowest:LowestTiltTransformFile:FN:",
           "t:LeaveTempFiles:B:"]

(opts, nonopts) = PipReadOrParseOptions(sys.argv, options, progname, 1, 0, 0)
passOnKeyInterrupt(True)

# Set names of temp files
tmpdir = imodTempDir()
pid = '.' + str(os.getpid())
tmproot = progname
if tmpdir:
   tmproot = tmpdir + '/' + progname + '.'

tmpstack = tmproot + 'stack' + pid
tmpimga = tmproot + 'imga' + pid
tmpxcxf = tmproot + 'xcxf' + pid
tmpxf1 = tmproot + 'xf1' + pid
tmpxf2 = tmproot + 'xf2' + pid
tmprot90 = tmproot + 'rot90' + pid
tmpminxf = tmproot + 'minxf' + pid
tmptwoxf = tmproot + 'twoxf' + pid
tmpclip = tmproot + 'clip' + pid
tmpxfmod = tmproot + 'xfmod' + pid
tmpseed = tmproot + 'seed' + pid
tmpmap1 = tmproot + 'map1' + pid
tmpmap2 = tmproot + 'map2' + pid
tmpmap3 = tmproot + 'map3' + pid
tmpmidxf = tmproot + 'midxf' + pid

setname = PipGetInOutFile('Setname', 0)
if not setname:
   exitError('You must enter the setname (root name of dataset)')

src = 'a'
dst = 'b'
AA = 'A'
BB = 'B'
ifbtoa = PipGetBoolean('TransferBtoA', 0)
if ifbtoa:
   src = 'b'
   dst = 'a'
   AA = 'B'
   BB = 'A'

imagea = PipGetString('AImageFile', '')
imageb = PipGetString('BImageFile', '')
fidfile = PipGetString('FiducialModel', setname + src + '.fid')
outfile = PipGetString('SeedModel', setname + dst + '.seed')
nviews = PipGetInteger('ViewsToSearch', 5)
zeroa = PipGetInteger('ACenterView', -1)
zerob = PipGetInteger('BCenterView', -1)
correspond = PipGetString('CorrespondingCoordFile', '')
lowestXfFile = PipGetString('LowestTiltTransformFile', '')
pmstart = 0
pmend = 1
angle = PipGetInteger('AngleOfRotation', 0)
if angle < 0:
   pmend = 0
if angle > 0:
   pmstart = 1
leavetmp = PipGetBoolean('LeaveTempFiles', 0)
midas = PipGetBoolean('RunMidas', 0)
mirror = PipGetBoolean('MirrorXaxis', 0)
if nviews < 0:
   exitError('The number of views to sample must be positive')

# swap inputs for filename and center z's if going backwards
if ifbtoa:
   tmp = imagea
   imagea = imageb
   imageb = tmp
   tmp = zeroa
   zeroa = zerob
   zerob = tmp

# Get the A track command file and insist it be PIP version; get A image file if needed
tracka = 'track' + src + '.com'
if not os.path.exists(tracka):
   exitError('Cannot find ' + tracka + ' command file')
tracklines = readTextFile(tracka)

# find beadtrack command line then end of input
startline = -1
for i in range(len(tracklines)):
   line = tracklines[i].strip()
   if line.startswith('$') and line.find('beadtrack') >=0 and line.find('-Standard') > 0:
      startline = i + 1
   elif startline > 0 and line.startswith('$'):
      endline = i

tracklines = tracklines[startline:endline]

if startline < 0:
   exitError('Old version of ' + tracka + ' cannot be used; convert it by opening ' +\
             'and closing the fiducial tracking panel in etomo')

if not imagea:
   imagea = optionValue(tracklines, 'ImageFile', 0)

# Get B image file from trackb.com if needed 
if not imageb or zerob < 0:
   trackb = 'track' + dst + '.com'
   if not os.path.exists(trackb):
      exitError(fmtstr('Cannot find {} command file; it is needed unless you enter the' +\
                       ' {} image file with -i{}', trackb, BB, dst))
   blines = readTextFile(trackb)
   if not imageb:
      imageb =  optionValue(blines, 'ImageFile', 0)
   if not imageb:
      exitError(fmtstr('Cannot find the {} image file name in {}', BB, trackb))

# Get the view at minimum tilt if needed for one reason or another
zeroAview = zeroa
zeroBview = zerob
if zeroa < 0 or lowestXfFile:
   zeroAview = getMinimumAngle(setname, src, AA, tracklines)
if zerob < 0 or lowestXfFile:
   zeroBview = getMinimumAngle(setname, dst, BB, blines)
if zeroa < 0:
   zeroa = zeroAview
if zerob < 0:
   zerob = zeroBview

# Make sure image files exist and fid file too
for imfile in (imagea, imageb):
   if not os.path.exists(imfile):
      exitError('Image file ' + imfile + ' does not exist')

if not os.path.exists(fidfile):
   exitError('Fuducial file ' + fidfile + ' does not exist')

# Get image sizes and pixel size
(nxa, nya, nza, mode, pxa, pya, pza) = getmrc(imagea)
(nxb, nyb, nzb, mode, pxb, pyb, pzb) = getmrc(imageb)
if math.fabs((pxb - pxa) /pxa) > 0.025:
   exitError(fmtstr('Pixel sizes do not match: {} = {}, {} = {}', imagea, pxa, imageb,
                    pxb))

# Set the binning needed to get image size to 512 or less unless the size is
# bigger than 4K, in which case bin to 1024.  Limit binning to 4 between 2048
# and 4096.  Set limits on X/Y in search
# Original had sqrt of nxa * nxb!
size = int(math.floor(math.sqrt(nxa * nya)))
limit = 512
if size >= 4096:
   limit = 1024
reduce = (size + limit - 1) // limit
if size < 4096 and reduce > 4:
   reduce = 4
xlimit = nxb // 5
ylimit = nyb // 5

# Get starting and ending section numbers
#
zeroa -= 1
zerob -= 1

asecstr = zeroa - (nviews // 2)
asecend = asecstr + nviews - 1
bsecstr = zerob - (nviews // 2)
bsecend = bsecstr + nviews - 1
lowestAsec = min(asecend, max(asecstr, zeroAview - 1))
lowestBsec = min(bsecend, max(bsecstr, zeroBview - 1))

# Check section numbers
if asecstr < 0 or asecend >= nza:
    exitError(fmtstr('The starting or ending section numbers for {} are out of range' + \
                     ' ({} and {})', AA, asecstr, asecend))
if bsecstr < 0 or bsecend >= nzb:
    exitError(fmtstr('The starting or ending section numbers for {} are out of range' + \
                     ' ({} and {})', BB, bsecstr, bsecend))

# Set up lists to do sections from center out
aseclist = [zeroa]
bseclist = [zerob]
ind = 1
while ind < nviews:
   for dir in (1, -1):
      aseclist.append(zeroa + ind * dir)
      bseclist.append(zerob + ind * dir)
   ind += 1
   

# Do we still need to scale density differences?
diffscale = 1.0 # was 1000000

# set up for midas
#
if midas:
   if pmend != pmstart:
      pmend = 0
else:
    prnstr("Finding the best matched pair of views in the two series:")
    prnstr("              (Type Ctrl-C to end search)")

# Loop on section from b, section from a, and -/+90 rotations
diffmin = 2000000000
diffLowestTilt = diffmin
pluswin = 0
minuswin = 0
plusbig = 0
minusbig = 0
try:
   for bsecind in range(nviews):
      bsec = bseclist[bsecind]
      for asecind in range(nviews):
         asec = aseclist[asecind]
         plusminus = pmstart
         pmdiffs = []
         while plusminus <= pmend:
            if plusminus:
               if mirror:
                  rotstr = "0 -1 -1 0 -1 -1"
               else:
                  rotstr = "0 -1 1 0 -1 0"
               pmangle = +90
            else:
               if mirror:
                  rotstr = "0 1 1 0 0 0"
               else:
                  rotstr = "0 1 -1 0 0 -1"
               pmangle = -90

            writeTextFile(tmprot90, [rotstr])

            # extract the rotated section from A
            try:
               runcmd(fmtstr('newstack -sec {} -xform {} -size {},{} -use 0 {} "{}"',
                             asec, tmprot90, nxb, nyb, imagea, tmpimga))
            except ImodpyError:
               cleanExitError(fmtstr('Extracting rotated section from {}', AA))

            # Stack this rotated section on top of the sec from b
            try:
               runcmd(fmtstr('newstack -sec {} -sec 0 {} "{}" "{}"',
                             bsec, imageb, tmpimga, tmpstack))
            except ImodpyError:
               cleanExitError(fmtstr('Stacking rotated {} on {}', AA, BB))
               
            if midas:
               if not asecind and not bsecind:

                  # first time, run midas
                  prnstr("Starting midas - you should align translation and rotation,")
                  prnstr(" and save the transform to the already-defined output file")
                  prnstr(" ")
                  try:
                     runcmd(fmtstr('midas -D "{}" "{}"', tmpstack, tmpmidxf))
                  except ImodpyError:
                     cleanExitError()
                     
                  if not os.path.exists(tmpmidxf):
                     cleanup()
                     exitError('Transform file not found - cannot proceed')

                  midxflines = readTextFile(tmpmidxf)
                  if len(midxflines) < 2:
                     exitError('No transform found in ' + tmpmidxf)
                  writeTextFile(tmpxf1, [midxflines[1]])
                  prnstr("Finding the best matched pair of views in the two series:")
                  prnstr("              (Type Ctrl-C to end search)")

                  
            else:

               # Run tiltxcorr
               try:
                  runcmd(fmtstr('tiltxcorr -angles 0,0 -radius2 {} -sigma1 {} -sigma2' +\
                                ' {} {} {}', radius2, sigma1, sigma2, tmpstack, tmpxcxf))
               except ImodpyError:
                  cleanExitError('Running tiltxcorr to get initial correlation alignment')

               # Run xfsimplex looking for rotation only
               xfcom = ['AImageFile ' + tmpstack,
                        'BImageFile ' + tmpimga,
                        'OutputFile ' + tmpxf1,
                        'InitialTransformFile ' + tmpxcxf,
                        'VariablesToSearch 3',
                        'BinningToApply ' + str(reduce),
                        fmtstr('LimitsOnSearch {},{},{}', xlimit, ylimit, rotlimit),
                        'UseTransformLine 1']
               try:
                  runcmd('xfsimplex -StandardInput', xfcom)
               except ImodpyError:
                  cleanExitError('Running first xfsimplex with rotation only')


            # Run xfsimplex again from there, looking for full transform
            xfcom = ['AImageFile ' + tmpstack,
                     'BImageFile ' + tmpimga,
                     'OutputFile ' + tmpxf2,
                     'InitialTransformFile ' + tmpxf1,
                     'VariablesToSearch 6',
                     'BinningToApply ' + str(reduce),
                     fmtstr('LimitsOnSearch {},{},{},{}', xlimit, ylimit, rotlimit,
                            otherlimits)]
            try:
               simplines = runcmd('xfsimplex -StandardInput', xfcom)
            except ImodpyError:
               cleanExitError('Running second xfsimplex with full transform')

            try:
               diffspl = simplines[len(simplines) - 2].split()
               diff = float(diffspl[1]) * diffscale
            except Exception:
               cleanup()
               exitError('Extracting difference value from Xfsimplex output')
            prnstr(fmtstr('{} {} {} {} rotation {:3d} difference {:11.6f}', AA, asec + 1,
                          BB, bsec + 1, pmangle, diff), end = '')
            if diff < diffmin:
               prnstr('*', flush=True)
               diffmin = diff
               asecbest = asec
               bsecbest = bsec
               try:
                  runcmd(fmtstr('xfproduct "{}" "{}" "{}"', tmprot90, tmpxf2, tmpminxf))
               except ImodpyError:
                  cleanExitError('Taking product of 90 degree and found transform')

            else:
               prnstr(' ', flush=True)

            #  Accumulate differences from plus and minus
            pmdiffs.append(diff)
            plusminus += 1

            # If XF file at lowest tilt requested, output one for best lowest tilt pair
            if lowestXfFile and asec == lowestAsec and bsec == lowestBsec and \
                   diff < diffLowestTilt:
               diffLowestTilt = diff
               try:
                  runcmd(fmtstr('xfproduct "{}" "{}" "{}"', tmprot90, tmpxf2,
                                lowestXfFile))
               except ImodpyError:
                  cleanExitError('Taking product of 90 degree and found transform')

         # If there are both plus and minus, count who wins
         # and stop doing a consistent loser, or a big loser sooner
         if len(pmdiffs) == 2:
            if pmdiffs[0] < pmdiffs[1]:
               minuswin += 1
	    if pmdiffs[0] > pmdiffs[1]:
               pluswin += 1
            if pmdiffs[0] * BIG_WIN_FACTOR < pmdiffs[1]:
               minusbig += 1
	    if pmdiffs[0] > pmdiffs[1] * BIG_WIN_FACTOR:
               plusbig += 1
	    if pluswin >= minuswin + DIRECTION_WIN_THRESH or \
                   (plusbig >= BIG_WIN_THRESH and not minuswin):
               pmstart = 1
	    if minuswin >= pluswin + DIRECTION_WIN_THRESH or \
                   (minusbig >= BIG_WIN_THRESH and not pluswin):
               pmend = 0

except KeyboardInterrupt:
   pass

try:
   prnstr(fmtstr('Transferring fiducials from view {} in {} to view {} in {} with' + \
                 ' Beadtrack:', asecbest + 1, AA, bsecbest + 1, BB))
   prnstr("              (Type Ctrl-C to interrupt)")

   # Stack the two best sections
   minxf = []
   if os.path.exists(tmpminxf):
      minxf = readTextFile(tmpminxf)
   if len(minxf) < 1:
      cleanup()
      exitError('No alignment was computed, cannot continue')
   writeTextFile(tmptwoxf, ['1 0 0 1 0 0', minxf[0]])
   try:
      runcmd(fmtstr('newstack -sec {} -sec {} -xform {} -use 0,1 -float 2 {} {} "{}"',
                    bsecbest, asecbest, tmptwoxf, imageb, imagea, tmpstack))
   except ImodpyError:
      cleanExitError('Stacking two best views')

   # Find the pixel size of the model and a scale factor
   try:
      infolines = runcmd('imodinfo -h ' + fidfile)
   except Exception:
      cleanExitError('Extracting pixel size from model')
   modpixel = 0.
   for l in infolines:
      if l.find('SCALE  =') >= 0:
         l = l.replace(',', '')
         l = l.replace('(', '')
         l = l.replace(')', '')
         try:
            modpixel = float(l.split()[3])
         except Exception:
            modpixel = 0.
            pass
         break

   if not modpixel:
      cleanup()
      exitError('Getting model scale value')

   modscale = pxa / modpixel

   # clip out the model and remap it to z = 1
   clipcom = ['InputFile ' + fidfile,
              'OutputFile ' + tmpclip,
              fmtstr('ZMinAndMax {},{}', asecbest - 0.5, asecbest + 0.5),
              'KeepEmptyContours']
   try:
      runcmd('clipmodel -StandardInput', clipcom)
   except ImodpyError:
      cleanExitError('Clipping out best view from ' + AA + ' fiducial model')
   try:
      runcmd(fmtstr('remapmodel -new 1 "{}" "{}"', tmpclip, tmpmap1))
   except ImodpyError:
      cleanExitError('Remapping ' + AA + ' fiducials to section 1')

   # transform model then adjust its coordinates to new center
   xadd = modscale * (nxb - nxa) / 2.
   yadd = modscale * (nyb - nya) / 2.
   try:
      runcmd(fmtstr('xfmodel -xforms "{}" -scale {} "{}" "{}"', tmptwoxf, modscale,
                    tmpmap1, tmpxfmod))
   except ImodpyError:
      cleanExitError('Transforming ' + AA + ' fiducials to match ' + BB + ' image')
   try:
      runcmd(fmtstr('remapmodel -new 1 -add {},{},0 "{}" "{}"', xadd, yadd, tmpxfmod,
                    tmpmap2))
   except ImodpyError:
      cleanExitError('Recentering transformed ' + AA + ' fiducials')

   # Prepare the blendmont command; keep tracking parameters but modify for two untilted
   # images
   sedcom = ['?^ImageFile?s?[ 	].*? ' + tmpstack + '?',
             '?^InputSeedModel?s?[ 	].*? ' + tmpmap2 + '?',
             '?^OutputModel?s?[ 	].*? ' + tmpseed + '?',
             '?^RotationAngle?s?[ 	].*? 0?',
             '?^FirstTiltAngle?d',
             '?^TiltIncrement?d',
             '?^TiltFile?d',
             '?^TiltAngles?d',
             '?^SkipViews?d',
             '?^RoundsOfTracking?s?[ 	].*? 1?',
             '?^RotationAngle?a?TiltAngles 0,0?']
   sedlines = pysed(sedcom, tracklines, None, False, '?')

   # If there is local tracking, definitely track objects together
   iflocal = optionValue(tracklines, 'LocalAreaTracking', 0)
   if iflocal and iflocal[0]:
      sedcom.append('TrackObjectsTogether')

   try:
      tracklog = runcmd('beadtrack -StandardInput', sedlines)
   except ImodpyError:
      cleanExitError('Running Beadtrack to get fiducials onto ' + BB + ' view')

   try:
      btnum = tracklog[len(tracklog) - 1].split()
      prnstr('Number of fiducials that failed to transfer: ' + btnum[len(btnum) - 1])
   except Exception:
      cleanup()
      exitError('Finding # failed message in track output')

   # Remap seed model to the section in B
   try:
      runcmd(fmtstr('remapmodel -new {},-999 "{}" "{}"', bsecbest, tmpseed, tmpmap3))
   except ImodpyError:
      cleanExitError('Remapping seed model up to view in ' + BB)

   # Repack the model to remove empty points, and pass through mapping report
   # First find out if the fid.xyz is available and has contour data
   xyzname = setname + src + 'fid.xyz'
   if os.path.exists(xyzname):
      xyzlines = readTextFile(xyzname)
      if len(xyzlines[len(xyzlines) - 1].split()) < 6:
         xyzname = ''
   else:
      xyzname = ''

   comlines = [fidfile, xyzname, tmpmap3, outfile, correspond,
               fmtstr('{},{},{}', asecbest, bsecbest, ifbtoa)]
   try:
      replines = runcmd('repackseed', comlines)
   except ImodpyError:
      cleanExitError('Repacking seed model and establishing correspondence')
   doOut = False
   for l in replines:
      doOut = doOut or l.find('follow') >= 0
      if doOut:
         prnstr(l.strip())

except KeyboardInterrupt:
   pass

cleanup()
sys.exit(0)

                     
             
