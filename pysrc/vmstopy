#!/usr/bin/python -u
# Translates a "command" file into a python script with logging
#
# Author: David Mastronarde
#
# $Id$
# Log at end
#

# load System Libraries
import os, sys, os.path, re

if os.getenv('IMOD_DIR') != None:
   sys.path.append(os.path.join(os.environ['IMOD_DIR'], 'pylib'))
else:
   sys.stdout.write("ERROR: vmstopy - IMOD_DIR is not defined!\n")
   sys.exit(1)

from imodpy import *

anyset = 0

# Function to enclose a line in quotes and change variables
def quoteSubstitute(lin):
   if anyset:
      lin = lin.replace('$', '%')
   lin = "'" + lin + "'"
   indv = lin.find('%')
   while indv >= 0:
      lin = re.sub('%(\w+)', r"' + str(\1) + '", lin)
      indv = lin.find('%')
   return lin        
   
# Process arguments
lenarg = len(sys.argv)
argind = 1
execute = 0
usetemp = 0
quiet = 0
if lenarg < 2:
   prnstr("Usage: vmstopy [-x|-q] comfile logfile [pyscript]")
   prnstr("  Converts an IMOD command file to a python script")
   prnstr('  Outputs script on standard out if "pyscript" is not given')
   prnstr('  Option -x will execute the script; -q will suppress messages')
   sys.exit(0)

while lenarg - argind > 2:
   oarg = sys.argv[argind]
   if oarg.startswith('-'):
      if oarg == '-x':
         execute = 1
      elif oarg == '-q':
         quiet = 1
      else:
         prnstr("ERROR: vmstopy - Unrecognized argument " + oarg)
         sys.exit(1)
      argind += 1
   else:
      break

if lenarg - argind < 2:
   prnstr("ERROR: vmstopy - command file and log file name are required")
   sys.exit(1)

# Open the com file and possibly output file
outfile = None
logname = sys.argv[argind + 1]
try:
   com = open(sys.argv[argind])
except:
   prnstr("ERROR: vmstopy - Opening command file" + sys.argv[argind])
   sys.exit(1)
try:
   if execute or lenarg - argind > 2:
      if lenarg - argind > 2:
         outfile = sys.argv[argind + 2]
         import stat
      else:
         import time
         usetemp = 1
         (ye, mo, md, hr, min, sec, wday, yday, isdst) = time.gmtime()
         outfile = sys.argv[argind] + str(min * 60 + sec)
      out = open(outfile, 'w')
   else:
      out = sys.stdout

except:
   prnstr("ERROR: vmstopy - Opening file for Python script")
   com.close();
   sys.exit(1)

# Output the boilerplate.  Log must be opened binary to keep cygwin from
# double-converting \r\n to \r\r\n
#
prnstr("#!/usr/bin/python -u", file=out)
prnstr("# Set up environment: NOHUP, IMOD on path", file=out)
prnstr("import os, sys, os.path, signal", file=out)
prnstr("if sys.platform.find('win32') < 0:", file=out)
prnstr("  try:", file=out)
prnstr("    signal.signal(signal.SIGHUP, signal.SIG_IGN)", file=out)
prnstr("  except:", file=out)
prnstr("    pass", file=out)
prnstr("if os.getenv('IMOD_DIR') != None:", file=out)
prnstr("  os.environ['PATH'] = os.path.join(os.environ['IMOD_DIR'], 'bin') + os.pathsep + os.environ['PATH']", file=out)
prnstr("  sys.path.append(os.path.join(os.environ['IMOD_DIR'], 'pylib'))", file=out)
prnstr("else:", file=out)
prnstr("  log.write('ERROR: IMOD_DIR is not defined\\n')", file=out)
prnstr("  sys.exit(1)", file=out)
prnstr("if os.getenv('IMOD_QTLIBDIR') != None and os.getenv['LD_LIBRARY_PATH'] != None:", file=out)
prnstr("  os.environ['LD_LIBRARY_PATH'] = os.environ['IMOD_QTLIBDIR'] + os.pathsep + os.environ['LD_LIBRARY_PATH']", file=out)
prnstr("os.environ['PIP_PRINT_ENTRIES'] = '1'", file=out)
prnstr("from imodpy import *", file=out)
prnstr("# Back up and open log file", file=out)
prnstr("makeBackupFile('" + logname + "')", file=out)
prnstr("try:", file=out)
prnstr("  log = open('" + logname + "', 'wb')", file=out)
prnstr("except:", file=out)
prnstr("  prnstr('ERROR: Cannot open log file " + logname + " for writing')", file=out)
prnstr("  sys.exit(1)", file=out)

# Read the file, throwing away comments, labels, or all lines while seeking a
# label.  Keep blank lines, they could be input lines
try:
   labelMatch = re.compile('^\$ *(\w+): *$')
   exitMatch = re.compile('^\$ *exit *$')
   gotoMatch = re.compile('^\$ *goto +(\w+) *$')
   endMatch = re.compile('[\r\n]')
   commentMatch = re.compile('^ *#')
   seekLabel = None
   lines = []
   line = com.readline()
   while line:
      keep = 1
      if seekLabel:
         keep = 0
         if re.sub(labelMatch, r'\1', line) == seekLabel:
            seekLabel = None
      elif re.search(labelMatch, line):
         keep = 0
      elif re.search(gotoMatch, line):
         seekLabel = re.sub(gotoMatch, r'\1', line)
         keep = 0
      elif re.search(exitMatch, line):
         break;
      elif re.search(commentMatch, line):
         keep = 0

      if keep:
         line = re.sub(endMatch, '', line)
         lines.append(line)
      line = com.readline()
except:
   prnstr("ERROR: vmstopy - Reading from command file")
   out.close()
   com.close()
   if usetemp:
      os.remove(outfile)
   sys.exit(1)

com.close()
prnstr("try:", file=out)

ind = 0
echoMatch = re.compile('^\$( *)echo ')
setMatch = re.compile('^\$( *)set +')
continueMatch = re.compile(r'\\ *$')
existMatch = re.compile('^\$( *)if *\( *-e +([^) ]+)\) *(.*)')
while ind < len(lines):
   line = lines[ind]
   ind += 1

   # Replace $echo with >print 
   if re.search('^\$ *echo', line):
      if re.search(echoMatch, line):
         line = re.sub(echoMatch, r'>\1print ', line)
         if line.find('"') < 0:
            line = re.sub('print (.*)$', r'print "\1"', line)
      elif re.search('^\$ *echo$', line):
         line = re.sub('\$( *)echo', r'>\1print " "', line)

   # Replace $set with >
   if re.search(setMatch, line):
      line = re.sub(setMatch, r'>\1', line)
      anyset = 1

   # Look for 'if (-e file)' construct and replace with added line
   if re.search(existMatch, line):
      addline = re.sub(existMatch,  r'$\1  \3', line)
      lines.insert(ind, addline)
      line = re.sub(existMatch,  r'>\1if os.path.exists("\2"):', line)

   # Python line: just replace print with prnstr( and put file=log at end
   if line.startswith('>'):
      if re.search(r'\bprint +[^>]', line):
         line = re.sub(r'\bprint ', 'prnstr(', line)
         line += ', file=log)'
      prnstr("  " + re.sub('^>', '', line), file=out)

   elif line.startswith('$'):

      # First gather continuation lines
      while re.search(continueMatch, line):
         if ind >= len(lines):
            prnstr("ERROR: vmstopy - continued line at end of command file")
            out.close()
            if usetemp:
               os.remove(outfile)
            sys.exit(1)
         line = re.sub(continueMatch, ' ', line) + lines[ind]
         ind += 1

      # Now strip $ and indented spaces, quote and substitute
      indent = re.sub('^\$( *).*', r'\1', line)
      line = re.sub('^\$ *', '', line)
      if line.find('\\') >= 0:
         line = line.replace('\\rm ', 'rm -f ')
         line = line.replace('\\mv ', 'mv -f ')
      line = quoteSubstitute(line)
      prnstr("  " + indent + "command = " + line, file=out)

      # gather input if any
      prnstr("  " + indent + 'input = [', end='', file=out)
      inputout = 0
      while ind < len(lines) and not \
         (lines[ind].startswith('$') or lines[ind].startswith('>')):
         line = quoteSubstitute(lines[ind])
         ind += 1
         if inputout:
            prnstr(',\n' + indent + ' '*11, end='', file=out)
         prnstr(line, end='', file=out)
         inputout = 1

      prnstr(']', file=out)
      prnstr("  " + indent + 'runcmd(command, input, log)', file=out)
      

   # skip blank lines, object to anything else
   elif line:
      prnstr("ERROR: vmstopy - Expected command or Python line: " + line)
      out.close()
      if usetemp:
         os.remove(outfile)
      sys.exit(1)

prnstr("except ImodpyError:", file=out)
prnstr("  for l in getErrStrings():", file=out)
prnstr("    prnstr('ERROR: ' + l, end='', file=log)", file=out)
prnstr("  log.close()", file=out)
prnstr("  sys.exit(1)", file=out)
prnstr("except:", file=out)
prnstr("  prnstr('ERROR: Unknown error running commands: ' +  str(sys.exc_info()[1]), file=log)", file=out)
prnstr("  log.close()", file=out)
prnstr("  sys.exit(1)", file=out)
prnstr("prnstr('SUCCESSFULLY COMPLETED', file=log)", file=out)
prnstr("log.close()", file=out)
prnstr("sys.exit(0)", file=out)
out.close()

retval = 0
try:
   if outfile and not usetemp:
      mode = stat.S_IMODE(os.stat(outfile)[stat.ST_MODE]) | stat.S_IXUSR
      if mode & stat.S_IRGRP:
         mode |= stat.S_IXGRP
      if mode & stat.S_IROTH:
         mode |= stat.S_IXOTH
      os.chmod(outfile, mode)
except:
   prnstr("ERROR: vmstopy - Making script file executable")
   retval = 1

try:
   if execute:
      if not quiet:
         prnstr("Executing Python script...  ", end='')
      runcmd("python -u " + outfile)
      if not quiet:
         prnstr("DONE!")
except ImodpyError:
   for l in getErrStrings():
      if l.find(outfile) < 0:
         prnstr(l, end='')
   retval = 1

try:
   if usetemp:
      os.remove(outfile)
except:
   prnstr("ERROR: vmstopy - Removing temporary file " + outfile)
   retval = 1   

sys.exit(retval)


#
#  $Log$
#  Revision 1.6  2009/12/04 20:48:56  mast
#  Set entry printing variable, added succes statement at end
#
#  Revision 1.5  2008/02/28 00:27:34  mast
#  Oops, to use imodpy, have to put the pylib on the path
#
#  Revision 1.4  2008/01/05 17:20:41  mast
#  Execute script with runcmd(python -u ...) to avoid error on good exit
#
#  Revision 1.3  2007/11/20 20:29:35  mast
#  Added IMOD_QTLIBDIR to LD_LIBRARY_PATH if both defined
#
#  Revision 1.2  2006/10/01 13:37:06  mast
#  Used backup file function
#
#  Revision 1.1  2006/09/26 23:02:48  mast
#  Added to package
#
