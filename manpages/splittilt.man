.na
.nh
.TH splittilt 1 3.4.1 BL3DEMC
.SH NAME
splittilt \- Produce multiple command files for running Tilt in parallel
.SH SYNOPSIS
splittilt [options] <Tilt command file>
.SH DESCRIPTION
splittilt will take a command file for running the Tilt(1) program for tomogram
generation and produce multiple command files that can be run in parallel by
Processchunks(1).  It takes into account the computational implications of
some of the parameter settings when determining how many chunks to divide the
task into.
.P
The only argument that the typical user needs to give is
.B -n
to specify the expected number of processors to be used.  Only an approximate
number is needed.  The default value is printed out by the program's usage
statement.  Thus, a typical command might be
.br
   splittilt -n 6 tilta.com
.br
After giving this command, there will be a series of command files
tilta-nnn.com to compute the chunks, and a file tilta-finish.com to finish the
task and clean up intermediate files.  One can then enter
.br
   processchunks machine_list tilta
.br
where "machine_list" is the comma-separated list of machines to use.
.P
The problem in dividing up the Tilt task is that the smaller the chunks are,
the greater the total amount of resources needed because of the overhead
involved in doing
each chunk; whereas the larger the chunks, the greater the chance that a slow
machine will hold up the entire process.  The overhead takes two forms: the
file I/O and preprocessing involved in accessing all of the projection data
needed to reconstruct a given number of slices; and the extra "vertical"
slices that 
must be computed when there is X-axis tilting but no local alignments.  The
former overhead is minimized simply by having a minimum number of slices in
each 
chunk.  The latter overhead is explicitly minimized by taking into account the
penalty for doing old-style X-axis tilting (direct backprojection of each
output slice) versus interpolation between vertical slices.
.P
Initially, the program aims for a target number of chunks that is a fixed
multiple of the expected number of processors (or that is entered with the
.B
-t
option).  If the command file uses X-axis tilting but no local alignments,
then the program drops back to a smaller number, referred to as the minimum
number of chunks.  If the extra computational burden from computing vertical
slices is greater than the defined penalty for doing old-style tilting, the
program then switches to old-style tilting unless the 
.B -v
option is given.  In that case, vertical slices are still computed but the
number 
of chunks is further reduced until the penalty for doing vertical slices
matches the penalty for switching to old-style
tilting.  In all cases, the number of chunks is constrained by the minimum
number of slices in each chunk.
.P
The program will also operate on a command file for reprojecting from a
tomogram.  The complicated logic just described is still applied, even though
some of it is irrelevant.

.SS Options
When the program is invoked with no arguments, it gives a usage statement that
shows the default values for these options.
.TP
.B -n <value>
Use this option to specify the number of machines that you expect to run
the command files on.
.TP
.B -s <value>
Set the minimum number of slices per chunk to the given value.
.TP
.B -t <value>
Set the target number of chunks to the given value (the default is a multiple
of the expected number of machines).
.TP
.B -m <value>
Set the minimum number of chunks to the given value (the default is a multiple
of the expected number of machines).
.TP
.B -p <value>
Set the computational penalty for old-style X-axis tilting (a factor greater
than 1.0).
.TP
.B -v <value>
Do vertical slices instead of old-style X-axis tilting, regardless of the
penalty.
.TP
.B -f <value>
Allow fast backprojection where possible.  The default is to cancel fast
backprojection because mismatches will occur between chunks done with and
without fast backprojection.  Use this option only if all machines have
licenses for fast backprojection.
.TP
.B -c
Write chunks to separate files named setname-nnn.rec and assemble the output
file from these
at the end.  The default is to write directly to the output file.
.TP
.B -b <value>
Number of pixels at each boundary between chunks to save in separate boundary
files (named setname-nnn.rbound) and rewrite to the output file in the
-finish.com file, when directly writing to the output file.  The default is
2048.  This capability to rewrite lines at the boundary should make it
unnecessary to write chunks to separate files.
.TP
.B -s <value>
Start with given command file number instead of 1.  When this option is
entered, the program will not delete any existing command files.  If data are
being written directly to output file, the first file is named -nnn-sync.com
instead of -start.com.
.TP
.B -o
Leave the command file set open by naming the command file for reassembly 
-nnn-sync.com instead of -finish.com, and by not cleaning up command and log
files in the reassembly file.
.SH FILES
The finishing command file deletes all the
command and log files for the chunks after collecting minimun, maximum, and
mean density information from the log files.  If the
.B -c
option is given, the temporary reconstruction files are deleted too.
.SH AUTHOR
David Mastronarde  <mast@colorado.edu>
.SH SEE ALSO
processchunks(1), tilt(1)
