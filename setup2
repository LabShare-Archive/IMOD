#!/bin/csh
#############################################################################
# $Id$
# Set up configuration file for building BL3DEMC Software - the real one
#
#  Log at end of file
#

#
# Global setup
#
set imod_copyright    = '1994-2010'
set lab_name1     = 'Boulder Laboratory for 3-Dimensional'
set lab_name2     = 'Electron Microscopy of Cells'
set source_dir    = `pwd`
set endian_dir    = include

set configure     = configure
set hconfigure    = include/imodconfig.tmp
set hconffinal    = include/imodconfig.h

set debug           = false
set bin_dir         = $source_dir/bin
set inc_dir         = $source_dir/include
set lib_dir         = $source_dir/buildlib
set libhelp_dir     = $source_dir/html/libhelp
set include_flags   = "-I. -I$inc_dir"
set optimization    = "-O2"
set gfx             = default
set compiler        = default
set machine         =
set defines         = 
set shared_libs     = default
set intelstat       = false
set flags           = 
set fallback        = 
set swap_ieee       = true
set no_xlibs        = false
set distname        = ""
set packqt          = true
set useqt           = true
set qtthread        = true
set m64bit          = false
set m64notIA        = false
set intel           = false
set use_etomo       =
set packg2c         = false
set no_qt3          = true

set inst_dir        = default
set tifflibs        = default
set dummytiff       =
set usfftdir        = default
set wrapintel       = true
set openmp          = true
set blockio         =
set imsubsobj       = '*.o'
set tiltalilib      =
set tilt_dir        = flib/tilt
set fbpswitch       = fbpswitch-def.inc
set midas_dir       = midas
set sendevent_dir   = sendevent
set imod_dir        = imod
set qtassist_dir    = qtassist
set sourcedoc_dir   = sourcedoc
set ctfplot_dir     = ctfplotter
set ctfplot_flibs   = ""
set prochunk_dir    = processchunks
set plugsrc_dir     = plugs
set libdiaqt_dir    = libdiaqt
set etomo_dir       = Etomo
set pysrc_dir       = pysrc
set scripts_dir     = scripts
set midas_qconf     = midas/qconfigure
set imod_qconf      = imod/qconfigure
set sendevent_qconf = sendevent/qconfigure
set qtassist_qconf  = qtassist/qconfigure
set sourcedoc_qconf = sourcedoc/qconfigure
set ctfplot_qconf   = ctfplotter/qconfigure
set prochunk_qconf  = processchunks/qconfigure
set sourcedoc_exe   = sourcedoc
set qtdel1          = ""
set fort_cpplibs    =
set ctrl_string     = Ctrl
set ld_lib_var      = LD_LIBRARY_PATH
set qtapp_path      =
set xplax           = (qtplax.o moc_qtplax.o)
set objext          = o
set binext          =
set limod           = -limod
set lcfshr          = -lcfshr
set liimod          = -liimod
set ltiff           = -ltiff
set ldnmncar        = -ldnmncar
set lifft           = -lifft
set limesh          = -limesh
set lapacklibs      = '-llapack -lblas'
set lapack_flibs    = ''
set lapacklink      = '$(CC)'
set ldfflags        = '$(LDFLAGS)'
set farflags        = '$(ARFLAGS)'
set libtrackFlags   = '$(LIBFFLAGS)'
set dllext          = '$(LIBEXT)'
set moc             = '$(QTDIR)/bin/moc'
set openmpfFlags    = '$(OPENMP)'
set macsdkFlags     = ''
set rgbprogs        = 
set makestaticlib   = "ar ruv "
set staticranlib    = ranlib
set staticext       = a
set makenmcar       = '$(AR) $(ARFLAGS)'
set nmcarext        = '$(LIBEXT)'
set far             = '$(AR)'
set lwmod           = -lwmod
set lsmlmod         = -lsmlmod
set wmodext         = '$(DLLEXT)'
set makewmod        = '$(FAR) $(FARFLAGS)'
set junit_home      = /usr/local/junit
set jfcunit_home      = /usr/local/jfcunit
set class_sep       = ':'
set strip           = strip
set rmcmd           = '/bin/rm -f'
set qtincdir        = '$(QTDIR)/include'
set qt_flags        = '-I$(QTINCDIR) -I$(QTINCDIR)/Qt -I$(QTINCDIR)/QtCore -I$(QTINCDIR)/QtGui'
set qt3_flags       = '-DQT3_SUPPORT -I$(QTINCDIR)/Qt3Support'
# assistant_adp needs Xml.  assistant will need Sql
set qt4libstocopy   = 'QtOpenGL QtNetwork QtCore QtGui QtXml'
set qt3supportcopy = ""
set assistantcopy  = 'QtAssistantClient'
set midasGL         =  "-lQtOpenGL"
set nogpu           = ""
set b3dbyte         = "char"
set ubyte           = "unsigned char"
set int16           = "short int"
set uint16          = "unsigned short int"
set int32           = "int"
set uint32          = "unsigned int"
set float32         = "float"

set inargv = ($argv)

#
# Input options
#


while($#argv > 0)
    switch($argv[1])
            case -d:
    	case -debug:
    		set debug = true
    		breaksw

    	case -shared:
    		set shared_libs = true
    		breaksw
    	case -no_shared:
    		set shared_libs = false
    		breaksw

    	case -tiff:
    		set tifflibs = true
    		breaksw
    	case -no_tiff:
    		set tifflibs = false
    		breaksw

    	case -m:
    	case -mach:
    	case -machine:
    		shift
    		set machine = $argv[1]
    		breaksw

    	case -flags:
    		shift
    		set flags  = "$argv[1]"
                    breaksw
    	case -i:
    	case -inst:
    		shift
    		set inst_dir = $argv[1]
    		breaksw

    	case -compiler:
    	case -c:
    		shift
    		set compiler = $argv[1]
    		breaksw

    	case -swapieee:
    		set swap_ieee = true
    		breaksw

    	case -swapvms:
    		set swap_ieee = false
    		breaksw

        case -no_xlibs:
                set no_xlibs = true
                breaksw
         
        case -qt3:
                set no_qt3 = false
                set qt3supportcopy  = 'Qt3Support'
                breaksw
         
        case -name:
                shift
                set distname = _$argv[1]
                breaksw

        case -static:
                set intelstat = true
                breaksw

    	case -use_etomo:
    		shift
    		set use_etomo = $argv[1]
    		breaksw

        case -packg2c:
                set packg2c = true
                breaksw

        case -no_openmp:
                set openmp = false
                breaksw

        case -nowrap:
                set wrapintel = false
                breaksw

        case -no_gpu:
                shift
                set nogpu = $argv[1]
                if ($?CUDA_DIR) unsetenv CUDA_DIR
                breaksw

    	case -h:
    	case -help:
    		goto usage

    	default:
    		echo Bad option
    		goto usage
    		breaksw
    endsw
    shift
end

# Set common flags if doing CUDA
if ($?CUDA_DIR) then
    set nvcc_flags = "-arch sm_10 -maxrregcount 32 -I$CUDA_DIR/include -I../../include"
    set cudalibs = "-L$CUDA_DIR/lib -lcudart -lcufft"
endif

#
# get more machine specifics - USYSTEM was done in setup
#
set UMACHINE = `uname -m | sed '/ /s//_/g'`
set URELEASE = `uname -r`
#set UVERSION = `uname -v`
#set target_computer = {$UMACHINE}__{$USYSTEM}__{$URELEASE}__{$UVERSION}
set target_computer = {$UMACHINE}__{$USYSTEM}__{$URELEASE}__all

#
# Create imodconfig.h file
#
set imod_version = `sed '/\./s///g' .version`
# This nightmare was needed under cygwin
set imod_version_name = `sed '/.\(*\[0-9.]*\).*/s//\1/' .version`
cat << EOF >! $hconfigure
/* THIS FILE IS GENERATED BY SETUP: DO NOT EDIT */
#ifndef IMOD_CONFIG_INCLUDED
#define IMOD_CONFIG_INCLUDED
#define VERSION              $imod_version
#define VERSION_NAME "$imod_version_name"
#define COPYRIGHT_YEARS "$imod_copyright"
#define LAB_NAME1 "$lab_name1"
#define LAB_NAME2 "$lab_name2"
EOF

#
# Copy default include file for Fortran byte-ordering
# Set up default include file for number of bytes per item when defining
# record length for direct unformatted I/O
\cp $endian_dir/big_endian.inc $endian_dir/endian.inc
echo "      parameter (nbytes_recl_item=1)" >! $endian_dir/recl_bytes.inc


# Was this needed?  Need to research.  Don't want to confuse VisualC
#if ($debug == false) then
#        echo "#define NDEBUG"                 >> $hconfigure
#endif

#
# Create make config file
#
echo "# Configure file for making BL3DFS software." >! $configure 
echo "# Do not edit this file it is created by setup." >> $configure
echo "# setup for $target_computer" >> $configure
echo " " >> $configure
echo "IMOD_VERSION $imod_version_name"

#
# Set up defaults for makefile copying
#
set makefile_ext = unix
set makefile_dirs = ($libdiaqt_dir $plugsrc_dir)

#
# Set up directory names
#
if ($inst_dir == default) set inst_dir = $source_dir
set inst_bin_dir = $inst_dir/bin
set inst_lib_dir = $inst_dir/lib
set inst_plug_dir = $inst_dir/lib/imodplug
set inst_plug_parent = $inst_dir/lib

# Make this for some machine scripts to copy to
#
mkdir -p $lib_dir

# Manage files that have to be in place before qmakes are run
# update imod_assistant files in subsidiary directories
#
foreach dir ($qtassist_dir $ctfplot_dir $midas_dir)
    \find $dir -name imod_assistant.cpp ! -newer $imod_dir/imod_assistant.cpp -exec \rm -f '{}' \;
    \find $dir -name imod_assistant.h ! -newer $imod_dir/imod_assistant.h -exec \rm -f '{}' \;
    if (! -e $dir/imod_assistant.cpp) \cp $imod_dir/imod_assistant.cpp $dir
    if (! -e $dir/imod_assistant.h) \cp $imod_dir/imod_assistant.h $dir
end

# Make lists of qt directories and project names.  List them in order of
# the ones that can be treated the same for runscripts, etc, then midas, then
# oddballs
#
set qdir = ($sendevent_dir $qtassist_dir $ctfplot_dir $prochunk_dir \
  $midas_dir $imod_dir $sourcedoc_dir)
set qprog = (imodsendevent imodqtassist ctfplotter processchunks midas imod \
  sourcedoc)
set qconf = ($sendevent_qconf $qtassist_qconf $ctfplot_qconf $prochunk_qconf \
  $midas_qconf $imod_qconf $sourcedoc_qconf)

# Manage imodhelp for the qmake without having to delete a good one
if (! -e $imod_dir/imodhelp.h) touch $imod_dir/imodhelp.h

#
# Go To Machine dependent parts.
#
if ($machine != "") then
	echo target is $machine
	goto $machine
endif

switch($target_computer)

	case *__IRIX64__6.0*:
	case *__IRIX__6.0*:
	case *__IRIX64__6.1*:
	case *__IRIX__6.1*:
	case *__IRIX64__6.2*:
	case *__IRIX__6.2*:
		echo target computer is SGI running $USYSTEM $URELEASE
		set machine = irix6-32
		goto irix6-32
		breaksw
	case *__IRIX64__6*:
	case *__IRIX__6*:
		echo target computer is SGI running $USYSTEM $URELEASE
		set machine = irix6-n32
		goto irix6-n32
		breaksw
	case *__IRIX__5.3*:
		echo target computer is SGI running $USYSTEM $URELEASE
		set machine = irix5
		goto irix5
		breaksw

	case sun4*__SunOS__5.*__*:
		echo $target_computer is solaris
		set machine = solaris
		goto solaris
		breaksw

        # Red Hat Linux on Intel (i686 for the time being 6 21 00)
        case i686__Linux__*__*:
                echo $target_computer is Intel running Red Hat Linux
                set machine = rhlinux
                goto rhlinux
                breaksw

        # AMD64 Linux (SuSe 9.0)
        # added by CER  March 3, 2003
        case x86_64__Linux__*__*:
                echo $target_computer is AMD64 running Linux
                set machine = rhlinux
                goto amd64linux
                breaksw

        case ia64__Linux__*__*:
                echo $target_computer is Itanium running Linux
                set machine = rhlinux
                goto itanium
                breaksw

        # Cygwin on Intel 
        case *__CYGWIN_NT-*.*WOW64__*__*:
        case x86_64__CYGWIN_NT-*.*__*__*:
                echo $target_computer is Intel running Cygwin under Windows-64
                set machine = cygwin64
                goto cygwin64
                breaksw

        case i686__CYGWIN_NT-*.*__*__*:
                echo $target_computer is Intel running Cygwin under Windows
                set machine = cygwin
                goto cygwin
                breaksw

	case Power_Macintosh__Darwin__*__*:
                echo $target_computer is Power Macintosh running OSX
                set machine = macosx
                goto macosx
                breaksw

	case i386__Darwin__*__*:
	case x86_64__Darwin__*__*:
                echo $target_computer is Intel running OSX
                set machine = macosx
                goto intelosx
                breaksw

	default:
		echo WARNING: no definition for $target_computer
		echo $target_computer error
        	breaksw

endsw

#############################################################################
#
# The default system, to document the meaning of the variables that need
# to be defined.
# 
echo "You need to specify a machine; the generic settings are not usable"
exit 1

# define the compilers to use
echo "CC      = cc"               >> $configure
echo "CXX     = CC"               >> $configure
echo "CPPC    = CC"               >> $configure
set fcomp = "f77"

# May need to define as \cp and \find if you have aliases
echo "CP      = cp"          	  >> $configure
echo "FIND    = find"          	  >> $configure

# define how to make libraries - see specific machines for shared libs
echo "AR      = ar"               >> $configure
echo "ARCPP   = ar"               >> $configure
echo "ARFLAGS = r "               >> $configure
echo 'LDFLAGS = -L$(LIBDIR)'      >> $configure
echo "RANLIB  = ranlib"           >> $configure
echo 'MAKELIB = $(AR) $(ARFLAGS)' >> $configure

# MAKELIBCPP needs to be defined to make a library from cpp files.

# MAKELIBSO needs to be defined to describe how to make a .so plugin
# from .o files; all systems are OK with MAKELIB for shared libraries


# Basic C libraries, used to build almost all programs, C and Fortran; but
# the Fortran Makefiles use FORTCLIBS
echo "CLIBS       = -lm -lc"                >> $configure
echo 'LIBS        = $(CLIBS)'               >> $configure
echo 'FORTCLIBS   = $(LIBS)'               >> $configure

# Libraries for programs using X 
echo "XLIBS       = -lXm -lXt -lX11 -lXext" >> $configure

# Libraries for non-graphical and graphics Fortran programs
echo "IMLIBS     = -lhvem -lim -lifft -lcfshr" >> $configure
echo 'GRAPHLIBS    = '"$ldnmncar"' $(IMLIBS) $(XLIBS)' >> $configure

# extra library and option entries for making imod run plugins
echo 'PLUGLIBS = ' >> $configure

# Command for building a Fortran plugin
echo  'MAKEF77PLUGIN  = ld $(LDFLAGS) -shared -all -lftn -o'  >> $configure

# set compilation flags for debugging
if ($debug == true) then
        set optimization = "-g"
endif
		
# A slew of compilation flags - on the SGI, some Fortran programs needed not
# to be optimized, hence NOOPFLAGS.  Some Fortran and C programs don't
# work with -n32, so they have to be done with "fallback" flags that compile
# them -32.  For all other machines, the fallback flags can match the regular
# ones, as they do here

# you can set "defines" with extra defines for C programs, but it's better to
# use imodconfig instead

# also note that the flags variable is a way for flags to be added on
# the command-line, and to be defined globally for all compilations

echo "CFLAGS   = $flags $defines $optimization $include_flags" >> $configure
echo "CXXFLAGS = $flags $defines $optimization $include_flags" >> $configure
echo "FFLAGS   = $flags $optimization  $include_flags"         >> $configure
echo "NOOPFFLAGS   = $flags $optimization -O0  $include_flags"     >> $configure
echo "LIBCFLAGS   = $flags $defines $optimization $include_flags" >> $configure
echo "LIBFFLAGS   = $flags $optimization  $include_flags"         >> $configure
echo "FFALLBACK   = $flags $optimization  $include_flags"         >> $configure
echo "CFALLBACK   = $flags $defines $optimization $include_flags" >> $configure
echo 'LDFALLBACK = $(LDFLAGS)'       >> $configure
echo 'NOOPFFALLBACK = $(NOOPFFLAGS)' >> $configure

# Make tilt program from Fortran subroutines
echo 'TILTOBJS = bpsumnox.o bpsumxtilt.o bpsumlocal.o' >> $configure

# To indicate that librandm and libdtrigs need to be built
echo 'LINUXFLIBS = ' >> $configure

goto standard_defines



###########################################################################
# SGI running IRIX 6
#
irix6-32:
irix6:
irix6-n32:
irix5:
source machines/irix5-6

goto standard_defines

#############################################################################
# Intel running Linux 
#
itanium:
set m64bit = true
goto rhlinux

amd64linux:
set m64bit = true
set m64notIA = true

rhlinux:
source machines/rhlinux

goto standard_defines

#############################################################################
# Cygwin on Intel 
#
cygwin64:
set m64bit = true
set machine = cygwin

cygwin:
dos2unix machines/cygwin >& /dev/null
source machines/cygwin

goto standard_defines

#############################################################################
# Macintosh
#
intelosx:
set machine = macosx
set intel = true

macosx:
source machines/macosx

goto standard_defines

##############################################################################
# Solaris 2.x or SunOS5 using gcc compiler.
#
solaris:
source machines/solaris

goto standard_defines

##############################################################################
# Defines used for every system:
#
standard_defines:

if (($tifflibs == default) || ($tifflibs == false)) then
    echo 'DUMMYTIFF = libtiff.$(DLLEXT)' >> $configure
    echo "TIFFLIBS = $ltiff" >> $configure
    echo '#define NOTIFFLIBS'  >> $hconfigure
else
    if ($tifflibs == true) set tifflibs = $ltiff
    echo "DUMMYTIFF = $dummytiff" >> $configure
    echo "TIFFLIBS = $tifflibs" >> $configure
endif

if ($shared_libs == false) set inst_lib_dir = $lib_dir

echo "OBJEXT =    $objext" >> $configure
echo "BINEXT =    $binext" >> $configure
echo "LIMOD  =    $limod" >> $configure
echo "LCFSHR =    $lcfshr" >> $configure
echo "LIIMOD =    $liimod" >> $configure
echo "LIFFT =     $lifft" >> $configure
echo "LIMESH =    $limesh" >> $configure
echo "LAPACKLIBS =    $lapacklibs" >> $configure
echo "LAPACKLINK =    $lapacklink" >> $configure
echo "LAPACK_FLIBS =    $lapack_flibs" >> $configure
echo "BLOCKIO =   $blockio"  >> $configure
echo "IMSUBSOBJ = $imsubsobj"  >> $configure
echo "TILTALILIB = $tiltalilib"  >> $configure

echo "BINDIR  = $bin_dir" >> $configure
echo "INSTBINDIR = $inst_bin_dir"  >> $configure
echo "LIBDIR  = $lib_dir" >> $configure
echo "INSTLIBDIR = $inst_lib_dir"  >> $configure
echo "INSTDIR = $inst_dir"  >> $configure
echo "INCDIR  = $inc_dir"          >> $configure
echo "IMOD_PLUGIN_DIR = $inst_plug_dir" >> $configure
echo "MOC = $moc"     >> $configure

# Output the entries for Tilt using GPU or not
#
if ($?CUDA_DIR) then
    echo "NVCC_FLAGS =  $nvcc_flags" >> $configure
    echo "CUDALIBS =    $cudalibs" >> $configure
    echo 'TILTGPUOBJ =  gpubp.$(OBJEXT)' >> $configure
else
    echo 'TILTGPUOBJ =  nogpu.$(OBJEXT)' >> $configure
endif

cat << EOF >> $hconfigure
#define CTRL_STRING "$ctrl_string"
typedef $b3dbyte b3dByte;
typedef $ubyte b3dUByte;
typedef $int16 b3dInt16;
typedef $uint16 b3dUInt16;
typedef $int32 b3dInt32;
typedef $uint32 b3dUInt32;
typedef $float32 b3dFloat;

#endif
 
EOF

#
# Make the directories if needed.
#
mkdir -p $bin_dir
mkdir -p $lib_dir
mkdir -p $libhelp_dir
mkdir -p $inst_bin_dir
mkdir -p $inst_lib_dir
mkdir -p $inst_plug_parent
mkdir -p $inst_plug_dir
mkdir -p $inst_dir/com
mkdir -p $inst_dir/autodoc
mkdir -p $inst_dir/html/man
mkdir -p $inst_dir/man/cat1
mkdir -p $inst_dir/man/cat5

if ($machine != cygwin) then

    #
    # manage qconfigure files
    #
    echo LIBS += -L$lib_dir -liimod -limod -lcfshr -ldiaqt $ltiff -lifft $midasGL >> $midas_qconf
    echo LIBS += -L$lib_dir -lm -llapack -lblas -liimod -lcfshr $ltiff -lifft $lapack_flibs >> $ctfplot_qconf
    echo LIBS += -L$lib_dir -lcfshr >! $qtassist_qconf
    echo LIBS += -L$lib_dir -lcfshr >> $prochunk_qconf
    foreach i ($midas_qconf $ctfplot_qconf)
        echo INCLUDEPATH += $inc_dir >> $i
        echo MOC_DIR = tmp >> $i
        echo OBJECTS_DIR = tmp >> $i
        echo target.path = $inst_bin_dir >> $i
        if ($no_qt3 == false) echo 'QT +=  qt3support' >> $i
    end
    echo target.path = $inst_bin_dir >! $sendevent_qconf
    echo target.path = $inst_bin_dir >> $qtassist_qconf
    echo target.path = $inst_bin_dir >> $prochunk_qconf
    echo -n >! $sourcedoc_qconf


    # echo gives two \\ in tcsh 6.12 under RH 8.0 so use cat
    #
    cat <<EOF >> $imod_qconf
INSTALLS += 3dmodv
MOC_DIR = tmp
OBJECTS_DIR = tmp
INCLUDEPATH += $inc_dir
target.path = $inst_bin_dir
3dmodv.path = $inst_bin_dir
EOF
   if ($no_qt3 == false) echo 'QT +=  qt3support' >> $imod_qconf

    foreach i ($qconf)
        if ($debug == true) then
            echo CONFIG += debug warn_on >> $i
	    set qmflag =  DEBUG
        else
            echo CONFIG += release warn_off >> $i
	    set qmflag =  RELEASE
	endif
        if ($m64notIA == true) echo QMAKE_CXXFLAGS_$qmflag += -m64 >> $i
        if ($m64notIA == true) echo QMAKE_CFLAGS_$qmflag += -m64 >> $i
        if ($openmp == true) then
            echo QMAKE_CXXFLAGS_$qmflag += $openmpFlags >> $i
            echo QMAKE_CFLAGS_$qmflag += $openmpFlags >> $i
            echo QMAKE_LFLAGS_$qmflag += $openmpFlags >> $i
        endif
        if ("$macsdkFlags" != '') echo QMAKE_CFLAGS_$qmflag += $macsdkFlags >> $i
        if ("$macsdkFlags" != '') echo QMAKE_CXXFLAGS_$qmflag += $macsdkFlags >> $i
        if ($qtthread == true) then
            echo CONFIG +=  thread >> $i
            echo DEFINES += QT_THREAD_SUPPORT >> $i
        endif
    end

    # Finish qconfigure install instructions now that inst_bin_dir is defined
    #
    if ($machine != "macosx") then
        cat <<EOF >> $imod_qconf
3dmodv.extra = strip 3dmod ; cd $inst_bin_dir ; \
if [ -e 3dmod ] ; then strip 3dmod ; fi ; \\rm -f 3dmodv imod imodv ; \
ln -s 3dmod 3dmodv ; ln -s 3dmod imod ; ln -s 3dmodv imodv
EOF

        @ i = 0    # Loop on imodsendevent imodqtassist ctfplotter pchunk midas
        while ($i < 5)
            @ i++
            cat <<EOF  >> $qconf[$i]
INSTALLS += strip
strip.path = $inst_bin_dir
strip.extra = $strip $qprog[$i] ; if [ -e $inst_bin_dir/$qprog[$i] ] ; then $strip $inst_bin_dir/$qprog[$i] ; fi
EOF
        end

    else

        # For Mac, copy the run files, also strip (-x needed for 3dmod)
        #
        @ i = 0
        while ($i < 5)  # Loop on imodsendevent imodqtass ctfplot pchunk midas
            @ i++
            cat <<EOF  >> $qconf[$i]
INSTALLS += $qrun[$i]
$qrun[$i].path = $inst_bin_dir
$qrun[$i].extra = \\cp -f $qrun[$i] $inst_bin_dir/$qprog[$i] ; \
$strip $qprog[$i].app/Contents/MacOS/$qprog[$i] ; \
if [ -e $inst_bin_dir/$qprog[$i].app ] ; then $strip $inst_bin_dir/$qprog[$i].app/Contents/MacOS/$qprog[$i] ; fi
EOF
        end

        cat << EOF >> $imod_qconf
3dmodv.extra = \\cp -f runimodv $inst_bin_dir/3dmodv ; \
strip -x 3dmod.app/Contents/MacOS/3dmod ; \
\\cp -f runimod $inst_bin_dir/3dmod ; cd $inst_bin_dir ; \
\\rm -f imod imodv ; ln -s 3dmod imod ; ln -s 3dmodv imodv ; \
if [ -e 3dmod.app ] ; then strip -x 3dmod.app/Contents/MacOS/3dmod ; fi
EOF

    endif

    # Finally run qmake and doctor the Makefiles if necessary
    #
    @ i = 0
    while ($i < $#qdir)
        @ i++
        (cd $qdir[$i] ; qmake $qprog[$i].pro)
        if ($status) then
            echo "ERROR: setup - executing qmake"
            exit 1
        endif
        if ("$qtdel1" != "") then
            sed -e "/$qtdel1/s///g"  -e "/$qtdel2/s///g" \
                -e "/$qtsub1f/s//$qtsub1t/g" \
                < $qdir[$i]/Makefile >! $qdir[$i]/makefile.tmp
            \mv $qdir[$i]/makefile.tmp $qdir[$i]/Makefile
        endif
    end

    # Set ctfplotter to link with fortran compiler in Linux
    #
    if ($machine != "macosx") then
        sed -e "/^LINK.*=/s/=.*/= $lapacklink/" \
            < $ctfplot_dir/Makefile >! $ctfplot_dir/Makefile.tmp
        \mv $ctfplot_dir/Makefile.tmp $ctfplot_dir/Makefile

        # Make the runimodqtapp script for linux only now (used to be Mac too)
        # See version 1.34 for general form, which was csh script
        # Argh.  sh script with if - then screws up csh inside this if/endif
        cat << EOF >! $scripts_dir/runimodqtapp
#!/bin/sh
# THIS FILE WAS GENERATED BY setup
EOF
        echo 'if [ ! -z "$IMOD_QTLIBDIR" ] ; then' >> $scripts_dir/runimodqtapp
        cat << EOF >> $scripts_dir/runimodqtapp
    export LD_LIBRARY_PATH="\${IMOD_QTLIBDIR}:\$LD_LIBRARY_PATH"
fi
prog="\$1"
shift
"\$IMOD_DIR/bin/\$prog" "\$@"
EOF

        chmod a+x $scripts_dir/runimodqtapp
        set gen_scripts = runimodqtapp

        # Set up Qt image plugins to copy
        #
        echo "QTPLUGS_TOCOPY1 = libqjpeg.so libqico.so" >> $configure
    else

        # MACOSX: deferred tasks
        # Set up build line for plugins including 3dmod location and all libs
        # but strip out libtrack to avoid warnings
        #
        set plug_loader = ${source_dir}/${imod_dir}/${imod_target}
        set allqt_libs = `sed -n -e '/-ltrack/s///' -e '/^LIBS /s/^LIBS.*) *//p' $imod_dir/Makefile`
        echo 'MAKELIBSO = $(ARCPP) -bundle -dynamic -bundle_loader '"$plug_loader"' $(LDFLAGS) '"$allqt_libs -o " >> $configure


        echo "QTPLUGS_TOCOPY1 = libqjpeg.dylib libqico.dylib" >> $configure
    endif

    (cd $imod_dir ; \rm -f 3dmodv ; ln -s 3dmod 3dmodv)

    set qt_libs = `sed -n -e '/^LIBS /s/^LIBS.*) *//p' $sendevent_dir/Makefile`

    # Make the script for etomo to source to set library path
    #
    echo '# THIS FILE WAS GENERATED BY setup AND IS MEANT TO BE SOURCED FROM SH/BASH' >! $scripts_dir/setlibpath
    echo 'if [ ! -z "$IMOD_QTLIBDIR" ] ; then' >> $scripts_dir/setlibpath
    echo "    export $ld_lib_var="'${IMOD_QTLIBDIR}:$'"$ld_lib_var" >> $scripts_dir/setlibpath
    echo fi >> $scripts_dir/setlibpath

    echo "GENERATED_SCRIPTS = setlibpath $gen_scripts" >> $configure

endif

# After qmake: remove empty imodhelp and take care of dependencies on version
#
\find $imod_dir -name imodhelp.h -size 0 -exec \rm -f '{}' \;

\find $imod_dir -name 'imod.o*' ! -newer .version -exec \rm -f '{}' \;
\find $imod_dir -name 'imod*_menu.o*' ! -newer .version -exec \rm -f '{}' \;

echo "QTPLUG_SRCDIR1 = imageformats" >> $configure
echo "RGBPROGS = $rgbprogs" >> $configure
echo "LDFFLAGS = $ldfflags" >> $configure
echo "FARFLAGS = $farflags" >> $configure
cat <<EOF  >> $configure
LIBTRACKFLAGS = $libtrackFlags
EOF
echo "MAKESTATICLIB = $makestaticlib" >> $configure
echo "STATICRANLIB = $staticranlib" >> $configure
echo "STATICEXT = $staticext" >> $configure
echo "DLLEXT = $dllext" >> $configure
echo "MAKENMCAR = $makenmcar" >> $configure
echo "NMCAREXT = $nmcarext" >> $configure
echo "FAR = $far" >> $configure
echo "FC = $fcomp"              >> $configure
echo "OPENMP = $openmpFlags"  >> $configure
echo "OPENMPF = $openmpfFlags"  >> $configure
echo "WMODEXT = $wmodext" >> $configure
echo "MAKEWMOD = $makewmod" >> $configure
echo "LWMOD = $lwmod" >> $configure
echo "LSMLMOD = $lsmlmod" >> $configure
echo "JUNIT_HOME = $junit_home" >> $configure
echo "JFCUNIT_HOME = $jfcunit_home" >> $configure
echo "CLASS_SEPARATOR = $class_sep" >> $configure
echo "SOURCEDOC_EXE = $sourcedoc_exe" >> $configure
echo "STRIP = $strip" >> $configure
echo "RM = $rmcmd" >> $configure
if ($no_qt3 == false) set qt_flags = "$qt3_flags"' '"$qt_flags"
echo "QTINCDIR = $qtincdir" >> $configure
echo "QTFLAGS = $qt_flags" >> $configure
if ("$qt4libstocopy" != "") \
    echo "QTLIBSTOCOPY = $qt4libstocopy $assistantcopy $qt3supportcopy" >> $configure

# Take care of Fortran graphics variations
#
if ("$xplax[1]:r" == "qtplax") then
    echo "GRAPHLIBS    = $ldnmncar"' $(IMLIBS)'" $qt_libs $fort_cpplibs" >> $configure
else if ("$xplax[1]" == "xplax.o") then
    echo "GRAPHLIBS    = $ldnmncar"' $(IMLIBS) $(XLIBS)' >> $configure
else
    echo "GRAPHLIBS    = $ldnmncar"' $(IMLIBS)' >> $configure
endif
echo "XPLAX = $xplax" >> $configure

echo "# end of configure"          >> $configure

# Copy makefiles for actual use or for dummy use under Cygwin-gcc

foreach i ($makefile_dirs)
    echo "# THIS FILE WAS COPIED BY SETUP FROM Makefile.$makefile_ext - DO NOT EDIT" >! $i/Makefile
    cat $i/Makefile.$makefile_ext >> $i/Makefile
end

# Take care of .distname file
#
if ($distname != "" && $nogpu != "") then
    set distname = ${distname}_${nogpu}
endif
echo $distname >! .distname

# Take care of .options file - stripping out install entry
# It had to be done with index, and down here, to work with DOS line endings
# This will not work with a quoted multiple -flags entry
#
set optlist = ()
@ ind = 1
while ($ind <= $#inargv)
    if ("$inargv[$ind]" == "-inst" || "$inargv[$ind]" == "-i") then
        @ ind++
    else
        set optlist = ($optlist $inargv[$ind])
    endif
    @ ind++
end
echo $optlist >! .options

# Test for javac and set up makefile for etomo
#
set javacexe = `which javac`
if ($status) then
    echo "The Java SDK is not installed or not on the path, so Etomo will not be built"
    \cp $etomo_dir/Makefile.dummy $etomo_dir/Makefile
else
    echo "# THIS FILE WAS COPIED BY SETUP FROM Makefile.real - DO NOT EDIT" >! $etomo_dir/Makefile
    if ($use_etomo != "" && -e $use_etomo/etomo.jar) then
        echo "Copying etomo.jar from $use_etomo and omitting etomo tests"
        mkdir -p $etomo_dir/jar_dir
        \cp -p $use_etomo/etomo.jar $etomo_dir/jar_dir
        sed -e '/^tests:/s//realtests:/' \
            -e '/^uitestinstall:/s//realuitestinstall:/' \
          $etomo_dir/Makefile.real >> $etomo_dir/Makefile
        echo "tests:" >> $etomo_dir/Makefile
        echo "uitestinstall:" >> $etomo_dir/Makefile
    else
        cat $etomo_dir/Makefile.real >> $etomo_dir/Makefile
    endif
endif

# Test for python and set up makefile in pysrc
#
set pythonexe = `which python`
if ($status) then
    echo "Python is not installed or not on the path, so Python files will be skipped"
    \cp $etomo_dir/Makefile.dummy $pysrc_dir/Makefile
else
    echo "# THIS FILE WAS COPIED BY SETUP FROM Makefile.real - DO NOT EDIT" >! $pysrc_dir/Makefile
    cat $pysrc_dir/Makefile.real >> $pysrc_dir/Makefile
endif

# copy imodconfig.h unless it has not changed
#
if (-e $hconffinal) then
    set diffout = `diff $hconfigure $hconffinal`
    if ($status) then
	\mv $hconfigure $hconffinal
    else
	\rm $hconfigure
    endif
else
    \mv $hconfigure $hconffinal
endif

exit


#
# Usage, help.
#

usage:
echo "setup [options]"
echo "Options are: -help,-h     Print this message."
echo "             -debug,-d    Set up with debug flags."
echo "             -machine,-m  Set target machine to one of: (irix6-n32 | macosx |"
echo "                          rhlinux | amd64linux | itanium | cygwin | cygwin64)"
echo "             -inst,-i     Set installation directory for bin and lib."
echo "                          e.g., /usr/local/IMOD"
echo "             -name        Set architecture name of dist file"
echo "             -swapieee    Make Fortran code on SGI swap IEEE floats"
echo "             -swapvms     Make Fortran code on SGI swap VMS floats"
echo "             -shared      Make libraries shared"
echo "             -no_shared   Make libraries non-shared"
echo "             -tiff        Link with TIFF libraries"
echo "             -no_tiff     Do not try to link with TIFF libraries"
echo "             -no_xlibs    Do not try to make X version of plax routines"
echo "             -compiler,-c Use specified compilers (intel or gnu/gfortran"
echo "                          for rhlinux or mac, gnu for cygwin)"
echo "             -static      Link to static Intel libraries"
echo "             -no_openmp   Do not use OpenMP where available"
echo "             -no_wrap     Do not put executables in bin/realbin and make"
echo "                             script wrappers for Intel on Linux"
echo "             -no_gpu name Build without CUDA even if CUDA_DIR set and"
echo "                             add _name to package name"
echo "             -packg2c     Pack libg2c into distribution (Linux only)"
echo "             -qt3         Include Qt3 support in makefiles"
echo "             -flags       Set flags for compilation"
echo "             -use_etomo   Set directory to get etomo.jar from"
exit


#
#  $Log$
#  Revision 1.68  2010/08/24 19:51:14  mast
#  All of a sudden uname in 10.6 gives x86_64
#
#  Revision 1.67  2010/08/10 18:57:05  mast
#  Add separate archive flags for fortran
#
#  Revision 1.66  2010/07/26 19:30:40  mast
#  Add separate openmp flag for fortran
#
#  Revision 1.65  2010/06/29 21:33:08  mast
#  Add libifft to midas
#
#  Revision 1.64  2010/06/23 17:00:31  mast
#  Added processchunks
#
#  Revision 1.63  2010/05/20 19:36:48  mast
#  Eliminated uac_wrap option
#
#  Revision 1.62  2010/04/23 01:34:53  mast
#  Add separate variable for building libtrack
#
#  Revision 1.61  2010/03/31 03:31:22  mast
#  Exclude vec-reports
#
#  Revision 1.60  2010/03/26 22:54:14  mast
#  Define uac_wrap variable so wrappers only made on request
#  since cygwin 1.7 will not copy script to same dir as .exe
#
#  Revision 1.59  2010/03/24 05:59:06  mast
#  Add libs to qtassist
#
#  Revision 1.58  2010/01/21 03:49:08  mast
#  Update copyright
#
#  Revision 1.57  2010/01/13 21:31:51  mast
#  Make -no_gpu specify the name to provide
#
#  Revision 1.56  2010/01/13 20:37:09  mast
#  Added arg to build without CUDA
#
#  Revision 1.55  2009/12/31 20:57:17  mast
#  Added GPU/CUDA stuff
#
#  Revision 1.54  2009/11/27 16:38:48  mast
#  Fixed variable usage for ctfplotter qconfigure
#
#  Revision 1.53  2009/11/27 15:19:34  mast
#  Fixed usage of lapacklink
#
#  Revision 1.52  2009/11/27 05:56:54  mast
#  Changes for lapack
#
#  Revision 1.51  2009/11/06 18:54:33  mast
#  Add a variable for Qt include directory
#
#  Revision 1.50  2009/06/14 23:51:09  mast
#  Allow gnu as alternative to gfortran
#
#  Revision 1.49  2009/06/14 23:43:46  mast
#  Switch to openmp as default
#
#  Revision 1.48  2009/04/09 18:45:13  mast
#  Output openmp flag to use in specific compiles
#
#  Revision 1.47  2009/04/08 22:22:15  mast
#  Added openmp option and wrapintel option
#
#  Revision 1.46  2009/04/08 20:19:19  mast
#  Added variable for link options on ctfplotter
#
#  Revision 1.45  2009/03/22 19:54:56  mast
#  Use tiff lib variable instead of -ltiff
#
#  Revision 1.44  2009/03/20 21:50:23  mast
#  Changes for Qt 4.5
#
#  Revision 1.43  2009/03/14 00:03:22  mast
#  Change identifier for cygwin builds to not be NT 5*
#
#  Revision 1.42  2009/01/17 05:57:33  mast
#  Qt plugin copying is now universal, not just for mac
#
#  Revision 1.41  2009/01/16 19:05:28  mast
#  Add quotes to program in runimodqtapp in case of space in IMOD_DIR
#
#  Revision 1.40  2009/01/15 16:47:01  mast
#  Qt 4 port
#
#  Revision 1.39  2008/07/29 18:06:22  mast
#  Fixed qt_lib extraction for Ubuntu
#
#  Revision 1.38  2008/01/25 23:26:53  mast
#  Added option for packing libg2c for Linux
#
#  Revision 1.37  2008/01/21 17:44:54  mast
#  Updated copyright year
#
#  Revision 1.36  2007/12/03 16:26:59  mast
#  Remove imod.h link in include
#
#  Revision 1.35  2007/11/20 22:54:31  mast
#  Switched Mac to using individual scripts for fortran qt progs
#
#  Revision 1.34  2007/10/03 21:37:42  mast
#  Added imod_assistant to midas directory
#
#  Revision 1.33  2007/09/20 05:14:08  mast
#  Added fortran lob variable for ctfplotter, edited Makefile only for Linux
#
#  Revision 1.32  2007/09/19 23:45:37  mast
#  Changes for library rearrangements
#
#  Revision 1.31  2007/09/19 22:31:08  mast
#  Incorporated intel compiler static build option
#
#  Revision 1.30  2007/09/18 22:34:57  mast
#  Add assistant lib to ctfplot LIB line
#
#  Revision 1.29  2007/09/18 22:09:10  xiongq
#  Added imod_assistant for ctfplotter
#
#  Revision 1.28  2007/09/18 05:29:36  mast
#  Fixed Mac Qt INSTALL output
#
#  Revision 1.27  2007/09/18 05:10:04  mast
#  Added ctfplotter, rewrote Qt massaging into several loops
#
#  Revision 1.26  2007/08/26 06:55:30  mast
#  Make libhelp directory
#
#  Revision 1.25  2007/08/13 04:58:53  mast
#  Provisional changes for itanic
#
#  Revision 1.24  2006/11/21 00:03:51  mast
#  Added a /bin/rm -f for RM
#
#  Revision 1.23  2006/10/21 16:41:13  mast
#  Removed bad command in 3dmodv.extra
#
#  Revision 1.22  2006/10/20 17:29:17  mast
#  Fixed stripping setup in qconfigure files
#
#  Revision 1.21  2006/10/19 23:50:20  mast
#  Used lists to do qmake, doctor qmake for intel/Linux compiler, add
#  stripping on Linux and Mac
#
#  Revision 1.20  2006/10/03 21:16:01  mast
#  Took care of pysrc Makefile, dummy if no Python
#
#  Revision 1.19  2006/09/12 15:06:06  mast
#  Added libimesh entries
#
#  Revision 1.18  2006/06/29 20:07:26  mast
#  Fixed for Cygwin's new identification of windows-64
#
#  Revision 1.17  2006/06/29 05:10:21  mast
#  Changes for new model libraries
#
#  Revision 1.16  2006/06/22 01:11:04  mast
#  Changes for Intel Mac
#
#  Revision 1.15  2006/01/23 06:40:56  mast
#  Changed copyright year
#
#  Revision 1.14  2006/01/05 17:15:52  mast
#  Screwed up sed command for doctoring etomo makefile
#
#  Revision 1.13  2006/01/03 19:59:15  mast
#  Jumper out uitests if not building etomo
#
#  Revision 1.12  2006/01/03 18:58:32  mast
#  Added jfcunit
#
#  Revision 1.11  2005/12/09 21:24:34  mast
#  Changed dummytiff output to add extension here
#
#  Revision 1.10  2005/12/09 19:09:47  mast
#  Updated help text
#
#  Revision 1.9  2005/11/25 18:49:31  mast
#  Added 64-bit cygwin build
#
#  Revision 1.8  2005/10/16 22:50:01  mast
#  Added use_etomo option to solve problems with chroot builds
#
#  Revision 1.7  2005/09/11 05:44:26  mast
#  Fixed removal of .version-dependent items for Windows
#
#  Revision 1.6  2005/06/10 05:57:45  mast
#  New variables for fortran libs on mac
#
#  Revision 1.5  2005/05/12 05:13:28  mast
#  Added strip variable
#
#  Revision 1.4  2005/03/21 19:19:47  mast
#  Removed libraries from sourcedoc qconfigure
#
#  Revision 1.3  2005/02/28 22:08:53  mast
#  Chnaged default record item length in fortran to 1
#
#  Revision 1.2  2005/02/25 02:46:23  mast
#  Changes for sourcedoc
#
#  Revision 1.1  2005/02/11 04:58:54  mast
#  Created file from setup; gave it the log
#
#  Revision 3.52  2005/01/27 15:33:28  mast
#  Added error check after first qmake run
#
#  Revision 3.51  2005/01/18 22:07:09  mast
#  New variables to configure to get junit tests to work on windows
#
#  Revision 3.50  2005/01/17 19:32:22  mast
#  Cleanup unused architectures
#
#  Revision 3.49  2005/01/06 15:54:15  mast
#  Update copyright
#
#  Revision 3.48  2004/12/22 05:50:19  mast
#  Added qtassist, consolidated management of dependent file before and after
#  qmake is run to avoid duplication between here and cygwin
#
#  Revision 3.47  2004/12/04 19:28:35  mast
#  Added assisstantcleint lib for midas
#
#  Revision 3.46  2004/10/28 03:44:01  mast
#  Add quotes in runimodqtapp
#
#  Revision 3.45  2004/08/31 14:55:51  mast
#  Added explicit -m64 flags for qconfigure files
#
#  Revision 3.44  2004/07/15 17:25:30  mast
#  Added option to use versus not use the included Qt library
#
#  Revision 3.43  2004/06/01 01:14:44  mast
#  Added test plugin build back into default build
#
#  Revision 3.42  2004/04/08 19:44:13  mast
#  Option saving reverted due to cygwin csh bug
#
#  Revision 3.40  2004/04/08 17:03:07  mast
#  Changes for amd64linux and a Qt multithread flag
#
#  Revision 3.39  2004/04/03 21:29:50  mast
#  Rearranged .options code to work with DOS endings in cygwin
#
#  Revision 3.38  2004/04/03 20:00:29  mast
#  Added a .options file to retain options for dist
#
#  Revision 3.37  2004/01/27 05:15:51  mast
#  Added a distribution name
#
#  Revision 3.36  2004/01/20 04:19:13  mast
#  Set copyright year for new year
#
#  Revision 3.35  2003/12/30 17:38:02  mast
#  changes for windows DLLs
#
#  Revision 3.34  2003/11/12 22:05:23  mast
#  Output separate variables for making static lib for tilt
#
#  Revision 3.33  2003/11/08 02:11:58  mast
#  create buildlib earlier for windows and mac to copy files to
#
#  Revision 3.32  2003/11/01 16:38:09  mast
#  put libiimod before libimod, prevent unneeded copying of fbpswitch
#
#  Revision 3.31  2003/10/25 16:46:11  mast
#  set default to dummy out plugins
#
#  Revision 3.30  2003/10/24 04:17:18  mast
#  Changes for Windows/Intel compilation
#
#  Revision 3.29  2003/10/08 17:19:35  mast
#  Create the autodoc directory
#
#  Revision 3.28  2003/09/24 20:38:48  mast
#  Handle GRAPHLIBS and XPLAX output globally with new xplax variable
#
#  Revision 3.27  2003/09/23 21:09:48  mast
#  Added path variable for running qt apps out of Mac .app folders
#
#  Revision 3.26  2003/09/11 19:53:42  mast
#  Added configure variable for generated scripts
#
#  Revision 3.25  2003/09/04 01:08:49  mast
#  Modify identifying string for Windows to include XP
#
#  Revision 3.24  2003/09/03 00:38:36  mast
#  Fix problem with outputting a bash if-then in a cat << EOF
#
#  Revision 3.23  2003/08/25 18:51:16  mast
#  Generated scripts for set library load path before running programs
#
#  Revision 3.22  2003/08/12 22:00:56  mast
#  Removed fix to bug in qmake on Mac Qt 3.1
#
#  Revision 3.21  2003/08/12 04:47:44  mast
#  Remove libdiaqt from GRAPHICS definition and output qtplax.o for PLAX
#
#  Revision 3.20  2003/08/10 01:32:23  mast
#  Added test for java compiler and setting of Etomo Makefile accordingly
#
#  Revision 3.19  2003/05/21 04:35:35  mast
#  Find needed to use -size 0, not -empty
#
#  Revision 3.18  2003/05/12 15:13:44  mast
#  Keeping it from removing imodhelp and making sure 3dmod is recompiled when
#  version changes.
#
#  Revision 3.17  2003/05/03 00:55:20  mast
#  fixing 3dmod links for Mac
#
#  Revision 3.16  2003/04/26 04:26:34  mast
#  fix 3dmodv link
#
#  Revision 3.15  2003/04/25 03:27:19  mast
#  Changes for 3dmod naem change
#
#  Revision 3.14  2003/04/17 19:29:39  mast
#  Changes for Mac
#
#  Revision 3.13  2003/03/29 01:06:19  mast
#  Add variable to add libraries to GRAPHLIBS
#
#  Revision 3.12  2003/03/29 00:24:04  mast
#  rearrange ending statement
#
#  Revision 3.11  2003/03/28 23:52:48  mast
#  Changes for adding Mac OS X and new Qt version of plax
#
#  Revision 3.10  2003/02/28 19:46:18  mast
#  Do not touch imodconfig.h unless it changes
#
#  Revision 3.9  2003/02/28 18:23:26  mast
#  CHanges for cygwin/windows
#
#  Revision 3.8  2003/02/27 20:23:46  mast
#  Entries for Qt version of imodsendevent
#
#  Revision 3.7  2003/02/21 22:14:00  mast
#  Adding type definitions to imodconfig.h
#
#  Revision 3.6  2003/02/10 20:57:47  mast
#  *** empty log message ***
#
#  Revision 3.5.2.8  2003/01/30 05:50:42  mast
#  add variable MAKELIBCPP for.cpp library under RH 8.0
#
#  Revision 3.5.2.7  2003/01/29 06:14:17  mast
#  Fix output to imod's qconfigure under RH 8.0
#
#  Revision 3.5.2.6  2003/01/27 00:38:37  mast
#  fine-tuning the build after pure Qt imod
#
#  Revision 3.5.2.5  2002/12/06 22:08:30  mast
#  *** empty log message ***
#
#  Revision 3.5.2.4  2002/12/06 17:36:51  mast
#  *** empty log message ***
#
#  Revision 3.5.2.3  2002/12/06 17:20:04  mast
#  *** empty log message ***
#
#  Revision 3.5.2.2  2002/12/06 17:16:33  mast
#  *** empty log message ***
#
#  Revision 3.5.2.1  2002/12/05 18:10:04  mast
#  *** empty log message ***
#
#  Revision 3.5  2002/11/05 23:28:44  mast
#  Added variables for the lab name
#
#  Revision 3.4  2002/09/10 03:29:13  mast
#  Eliminate links in include for nimp_source:model.inc and
#  stat_source:statsize.inc, since these are gone from programs
#
#  Revision 3.3  2002/07/30 05:37:26  mast
#  Made new variables for glw install directories so that GLw could be
#  included in a standard build
#
#  Revision 3.2  2002/07/28 21:51:13  mast
#  Set year correctly in copyright
#
#  Revision 3.1  2002/07/26 19:14:30  mast
#  Added copy of machine-specific fast backprojection switching file
#
#  Revision 3.0  2001/11/29 17:25:14  rickg
#  *** empty log message ***
#
#  Revision 1.3  2001/11/28 23:34:31  rickg
#  Updated mkdir command to mkdir -p
#
#  Revision 1.2  2001/11/28 15:45:06  mast
#  Changes to make install directory root available to man, html, com Makefiles
#
