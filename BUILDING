This file has instructions for building and installing IMOD on supported
architectures, with as much ancillary information as possible.

In general, IMOD is not easy to build, and our focus is on providing binary
packages that will run on a reasonably wide range of systems rather than on
making IMOD easier to build.  Our intention in releasing IMOD source is to
support programming with IMOD, not to replace the use of binary packages for
installation of IMOD.  If you are system administrator who habitually builds
packages, please try to use the appropriate binary packages first.  Aside from
saving the build step, the packages are a lot easier to upgrade.

GENERAL NOTES

IMOD was ported to version 4 of QT with Qt 4.4.3.  One feature was
subsequently disabled conditionally to allow it to build with Qt 4.3 (colored
error messages in the 3dmod Info window).  Higher levels of Qt,
up to 4.6.2, have been used for 64-bit builds under Mac OS X.  If you have Qt
4.3 on your system already you can safely build with that.  If you need to
build Qt, it is probably safe to use 4.6 on any architecture.

Several strategies were used when building Qt.  One was to build in a local
directory and then run "make install".  With later versions on Mac, this
became problematic, and the strategy there has been to build in a local
directory, with the "install directory" being a link in /usr/local/Trolltech
to the local directory.  In these cases, "make install" was not run.  Below we
show the commands that we have used for building Qt, but this are just
examples and not authoritative statements.  You will probably be better off
following Qt instructions.

In all architectures, environment variable QTDIR must be defined to be the
directory containing at least Qt/bin, and $QTDIR/bin must be on the path.

The setup scripts modify some or all of the Makefiles produced by qmake.
On Windows, this is essential to make them work with cygwin make; elsewhere it
is needed for getting ctfplotter to link correctly and to adjust some compiler
settings.  This means that if you change a Qt project file, you should always
regenerate the Makefile by running setup rather than by running qmake in the
program directory.

In order to build with CUDA support, environment variable CUDA_DIR must be
defined to point to the directory where the CUDA toolkit is installed.  The
build computer itself need not be CUDA-capable or have drivers supporting
CUDA.  So far, CUDA 2.1, 2.2, 2.3, and 3.1 have been used on various systems;
3.1 required some nvcc compiler flag changes and library location changes.
These changes have been made for Mac OS X in IMOD 4.1, but not until IMOD
4.2.5 for 64-bit Linux.  CUDA support for 64-bit Mac can be built only with
CUDA 3.1 and only under OS X 10.6.

The setup scripts automatically configure to use OpenMP in cases where they
think it is available.

You need a Sun/Oracle version of the Java Development Kit to build eTomo.
Version 1.5 or higher is required and there should be no problems using the
latest version.  On a 64-bit system, it does not matter if this is 32 or
64-bit. This will already be available on Mac; it may be available in some
versions of Linux, otherwise you will have to install a package from Sun; and
on Windows you will have to install a package from Sun.  You must place the
bin of the JDK on your path.

setup has a number of options that can be listed with "setup -h".  Currently
the main body of the setup code is in setup2 because that needed to be
converted to Unix line endings.  To do most of the system-specific work, 
setup sources an appropriate file in the machines directory: rhlinux, macosx,
or cygwin.

The install commands will build .1 and .html versions of all man pages and
install them in man and html/man directories.  If the install directory is
omitted, then installation will be into bin, lib, man, and html
directories under the top-level source directory.  This is fine for personal
use.


BUILDING ON LINUX

To build IMOD under FC4 and RHEL5, Qt was unpacked in a local directory, and
built using gcc/g++ with the commands:

./configure -prefix /usr/local/Trolltech/Qt-4.4.3-FC4 -fast -no-exceptions \
-no-phonon -no-phonon-backend -no-svg -no-webkit -no-rpath -nomake demos \
-nomake examples
make
make install

Qt 4.3 has been used on both Fedora 11 and Ubuntu 8.1.  setup will detect the
lack of a QTDIR/include and set its Qt include variable to /usr/include (the
location on FC11) if /usr/include/Qt exists, otherwise to /usr/include/qt4
(location on Ubuntu).

QTDIR must be defined, $QTDIR/bin must be on the path, and $QT_DIR/lib must
be on the LD_LIBRARY_PATH.

The compilers can be either gcc and gfortran, or the Intel C++ and Fortran
compilers (only version 10 has been configured so far).  If the 
Intel compilers are on the path, they will be used by default; this can be
overriden with the "-c gnu" or "-c gfortran" setup option.  Either way will
support OpenMP and CUDA for "current" compilers (e.g., gcc 4.1.2 in RHEL5).

To build and install for general use:

1. "./setup -i [install directory]" to set the install directory.

2. "make" to make all the programs.

3. "make install"

4. "installqtlibs" to copy install files to install directory.  If you
   ran "setup" initially with the -packqt flag (which you should do if you 
   built against a Qt library not on the users' library path), "installqtlibs"
   will also copy the Qt library.

The last step can be skipped for a personal installation in the source
directory.


BUILDING ON MAC OS X

Generally, you should have the latest version of Xcode tools for your system
installed; but see the notes below about using an older version in order to
install an integrated gfortran.


Qt for Mac OSX

Qt 4.4.3 for 32-bit Mac was built in /usr/local/Trolltech on a 32-bit Mac with:
./configure -prefix /usr/local/Trolltech/Qt-4.4.3 -fast -no-exceptions \
-no-phonon  -no-phonon-backend -no-webkit -no-rpath -no-framework -no-libtiff \
-qt-libpng -qt-libmng -qt-libjpeg -continue
make 
make install

Qt 4.6.2 for 64-bit Mac has been built with gcc/g++ by unpacking in a local
directory, running:
setenv QMAKESPEC macx-g++
making a link /usr/local/Trolltech/Qt-4.6.2  pointing to the local directory,
running
./configure -prefix /usr/local/Trolltech/Qt-4.6.2 -fast -no-exceptions \
-no-phonon -no-phonon-backend -no-webkit -no-rpath -no-libtiff -qt-libpng \
-qt-libmng -qt-libjpeg -continue -cocoa -arch x86_64 -release -nomake demos \
-nomake examples

and skipping the install.  It can also be built in place, and there it tells
you not to do "make install".

To build IMOD, QTDIR must be defined, $QTDIR/bin must be on the path, and
$QT_DIR/lib must be on the DYLD_LIBRARY_PATH.


TIFF and other libraries for Mac OSX

You should build and install TIFF libraries from source; installing JPEG is
optional to allow JPEG compression to be used in TIFF files (libz is on the
Mac already).
http://www.remotesensing.org/libtiff/ is the right site to go to for TIFF;
We are now using tiff-3.9.4 and jpeg-8b from http://www.ijg.org/.
We use static libraries which are linked into libiimod.dylib.  When we
tried to use dynamic libraries, 3dmod and etomo would not run because a system
library tried to call back into the libtiff and libjpeg that we had placed on 
the DYLD_LIBRARY_PATH.

On 32-bit Mac, to install TIFF alone it is simply
./configure
make
sudo make install

To install JPEG and TIFF, do those steps for jpeg first.  Then configure
TIFF with
./configure --with-jpeg-include-dir=/usr/local/include \
--with-jpeg-lib-dir=/usr/local/lib
make
sudo make install

On 64-bit Mac you may need to set flags to obtain a 64-bit build.  On OS X
10.5 this is necessary, on OS X 10.6 Server, it is not.  You need to
define environment variables both CFLAGS and CXXFLAGS to be '-g -O2 -m64' 

For jpeg:
./configure
make 
sudo make install

For TIFF,
and CXXFLAGS
./configure --with-jpeg-include-dir=/usr/local/include \
--with-jpeg-lib-dir=/usr/local/lib
make
sudo make install

It is possible to have both 32-bit and 64-bit versions of both static
libraries in  /usr/local/lib by renaming the 64-bit versions to libtiff64.a
and libjpeg64.a.

Compilers for Mac OSX

You need to have a Fortran compiler.  Two options are the Intel compiler
(version 10 or 11 recommended currently) and a version of gfortran from
http://r.research.att.com/tools/
(There is a nasty comment in the latter site about avoiding gfortran from
http://hpc.sourceforge.net/, which unfortunately matches our own experience.).
There are two choices here: install a free-standing gfortran into /usr/local,
or install a gfortran that is integrated into the gcc installation.  The
former is simpler but does not allow OpenMP to be used; the latter does allow
OpenMP to be used if you have gcc 4.2.  The build scripts assume that if gcc
4.2 is present and gfortran is being used, that the gfortran is integrated and
OpenMP can be used.  If you have gcc 4.2 but installed the free-standing
gfortran, you need to add the -no_openmp option to the setup command.

The integrated gfortran is currently available only to match older versions of
Xcode.  Specifically, for GNU Fortran 4.2.4 for 10.6, you should have Xcode
3.2.2 to use the package gfortran-42-5659.pkg.  If you want to link with
dynamic rather than static libgfortran, you should have XCode 3.2.1 to use
the packages gfortran-42-5646.pkg and libgfortran-4.2.4-5646.tar.gz.

The setup scripts provide for three options for compilers on Intel Macs:
Native gcc     gfortran       (OpenMP works if gcc 4.2 and gfortran integrated)
Native gcc     Intel Fortran  (OpenMP works if gcc 4.2 and gfortran integrated)
Intel C++      Intel Fortran  (OpenMP works)

Only the first option is available on PowerPC Macs.
Only the first and second options are available under OS X 10.6.  Version 10
of Intel compilers will not install on 10.6, and Version 11 of the Intel C++
compiler currently will not build Qt programs.

On Intel Mac, the setup script will try to do the right thing if you have the
true location of one or both Intel compilers on your path (i.e., the presence
of links in /usr/bin is ignored).  Namely, if the true location of the Intel
C++ compiler is on the path, it will assume Intel Fortran is to be used
(option 3); if only the true location of the Intel Fortran compiler is on the
path, it will use that and gcc (option 2); if neither is on the path it will
use gnu compilers.  These defaults can be overriden by "-c intel", which
forces it to try to use both Intel C++ and Fortran compilers; "-c ifort" which
forces it to use Intel Fortran but use Intel C++ only if its true location is
on the path; or "-c gnu" or "-c gfortran", which forces it to gnu compilers.

The procedure is now:

1. "./setup -i [install directory]" to set the install directory.

2. "make" to make all the programs.

3. "make install"

4. "./installqtlibs" to copy Qt library and install files to install directory


BUILDING UNDER CYGWIN/WINDOWS WITH INTEL COMPILERS

The build under Windows requires Microsoft Visual Studio .NET, 2008 preferred.
The 2008 version is required in 64-bit Windows; the 2003 version can be used
to build a personal version in 32-bit Windows XP, with no CUDA support and not
suitable for distribution to higher OS versions.

This build also requires Intel Fortran and C++ compilers.
 
The PATH, LIB, and INCLUDE environment variables must be set with the entries
that they acquire when running the startup scripts for Microsoft Visual Studio
(obtained by running the menu entry to get a command prompt) and the two Intel
compilers (obtained with the two menu entries for getting the compiler
environment).

On some machines, the Intel compilers require a setting for the TMP or TEMP
variable to a location that you can write in, such as C:\cygwin\usr\tmp


Qt for Windows

Qt was built by unzipping the Qt source package in C:/Qt and renaming it to
4.4.3.  QMAKESPEC can be set to win32-icc in 32-bit Windows but fails in
64-bit, so leave it unset there.  Qt was configured and built with:

./configure -release -fast  -no-exceptions  -qt-zlib  -qt-gif  -qt-libpng -qt-libmng\
-no-libtiff -qt-libjpeg  -no-phonon -no-phonon-backend -no-webkit
nmake


TIFF and Other Libraries for Windows

TIFF include files and an import library are contained in the IMOD package (in
sysdep/win) and the software will build without the TIFF library present, but
installqtlib will not run.  For 32-bit, you can just install TIFF libraries
from GnuWin32: http://gnuwin32.sourceforge.net/packages/tiff.htm You want the
ordinary version rather than the one using the Win32 API.  You can get the
TIFF binaries in the "Complete packages, except sources".  Version 3.5.7 is
the source of the import library packaged in the IMOD.

As of version 4.2.9, IMOD is built with tiff-3.9.4 from
http://www.remotesensing.org/libtiff/, jpeg-8b from http://www.ijg.org/, and
zlib-1.2.5 from http://www.zlib.net/.  These packages should all be unpacked
in a common directory without spaces in its path.  For each package, either
rename the package directory or create a link so that the common directory
contains subdirectories named "tiff", "jpeg", and "zlib".  Define an
environment variable TIFF_JPEG_ZLIB with the location of this directory, and
IMOD setup will be able to find all of the needed files from the packages.

ZLIB:
In win32/Makefile.msc:
1) Add inffast.obj to the OBJ line (unless it is there in the version you
have)
2) Modify SHAREDLIB to be imodzlib1.dll
(This is following the documentation's strong suggestion that a 
DLL linked against a  MSVCRT from Visual Studio instead of MSVCRT.DLL be given
a different name)
nmake /f win32/Makefile.msc

JPEG:
cp jconfig.vc jconfig.h
cp makefile.vc Makefile

modify jmorecfg.h to have:
#define GLOBAL(type)          __declspec(dllexport) type
#define EXTERN(type)          extern __declspec(dllexport) type

modify Makefile:
1) Add /D_CRT_SECURE_NO_WARNINGS to CFLAGS
2) Add libjpeg.dll to the "all:" line and
3) Add
libjpeg.dll: $(LIBOBJECTS)
        $(RM) libjpeg.dll libjpeg_i.lib
        link /DLL /OUT:libjpeg.dll /IMPLIB:libjpeg_i.lib $(LIBOBJECTS)

nmake /f Makefile nodebug=1

TIFF:
modify nmake.opt:
#
JPEG_SUPPORT    = 1
JPEGDIR         = "<Full path to common directory>/jpeg-8b"
JPEG_INCLUDE    = -I$(JPEGDIR)
JPEG_LIB        = $(JPEGDIR)/libjpeg_i.lib

#
ZIP_SUPPORT     = 1
ZLIBDIR         = "<Full path to common directory>/zlib-1.2.5"
ZLIB_INCLUDE    = -I$(ZLIBDIR)
ZLIB_LIB        = $(ZLIBDIR)/zdll.lib

and add /D_CRT_NONSTDC_NO_DEPRECATE to OPTFLAGS

nmake /f Makefile.vc

For 64-bit windows, open a Visual Studio x64 Win64 Command Prompt through
Visual Studio Tools and use all of the same commands, expect leave off the
"nodebug=1" for JPEG.


Make Program Problem on Windows

Current versions of Cygwin do not support the Windows-style paths that appear
in the IMOD Makefiles (some of them because qmake puts them there; some
because of variables like INCDIR).  Since 2006, we have been using a patched
version that was available when 3.8.1 was released.  Miraculously, this still
works in Cygwin 1.7.  The alternative is apparently to use a MinGW version of
make.


1. "./setup -i [install directory]" to set the install directory.

2. "make" to make everything

3. "make install"

4. "./installqtlib" to copy the Qt, Tiff, and Intel DLLs to the install bin,
install manifests, and copy the MSVC runtime to the install bin too.


BUILDING UNDER CYGWIN/WINDOWS WITH CYGWIN COMPILERS AND VISUAL STUDIO

Originally, IMOD was built with Cygwin compilers, except that the C libraries
and Qt-related components were built with Visual Studio.  The ability to build
with Cygwin compilers and to build anything besides 3dmod, midas and static C
libraries has not been maintained.

Basic Cygwin development packages, libtiff-devel and Microsoft Visual Studio
are required for this build.  A development version of Qt must be installed.
To build libraries, 3dmod, and midas:

1. "setup -c gnu" to set the compiler.

2. In Visual Studio, open the solution libimod/libimod.sln and build release
   versions of all six libraries.

3. Open the workspace imod/3dmod.dsw and confirm the conversion of 3dmod.dsp
to the current version.  Then under 3dmod properties, in C++ preprocessor, add
TRACK_PLUGIN to the definitions, and in Linker Input, remove
libtrack.lib. Under Sources - linegui.cpp, select properties and exclude it
from the build. Under Generated filed - moc_linegui.cpp, select properties and
exclude it from the build.  3dmod should now build.

4. Open the Qt-generated project file midas/midas.dsp and confirm the
conversion.  Build midas.
