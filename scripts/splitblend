#! /bin/csh -f
# splitblend: splits blend command file into multiple files to do in chunks
#
#  $Id$
#
#  Log at end

set pn = splitblend
@ numproc = 4
@ maxslices = 50
@ targetratio = 4
@ targetslabs = 0

if ($#argv < 1) then
cat <<EOF
Usage: $pn [options] command_file
   Produces multiple command files for running Tilt in parallel
   Options:
      -n #   Target or expected number of machines (default $numproc)
      -m #   Maximum number of sections per chunk (default $maxslices)
      -t #   Target # of chunks (default $targetratio times # of machines)
      -c     Write chunks to separate files, not directly to single output file
EOF
exit 0
endif

setenv LC_NUMERIC C

if ($?IMOD_DIR) then
    setenv PATH "$IMOD_DIR/bin:$PATH"
endif

set direct = 1

while ($#argv > 1)
  switch ($argv[1])
    case -n:
      @ numproc = $argv[2]
      shift; shift
      breaksw

    case -m:
      @ maxslices = $argv[2]
      shift; shift
      breaksw

    case -t:
      @ targetslabs = $argv[2]
      shift; shift
      breaksw

    case -c:
      set direct = 0
      shift
      breaksw

    default:
      echo "ERROR: $pn - unrecognized option $argv[1]"
      exit 1
  endsw
end

set rootname = $argv[1]:r
set comname = $rootname.com
set setupcom = $rootname-setup.com
set setuplog = $rootname-setup.log
if (! -e $comname) then
    echo "ERROR: $pn - command file $comname does not exist"
    exit 1
endif

# Set target slabs if not entered
#
if ($targetslabs == 0) @ targetslabs = $targetratio * $numproc

# Get name of output file
set outline = `sed -n -e '/	/s// /g' -e '/[[:cntrl:]]/s///g' -e '/^ *ImageO/p' $comname`
if ($#outline < 2) then
    echo "ERROR: $pn - Cannot find name of output file in $comname"
    exit 1
endif
set outfile = $outline[2]

# Make first setup file and run it
sed -e '/^ *ImageO/a\\
ParallelMode'"  $targetslabs $maxslices"'\
' $comname >! $setupcom
vmstocsh $setuplog < $setupcom | csh -ef
if ($status) then
    grep ERROR: $setuplog
    echo "ERROR: $pn - Cannot split up this command file"
    exit 1
endif
set subsets = `sed -n -e '/[[:cntrl:]]/s///g' -e '/SubsetToDo */s///p' $setuplog`

if ($#subsets < 1) then
    echo "ERROR: $pn - Cannot find subset lists in $setuplog"
    exit 1
endif
set numslabs = $#subsets


# Remove any previous files now in case the number has changed or 
# direct/indirect mode
#
\find . -type f -name  "$rootname-[0-9]*.*" -exec rm -f "{}" \;
\rm -f $rootname-start.com $rootname-finish.com

set outroot = $outfile:r
set outext = $outfile:e
set templist = ()
set outsed = $outfile
set mode = -3
if ($direct) then
    set mode = -2
    set outsed = gibberish
    set thiscom = $rootname-start.com
    sed -e '/^ *ImageO/a\\
ParallelMode  -1 0\
' $comname >! $thiscom
    cat <<EOF >> $thiscom
\$sync
EOF
endif

@ num = 0
while ($num < $numslabs)
    @ num++
    set numtext = $num
    if ($num < 10) then
        set numtext = 00"$numtext"
    else if ($num < 100) then
        set numtext = 0"$numtext"
    endif
    set thiscom = $rootname-$numtext.com
    set tempname = $outroot-$numtext.$outext
    set templist = ($templist $tempname)

    # Set up the command file
    #
    cat <<EOF >! $thiscom
\$sync
EOF
    sed -e "/$outsed/s//$tempname/" \
        -e '/^ *ImageO/a\\
ParallelMode'"  $mode"' 0\\
SubsetToDo'"  $subsets[$num]"'\
' $comname >> $thiscom
    cat <<EOF >> $thiscom
\$echo CHUNK DONE
EOF
end

set finish = $rootname-finish.com
if (! $direct) then
    cat <<EOF >! $finish
\$newstack -StandardInput
OutputFile $outfile
EOF
    @ num = 0
    while ($num < $numslabs)
        @ num++
        echo "InputFile $templist[$num]" >> $finish
    end
    cat <<EOF >> $finish
\$\\rm -f $rootname-[0-9]*.* $outroot-[0-9]*.$outext
EOF
else
    cat <<EOF >! $finish
\$collectmmm pixels= $rootname $numslabs $outfile
\$\\rm -f $rootname-[0-9]*.*
EOF
endif
\rm -f $setupcom $setuplog

echo "Command files for $numslabs chunks created and ready to run with:"
echo "  processchunks machine_list $rootname"
exit 0

#  $Log$
#
