#! /bin/csh -f
#
#  $Id$
#
#  Log at end
#

nohup

# default setting for entering flipped versus unflipped coordinates, index
# versus imod coordinates
set flipyz = "0"
set index = "0"
set pn = "trimvol"
set doflip = "0"
set fliparg = ""
set sxarg = ""
set syarg = ""
set dorot = "0"
set adjust = "-ori"

if ($#argv == 0)then
  echo "Usage: $pn [options] input_file output_file"
cat <<EOF
  Can trim out a subset of a volume, determine scaling, and convert to bytes
  Options:
     -x start,end    Starting and ending X coordinate of region to cut out
     -y start,end    Starting and ending Y coordinate of region to cut out
     -z start,end    Starting and ending Z coordinate of region to cut out
     -nx x_size      Size to cut out in X, around center X coordinate
     -ny y_size      Size to cut out in Y, around center Y coordinate
     -nz z_size      Size to cut out in Z, around center Z coordinate
     -c black,white  Contrast levels for scaling and converting to bytes
     -s start,end    Starting and ending slices (section # in flipped volume)
                           to use to find contrast levels for scaling to bytes
     -sz start,end   Starting and ending slices to use to find contrast
                           (Coordinate flipping controlled by -f/-u)
     -sx start,end   Starting and ending X coordinates to use to find contrast
     -sy start,end   Starting and ending Y coordinates to use to find contrast
     -mm min,max     New minimum and maximum for scaling to integers
     -yz             Flip Y and Z in output volume
     -rx             Rotate volume by -90 around X axis
     -i              Treat as index coordinates (numbered from 0) rather than
                           as 3dmod coordinates (numbered from 1, the default)
     -f              Treat coordinates as coming from a flipped volume
     -k              Keep origin the same in output from Newstack (legacy)
     -P              Output process ID

  Notes:
     You cannot use both -x and -nx; -y and -ny; -z and -nz; or -c and -s.
     If a size or starting and ending coordinates are not entered, the default
            is the full size for that dimension.
     If you use the -c, -s, or -sz option, the output file will be bytes; if
            you use the -mm option the output will be integers, otherwise
            the output file will have the same mode as the input file.
EOF
  exit 0
endif

set tmpdir = /usr/tmp
if ($?IMOD_DIR) then
    setenv PATH "$IMOD_DIR/bin:$PATH"
    if (-e "$IMOD_DIR/bin/settmpdir") source "$IMOD_DIR/bin/settmpdir"
endif

while ($#argv > 2)
  switch ("$argv[1]")
    case -x:
      set ix = $argv[2]
      shift; shift
      breaksw
    case -y:
      set iyt = $argv[2]
      shift; shift
      breaksw
    case -z:
      set izt = $argv[2]
      shift; shift
      breaksw
    case -nx:
      set inx = $argv[2]
      shift; shift
      breaksw
    case -ny:
      set inyt = $argv[2]
      shift; shift
      breaksw
    case -nz:
      set inzt = $argv[2]
      shift; shift
      breaksw
    case -c:
      set contrast = $argv[2]
      shift; shift
      breaksw
    case -s:
      set slices = $argv[2]
      set fliparg = "-flip"
      shift; shift
      breaksw
    case -sx:
      set sx = $argv[2]
      shift; shift
      breaksw
    case -sy:
      set sy = $argv[2]
      shift; shift
      breaksw
    case -sz:
      set zslices = $argv[2]
      shift; shift
      breaksw
    case -mm:
      set inmm = $argv[2]
      shift; shift
      breaksw
    case -yz:
      set doflip = "flipyz"
      shift
      breaksw
    case -rx:
      set dorot = "1"
      shift
      breaksw
    case -f:
      set flipyz = "1"
      shift
      breaksw
    case -i:
      set index = "1"
      shift
      breaksw
    case -k:
      set adjust = ""
      shift
      breaksw
    case -P:
      echo2 Shell PID: $$
      shift
      breaksw
    default:
      echo "ERROR: $pn - bad argument $argv[1]"
      exit 1
  endsw
end

if ($#argv < 2) then
    echo "ERROR: $pn - Command needs both input and output file names"
    exit 1
endif
if (! -e "$argv[1]")then
  echo "ERROR: $pn - input file $argv[1] does not exist"
  exit 1
endif

if ($?zslices) then
    if ($?slices) then
        echo "ERROR: $pn - cannot use both -sz and -s options"
        exit 1
    endif
    set slices = $zslices
    if ($flipyz) set fliparg = "-flip"
endif

if ($?slices && $?contrast) then
    echo "ERROR: $pn - cannot use both -c and -s or -sz options"
    exit 1
endif

if (($?slices || $?contrast) && $?inmm) then
    echo "ERROR: $pn - cannot use -mm with the -c, -s, or -sz options"
    exit 1
endif

if ($?ix && $?inx) then
    echo "ERROR: $pn - cannot use both -x and -nx options"
    exit 1
endif

if ($?iyt && $?inyt) then
    echo "ERROR: $pn - cannot use both -y and -ny options"
    exit 1
endif

if ($?izt && $?inzt) then
    echo "ERROR: $pn - cannot use both -z and -nz options"
    exit 1
endif

if ($dorot) then
    if ($doflip != "0") then
        echo "ERROR: $pn - cannot use both -yz and -rx options"
        exit 1
    endif
    set doflip = "rotx"
endif

if ($flipyz == "0") then
    if ($?iyt) then
	set iy = $iyt
    endif
    if ($?izt) then
	set iz = $izt
    endif
    if ($?inyt) then
	set iny = $inyt
    endif
    if ($?inzt) then
	set inz = $inzt
    endif
else
    if ($?iyt) then
	set iz = $iyt
    endif
    if ($?izt) then
	set iy = $izt
    endif
    if ($?inyt) then
	set inz = $inyt
    endif
    if ($?inzt) then
	set iny = $inzt
    endif
endif

set nxyz =  `header -si "$argv[1]" | sed '/[[:cntrl:]]/s///g'`

@ nx = $nxyz[1]
@ ny = $nxyz[2]
@ nz = $nxyz[3]

@ xsize = $nx
@ ysize = $ny
@ xoffset = 0
@ yoffset = 0

if ($?inx) then
    @ xsize = $inx
    if ($xsize <= 0 || $xsize > $nx) then
	echo "ERROR: $pn - illegal x size in -nx $inx"
	exit 1
    endif
endif

if ($?ix) then
    set xentry = `echo $ix | sed 's/,/ /g'`
    if ($#xentry < 2) then
	echo "ERROR: $pn - incorrect argument -x $ix: needs two values"
	exit 1
    endif
    @ xst = $xentry[1]
    @ xnd = $xentry[2]
    if ($index == "0") then
	@ xst--
	@ xnd--
    endif
    if ($xst < 0 || $xnd >= $nx || $xst > $xnd) then
	echo "ERROR: $pn - coordinates out of range for file in -x $ix"
	exit 1
    endif

    @ xsize = $xnd + 1 - $xst
    @ xoffset = ($xst + $xnd + 1 - $nx) / 2
endif

set inlet = "y"
if ($flipyz == "1") set inlet = "z"

if ($?iny) then
    @ ysize = $iny
    if ($ysize <= 0 || $ysize > $ny) then
	echo "ERROR: $pn - illegal $inlet size in -n$inlet $iny"
	exit 1
    endif
endif

if ($?iy) then
    set yentry = `echo $iy | sed 's/,/ /g'`
    if ($#yentry < 2) then
	echo "ERROR: $pn - incorrect argument -$inlet $iy: needs two values"
	exit 1
    endif
    @ yst = $yentry[1]
    @ ynd = $yentry[2]
    if ($index == "0") then
	@ yst--
	@ ynd--
    endif
    if ($yst < 0 || $ynd >= $ny || $yst > $ynd) then
	echo "ERROR: $pn - $inlet coordinates out of range for file in -$inlet $iy"
	exit 1
    endif

    @ ysize = $ynd + 1 - $yst
    @ yoffset = ($yst + $ynd + 1 - $ny) / 2
endif

set inlet = "y"
if ($flipyz == "0") set inlet = "z"
set secout = ""

if ($?inz) then
    @ zsize = $inz
    if ($zsize <= 0 || $zsize > $nz) then
	echo "ERROR: $pn - illegal $inlet size in -n$inlet $inz"
	exit 1
    endif
    @ zst = ($nz - $zsize) / 2
    @ znd = $zst + $zsize - 1
    set secout = "-sec $zst-$znd"
endif

if ($?iz) then
    set zentry = `echo $iz | sed 's/,/ /g'`
    if ($#zentry < 2) then
	echo "ERROR: $pn - incorrect argument -$inlet $iz: needs two values"
	exit 1
    endif
    @ zst = $zentry[1]
    @ znd = $zentry[2]
    if ($index == "0") then
	@ zst--
	@ znd--
    endif
    if ($zst < 0 || $znd >= $nz || $zst > $znd) then
	echo "ERROR: $pn - $inlet coordinates out of range for file in -$inlet $iz"
	exit 1
    endif
    set secout = "-sec $zst-$znd"
endif

if ($?sx) then
    set xentry = `echo $sx | sed 's/,/ /g'`
    if ($#xentry < 2) then
	echo "ERROR: $pn - incorrect argument -sx $sx: needs two values"
	exit 1
    endif
    @ xst = $xentry[1]
    @ xnd = $xentry[2]
    if ($index == "0") then
	@ xst--
	@ xnd--
    endif
    set sxarg = "-xminmax $xst,$xnd"
endif

if ($?sy) then
    set yentry = `echo $sy | sed 's/,/ /g'`
    if ($#yentry < 2) then
	echo "ERROR: $pn - incorrect argument -sy $sy: needs two values"
	exit 1
    endif
    @ yst = $yentry[1]
    @ ynd = $yentry[2]
    if ($index == "0") then
	@ yst--
	@ ynd--
    endif
    set syarg = "-yminmax $yst,$ynd"
endif

set contout = ""
if ($?contrast) then
    set contout = "-mo 0 -co $contrast"
endif

if ($?inmm) then
    set mmentry = `echo $inmm | sed 's/,/ /g'`
    if ($#mmentry < 2) then
	echo "ERROR: $pn - incorrect argument -mm $inmm: needs two values"
	exit 1
    endif
    set contout = "-mo 1 -sc $inmm"
endif

set newstout = "$argv[2]"
if ($doflip != "0") set newstout = "$argv[1].tmp.$$"

if ($?slices) then
    set contslice = `echo $slices | sed 's/,/ /g'`
    if ($#contslice < 2) then
	echo "ERROR: $pn - incorrect argument -s $slices"
	exit 1
    endif
    @ slicest = $contslice[1]
    @ slicend = $contslice[2]
    @ slicelim = $nz
    if ("$fliparg" != "") @ slicelim = $ny
    if ($slicest < 1 || $slicend > $slicelim || $slicest > $slicend) then
	echo "ERROR: $pn - slices out of range for file in -s $slices"
	exit 1
    endif

    set tmpfil = "$tmpdir/trimvol.$$"
    onintr clean
    echo "Determining byte scaling of $argv[1] ..."
    echo "findcontrast -slice $slicest,$slicend $fliparg $sxarg $syarg $argv[1]"
    findcontrast -slice $slicest,$slicend $fliparg $sxarg $syarg \
           "$argv[1]" > "$tmpfil"
    if ($status) then
        grep 'ERROR:' "$tmpfil"
        goto clean
    endif
    cat "$tmpfil"
    set bwout = `sed -n -e '/[[:cntrl:]]/s///g' -e '/Implied/s/Imp.*are *//p' "$tmpfil"`
    \rm -f "$tmpfil"
    if ($#bwout != 3) then
	echo 'ERROR: $pn - findcontrast failed to return scaling values'
	exit 1
    endif

    set contout = "-mod 0 -con $bwout[1],$bwout[3]"
endif

newstack -siz $xsize,$ysize -off $xoffset,$yoffset $adjust $contout $secout "$argv[1]" "$newstout"

if ($status) goto clean

if ($?slices) then
    echo " "
    echo "Contrast black/white levels determined from file were $bwout[1],$bwout[3]"
endif
echo " "
echo "The newstack command was:"
echo "newstack -siz $xsize,$ysize -off $xoffset,$yoffset $adjust $contout $secout $argv[1] $newstout"

if ($doflip != "0") then
    echo "Running clip $doflip ..."
    clip $doflip "$newstout" "$argv[2]"
    if ($status) goto clean
    \rm -f "$newstout"
endif

exit 0

clean:
\rm -f "$tmpfil"
exit 1

#  $Log$
#  Revision 3.18  2007/12/06 21:35:55  mast
#  Added uption to suppress origin adjustment
#
#  Revision 3.17  2007/12/05 16:29:26  mast
#  Added option to newstack command to adjust origin
#
#  Revision 3.16  2007/09/11 22:31:14  mast
#  Added integer scaling option
#
#  Revision 3.15  2006/09/25 16:26:14  mast
#  Made work with space in IMOD_DIR and spaces in file names
#
#  Revision 3.14  2006/08/15 21:15:03  mast
#  Switched -sx and -sy inputs to be numbered from 1 unless -i given
#
#  Revision 3.13  2006/06/23 17:07:17  mast
#  Added option for rotation around X
#
#  Revision 3.12  2006/06/06 23:04:49  mast
#  Moved control stripping before /p
#
#  Revision 3.11  2006/03/08 05:16:28  mast
#  Add arguments to set X/Y and switch to new findcontrast input
#
#  Revision 3.10  2006/02/16 06:47:09  mast
#  Stripped control chars from output of sed/header etc for Windows
#
#  Revision 3.9  2005/11/19 04:31:26  mast
#  Quote path setting to preserve spaces
#
#  Revision 3.8  2004/06/29 03:50:39  mast
#  Added nohup
#
#  Revision 3.7  2003/12/25 00:49:30  mast
#  Change newst to newstack
#
#  Revision 3.6  2003/10/24 02:14:00  mast
#  source settmpdir to get tmpdir, better for Windows
#
#  Revision 3.5  2003/06/20 20:14:44  mast
#  Let tmpdir be defined and fall back to /tmp if /usr/tmp does not exist
