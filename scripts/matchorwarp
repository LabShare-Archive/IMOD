#! /bin/csh -f
# MATCHORWARP: script to run refinewarp and matchvol if fit is good enough
# or findwarp with progressively worse criteria, then warpvol

#  $Author$
#
#  $Date$
#
#  $Revision$
#
#  Log at end
#

nohup
set patchfile = "patch.out"
set solvefile = "solve.xf"
set refinefile = "refine.xf"
set warpfile = "warp.xf"
set inversefile = "inverse.xf"
set refinelimit = "0.3"
set warplimit = "0.2,0.27,0.35"
set modelfile = ""
set residualfile = ""
set residualin = ""
set vectormodel = ""
set clipsize = ""
set sizein = ""
set tempdir = ""
set linear = ""
set xlower = "0"
set ylower = "0"
set zlower = "0"
set xupper = "0"
set yupper = "0"
set zupper = "0"
set xskip = ""
set yskip = ""
set zskip = ""
set trial = ""
set pn = "matchorwarp"
if ($?IMOD_DIR) then
    setenv PATH "$IMOD_DIR/bin:$PATH"
endif

if ($#argv == 0) then
cat <<EOF
Usage: ${pn} [options] input.file output.file
      Will find transforms using REFINEMATCH or FINDWARP and transform
        the input.file to the output.file using MATCHVOL or WARPVOL
      Options are: 
 -size size                Where size is a filename or NX,NY,NZ values
 -patchfile patch_file     File of patch displacements (default ($patchfile)
 -modelfile model_file     Model file defining patches to include
 -refinelimit #            Mean residual limit for using refinematch and
                             matchvol (default $refinelimit)
 -warplimit #,#,...        Mean residual limits which findwarp will try to
                             achieve, or 0 not to warp (default $warplimit)
 -solvefile solve_file     Initial transform file (default $solvefile)
 -refinefile refine_file   Refining transform file (default $refinefile)
 -inversefile inverse_file Inverse transform file (default $inversefile)
 -warpfile warp_file       Warp transform file (default $warpfile)
 -residualfile new_patch   Output file for patch displacements with residuals
 -vectormodel new_model    Output file for model of patches with residuals
 -clipsize  size           Size of clipping plane box in patch model   
 -tempdir temp_directory   Directory for temporary files
 -xlowerexclude #          Columns to exclude on the left side
 -xupperexclude #          Columns to exclude on the right side
 -ylowerexclude #          Rows or slabs to exclude at high Y
 -yupperexclude #          Rows or slabs to exclude at low Y
 -zlowerexclude #          Slabs or rows to exclude at high Z
 -zupperexclude #          Slabs or rows to exclude at low Z
 -linear                   Use linear interpolation in Matchvol/Warpvol
 -trial                    Run Refinewarp/Findwarp but not Matchvol/Warpvol
EOF
exit 0
endif
while ($#argv > 2)
  switch ($argv[1])
    case -si*:
      set sizein = $argv[2]
      shift; shift
      breaksw
    case -pa*:
      set patchfile = $argv[2]
      shift; shift
      breaksw
    case -mo*:
      set modelfile = "RegionModel $argv[2]"
      if (! -e $argv[2])then
	echo "ERROR: ${pn} - model file does not exist"
	exit 1
      endif
      shift; shift
      breaksw
    case -so*:
      set solvefile = $argv[2]
      shift; shift
      breaksw
    case -refinef*:
      set refinefile = $argv[2]
      shift; shift
      breaksw
    case -warpf*:
      set warpfile = $argv[2]
      shift; shift
      breaksw
    case -in*:
      set inversefile = $argv[2]
      shift; shift
      breaksw
    case -resi*:
      set residualin = "ResidualPatchOutput $argv[2]"
      set residualfile = "$argv[2]"
      shift; shift
      breaksw
    case -ve*:
      set vectormodel = $argv[2]
      shift; shift
      breaksw
    case -cl*:
      set clipsize = "-c $argv[2]"
      shift; shift
      breaksw
    case -refinel*:
      set refinelimit = $argv[2]
      shift; shift
      breaksw
    case -warpl*:
      set warplimit = $argv[2]
      shift; shift
      breaksw
    case -te*:
      set tempdir = "TemporaryDirectory $argv[2]"
      shift; shift
      breaksw
    case -li*:
      set linear = "InterpolationOrder 1"
      shift
      breaksw
    case -xl*:
      set xlower = $argv[2]
      shift; shift
      breaksw
    case -xu*:
      set xupper = $argv[2]
      shift; shift
      breaksw
    case -yl*:
      set ylower = $argv[2]
      shift; shift
      breaksw
    case -yu*:
      set yupper = $argv[2]
      shift; shift
      breaksw
    case -zl*:
      set zlower = $argv[2]
      shift; shift
      breaksw
    case -zu*:
      set zupper = $argv[2]
      shift; shift
      breaksw
    case -tr*
      set trial = "1"
      shift
      breaksw

    default:
      echo "ERROR: ${pn} - bad argument $argv[1]"
      exit 1
  endsw
end
set recfile = $argv[1]
set matfile = $argv[2]
if (! -e $recfile)then
  echo "ERROR: ${pn} - input file $recfile does not exist"
  exit 1
endif
if (! -e $patchfile)then
  echo "ERROR: ${pn} - input file $patchfile does not exist"
  exit 1
endif
if (! -e $solvefile)then
  echo "ERROR: ${pn} - input file $solvefile does not exist"
  exit 1
endif

# set up size variable; use mat file if none entered
if ($sizein == "") then
    echo "ERROR: ${pn} - -size must be entered with nx,ny,nz or file being matched to"
    exit 1
endif

# If it is not an existing file, use as is and hope it is numbers
# if it is a file, get the nx, ny, nz of it
if (! -e $sizein) then
    set size = $sizein
else
    set size = `header -si $sizein | sed '/[[:cntrl:]]/s///g'`
    if ($status) then
        echo "ERROR: ${pn} - Running header on size entry $sizein"
        exit 1
    endif
endif

# Set up skip entries
#
if ("$xlower" != "0" || "$xupper" != "0") \
    set xskip = "XSkipLeftAndRight $xlower,$xupper"
if ("$ylower" != "0" || "$yupper" != "0") \
    set yskip = "YSkipLowerAndUpper $ylower,$yupper"
if ("$zlower" != "0" || "$zupper" != "0") \
    set zskip = "ZSkipLowerAndUpper $zlower,$zupper"

if ("$vectormodel" != "" && "$residualfile" == "") then
    echo "ERROR: ${pn} - A residual file must be specified to make a vector model"
    exit 1
endif

# Set up name for object in output model and figure out if skipping warp
#
set objname = "Values are residuals"
if ("$clipsize" != "") set objname = "Values are residuals; clip planes exist"
# Run refinematch
echo $residualfile
echo "MATCHORWARP: RUNNING REFINEMATCH TO TRY TO FIND SINGLE TRANSFORMATION"

set skipwarp = 0
if ($warplimit == "0" || $warplimit == "0." || $warplimit == ".0" \
	|| $warplimit == "0.0") set skipwarp = 1

refinematch -StandardInput <<EOF
PatchFile $patchfile
VolumeOrSizeXYZ $sizein
$modelfile
MeanResidualLimit $refinelimit
OutputFile $refinefile
$residualin
EOF

set savestat = $status
if ($savestat == 1) exit 1

# If exiting either because of success or because warp is being skipped,
# write the vector model now
#
if ((! $savestat || $skipwarp) && ("$vectormodel" != "")) then
    echo " "
    patch2imod $clipsize -n "$objname" $residualfile $vectormodel
    if (! $status) echo "MATCHORWARP: CREATED $vectormodel"
endif

if (! $savestat) then
    echo " "
    if ($trial == "1") then
	echo "MATCHORWARP: REFINEMATCH FOUND A GOOD TRANSFORMATION"
	exit 0
    endif

    # If refinematch did not have error exit, run matchvol

    echo "MATCHORWARP: REFINEMATCH FOUND A GOOD TRANSFORMATION: NEXT RUNNING MATCHVOL"
    echo " "


    matchvol -StandardInput <<EOF
InputFile $recfile
OutputFile $matfile
$tempdir
OutputSizeXYZ $size
TransformFile $solvefile
TransformFile $refinefile
InverseFile $inversefile
$linear
EOF

    exit $status

endif

# If there is an error exit, run findwarp as long as warplimit not 0
#
if ($skipwarp) then
    echo " "
    echo "ERROR: MATCHORWARP - REFINEMATCH GAVE A MEAN RESIDUAL ERROR ABOVE $refinelimit AND WARPING IS DISABLED"
    exit 1
endif

echo " "
echo "MATCHORWARP: RUNNING FINDWARP TO FIND A WARPING WITH GIVEN RESIDUAL LIMITS"
findwarp -StandardInput <<EOF
PatchFile $patchfile
VolumeOrSizeXYZ $sizein
$modelfile
TargetMeanResidual $warplimit
$xskip
$yskip
$zskip
InitialTransformFile $solvefile
OutputFile $warpfile
$residualin
EOF
set savestat = $status

if ($savestat == 1) exit 1

if ("$vectormodel" != "") then
    echo " "
    patch2imod $clipsize -n "$objname" $residualfile $vectormodel
    if (! $status) echo "MATCHORWARP: CREATED $vectormodel"
endif

# If succeed, run warpvol
if (! $savestat) then
    echo " "
    if ($trial == "1") then
        echo "MATCHORWARP: FINDWARP FOUND A GOOD WARPING"
        exit 0
    endif

    echo "MATCHORWARP: FINDWARP FOUND A GOOD WARPING: NEXT RUNNING WARPVOL"
    echo " "
    warpvol -StandardInput <<EOF
InputFile $recfile
OutputFile $matfile
$tempdir
OutputSizeXYZ $size
TransformFile $warpfile
$linear
EOF

    exit $status
endif

# Now it's all over
echo " "
echo "ERROR: MATCHORWARP - YOU NEED TO GET BETTER PATCHES, EDIT PATCHES, OR ELIMINATE ROWS OR COLUMNS"
exit 1

#  $Log$
#  Revision 3.7  2006/08/21 17:01:09  mast
#  Changed to use pip input to refinematch and findwarp, to provide new options
#  for residual output and Y patch exclusion, and to handle size properly if
#  the match volume is oversize
#
#  Revision 3.6  2006/02/16 06:47:09  mast
#  Stripped control chars from output of sed/header etc for Windows
#
#  Revision 3.5  2005/11/19 04:31:26  mast
#  Quote path setting to preserve spaces
#
#  Revision 3.4  2004/06/29 03:48:15  mast
#  Added nohup, fixed path setting
#
#  Revision 3.3  2003/10/11 00:03:38  mast
#  Switched to new input method for matchvol/warpvol, added linear
#  interpolation option
#
#  Revision 3.2  2003/03/21 22:45:56  mast
#  Make sure all error exits has an ERROR: statement and pass on exit status
#  from running matchvol or warpvol
#
#  Revision 3.1  2002/07/21 04:54:48  mast
#  Added options for specifying rows and columns to exclude for findwarp,
#  and for running in a trial mode
