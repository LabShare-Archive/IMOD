#! /bin/csh -f
# INTERACTIVE SHELL SCRIPT TO MAKE INITIAL COMMAND FILE FOR JOINING TOMOGRAMS
#  $Author$
#
#  $Date$
#
#  $Revision$
#
#  $Log$

set MIDASLIMIT = 1024
set defdir = ""
set defunflipext = "rec"
set defflipext = "flip"
set defmatext = "dmat"
set joincom = "startjoin.com"
set reclist = ""
set fliplist = ""
set matlist = ""
set invertlist = ""
set botlist = ""
set toplist = ""
set anglelist = ""
set sizelist = ""
set ifrotlist = ""
if ($?IMOD_DIR) then
    set path = ($IMOD_DIR/bin $path)
endif

echo " "
echo "This program will set up a command file to do the initial steps in"
echo "joining tomograms from serial sections."
echo "There are no command line arguments."
echo "Just answer each of the questions in turn."
echo "To interrupt, type Ctrl-C then Return."
echo " "
echo "When you enter the name of a tomogram file, you can enter just the root"
echo "name without a directory path or extension.  In this case, the program"
echo "will add a default directory path (if any) and the appropriate default"
echo "extension ($defunflipext or $defflipext).  If you enter a name with a"
echo "directory path, it will override the default path; if you enter a name"
echo "with an extension, it will override the default extension."
echo ""

@ ntomo = 0
while ($ntomo < 2)
    echo -n "Enter number of tomograms to be joined: "
    @ ntomo = $<
    if ($ntomo < 2) then
	@ ntomo = 0
	echo "No good, try again"
    endif
end

# GET THE DEFAULTS FOR DIRECTORY AND EXTENSIONS

echo "Enter the default directory for source tomograms, or Return to use"
echo -n " the current directory by default: "
set defdir = $<

echo "Enter the default extension for unflipped tomograms (Return for $defunflipext): "
set defin = $<
if ($defin != "") set defunflipext = $defin

echo "Enter the default extension for flipped tomograms (Return for $defflipext): "
set defin = $<
if ($defin != "") set defflipext = $defin

# FIND OUT IF NEED TO MAKE NEW DENSITY MATCHED FILES

set ifmatok = "-1"
while ($ifmatok == "-1")
    echo "If any of your files after the first one are already flipped, is it"
    echo "OK to put density-matched values back in the same file (enter Y or N;"
    echo -n " if no, then a new file will be created for density-matched values)? "
    set matokin = $<
    if ($matokin == "y" || $matokin == "Y") set ifmatok = "1"
    if ($matokin == "n" || $matokin == "N") set ifmatok = "0"
end


# LOOP ON TOMOS

@ nxmax = 0
@ nymax = 0
@ itomo = 1
while ($itomo <= $ntomo)
    echo -n "Name of tomogram # ${itomo}: "
    set namein = $<

    set rotsize = `echo 0 0 0`
    set rotangle = `echo 0 0 0`
    set ifflip = "-1"
    while ($ifflip == "-1")
	echo "Enter A if this tomogram is Already flipped, F to Flip it with Clip,"
	echo -n " or R to Rotate it with Rotatevol: "
	set flipin = $<
	if ($flipin == "r" || $flipin == "R") set ifflip = "2"
	if ($flipin == "f" || $flipin == "F") set ifflip = "1"
	if ($flipin == "a" || $flipin == "A") set ifflip = "0"
    end

    # DECOMPOSE FILENAME INTO HEADER, ROOT AND TAIL

    set tail = $namein:t
    set header = ""
    if ($tail == $namein) then
	if ($defdir != "")set header = $defdir"/"
    else
	set header = $namein:h"/"
    endif
    set root = $tail:r

    # COMPOSE FILENAMES FOR SOURCE, FLIPPED, AND MATCHED FILES, GET SIZE

    if ($ifflip != "0") then

	# IF FLIPPING, THEN NEED A REC SOURCE, BUT FLIP AND MAT ARE THE SAME

	if ($tail == $root) then
	    set recsource = $header$root"."$defunflipext
	else
	    set recsource = $header$tail
	endif
	set flipsource = $root"."$defflipext
	set matsource = $flipsource
	if (-e $recsource) then
	    set size = `header $recsource | sed -n '/rows, sections/p'| awk '{print $7, $8, $9}'`
	else
	    set size = `echo "1024 100 1024"`
	    echo "WARNING: $recsource NOT FOUND; SETTING SIZE TO $size FOR TEST PURPOSES"
	endif
	@ nx = $size[1]
	@ ny = $size[3]
	@ nz = $size[2]

    else

	# IF ALREADY FLIPPED, SET REC SOURCE TO none, POSSIBLY SET UP DIFFERENT
	# DMAT FILE

	if ($tail == $root) then
	    set flipsource = $header$root"."$defflipext
	else
	    set flipsource = $header$tail
	endif
	set recsource = "none"
	set matsource = $flipsource
	if ($ifmatok == "0" && $itomo > 1) set matsource = $root"."$defmatext

	if (-e $flipsource) then
	    set size = `header $flipsource | sed -n '/rows, sections/p'| awk '{print $7, $8, $9}'`
	else
	    set size = `echo "1024 1024 100"`
	    echo "WARNING: $flipsource NOT FOUND; SETTING SIZE TO $size FOR TEST PURPOSES"
	endif
	@ nx = $size[1]
	@ ny = $size[2]
	@ nz = $size[3]
    endif

    @ nxformax = $nx
    @ nyformax = $ny

#    # SAVE SIZE OF FIRST VOLUME FOR COMPUTING SIZE OF NEWSTACK OUTPUT
#    if ($itomo == 1) then
#	@ firstnx = $nx
#	@ firstny = $ny
#    endif

    # IF DOING ROTATEVOL, GET THE SIZE OF OUTPUT FILE AND THE ANGLES

    if ($ifflip == "2") then
	set ifok = "0"
	while ($ifok == "0")
	    set defrotsize = "$nx,$ny,$nz"
	    echo -n "Enter size of file after rotating (Return for $defrotsize): "
	    set rotentry = $<
	    if ($rotentry == "") set rotentry = $defrotsize
	    set rotsize = `echo $rotentry | sed 's/,/ /g'`
	    if ($#rotsize == 3) then
		set ifok = "1"
	       	@ newnz = $rotsize[3]
		@ zbase = ($nz - 1) - (($nz - $newnz) / 2)
	    else
		echo "You must enter 3 values, try again"
	    endif
	end

	@ nxformax = $rotsize[1]
	@ nyformax = $rotsize[2]

#	if ($itomo == 1) then
#	    @ firstnx = $rotsize[1]
#	    @ firstny = $rotsize[2]
#	endif

	set ifok = "0"
	while ($ifok == "0")
	    echo -n "Enter rotation angles around X, Y, and Z axes from slicer: "
	    set rotentry = $<
	    set rotangle = `echo $rotentry | sed 's/,/ /g'`
	    if ($#rotangle == 3) then
		set ifok = "1"
	    else
		echo "You must enter 3 values, try again"
	    endif
	end
	echo "Use slice numbers from the unrotated file to specify the slices to extract."
	echo "These values will be adjusted to the right values for the rotated file."
    endif

    # KEEP TRACK OF MAXIMUM NX, NY
    if ($nxformax > $nxmax) @ nxmax = $nxformax
    if ($nyformax > $nymax) @ nymax = $nyformax

    # GET THE SLICES TO EXTRACT FROM BOTTOM OF SECTION

    set botrange = "0"
    if ($itomo > 1) then
	set botrange = ""
	while ($botrange == "")
	    echo -n "Enter starting & ending slices to extract from bottom of section: "
	    set zin = $<
	
	    set zentry = `echo $zin | sed '/[,-]/s// /g'`
	    if ($#zentry < 2) then
		echo "You must enter two numbers, try again"
	    else
		@ zst = $zentry[1]
		@ znd = $zentry[2]
		@ zst--
		@ znd--
		if ($zst < 0 || $zst >= $nz || $znd < 0 || $znd >= $nz) then
		    echo "Coordinates out of range, try again"
		else

		    # IF USING ROTATEVOL, NEED TO ADJUST SLICE NUMBERS

		    if ($ifflip == "2") then
			@ zst = `echo "$rotangle $nz $newnz $zst" | awk '{print int((cos(0.01745329 * $1) * sin(0.01745329 * $2) * sin(0.01745329 * $3) + sin(0.01745329 * $1) * cos(0.01745329 * $3)) * ($6 - 0.5 * $4 + 1) + 0.5 * ($5 - 1))}'`
			@ znd = `echo "$rotangle $nz $newnz $znd" | awk '{print int((cos(0.01745329 * $1) * sin(0.01745329 * $2) * sin(0.01745329 * $3) + sin(0.01745329 * $1) * cos(0.01745329 * $3)) * ($6 - 0.5 * $4 + 1) + 0.5 * ($5 - 1))}'`
			echo rotated z: $zst  $znd
 			#@ zst = $zbase - $zst
 			#@ znd = $zbase - $znd
		    endif
		    
		    # FIGURE OUT IF INVERTING, AND PROPER ORDER FOR EXTRACTION

		    set ifinvert = "0"
		    if ($zst > $nz / 2) set ifinvert = "1"
		    if (($zst < $znd && $ifinvert == "0") || ($zst >= $znd && $ifinvert == "1")) then
			set zstout = $zst
			set zndout = $znd
		    else
			set zstout = $znd
			set zndout = $zst
			endif
		    set botrange = $zstout"-"$zndout
		    if ($zst == $znd) set botrange = $zst
		endif
	    endif
	end
    endif

    # GET SLICE NUMBERS TO EXTRACT AT TOP

    set toprange = "0"
    if ($itomo < $ntomo ) then
	set toprange = ""
	while ($toprange == "")
	    echo -n "Enter starting & ending slices to extract from top of section: "
	    set zin = $<
	
	    set zentry = `echo $zin | sed '/[,-]/s// /g'`
	    if ($#zentry < 2) then
		echo "You must enter two numbers, try again"
	    else
		@ zst = $zentry[1]
		@ znd = $zentry[2]
		@ zst--
		@ znd--
		if ($zst < 0 || $zst >= $nz || $znd < 0 || $znd >= $nz) then
		    echo "Coordinates out of range, try again"
		else

		    # IF USING ROTATEVOL, NEED TO ADJUST SLICE NUMBERS

		    if ($ifflip == "2") then
			@ zst = `echo "$rotangle $nz $newnz $zst" | awk '{print int((cos(0.01745329 * $1) * sin(0.01745329 * $2) * sin(0.01745329 * $3) + sin(0.01745329 * $1) * cos(0.01745329 * $3)) * ($6 - 0.5 * $4 + 1) + 0.5 * ($5 - 1))}'`
			@ znd = `echo "$rotangle $nz $newnz $znd" | awk '{print int((cos(0.01745329 * $1) * sin(0.01745329 * $2) * sin(0.01745329 * $3) + sin(0.01745329 * $1) * cos(0.01745329 * $3)) * ($6 - 0.5 * $4 + 1) + 0.5 * ($5 - 1))}'`
			echo rotated z: $zst  $znd
 			#@ zst = $zbase - $zst
 			#@ znd = $zbase - $znd
		    endif
		    
		    # FIGURE OUT IF INVERTING, AND PROPER ORDER FOR EXTRACTION

		    set ifinvert = "0"
		    if ($znd < $nz / 2) set ifinvert = "1"
		    if (($zst < $znd && $ifinvert == "0") || ($zst >= $znd && $ifinvert == "1")) then
			set zstout = $zst
			set zndout = $znd
		    else
			set zstout = $znd
			set zndout = $zst
		    endif
		    set toprange = $zstout"-"$zndout
		    if ($zst == $znd) set toprange = $zst
		endif
	    endif
	end
    endif

    # ADD ALL PARAMETERS TO THE INDEXABLE WORDLISTS 

    set reclist = ($reclist $recsource)
    set fliplist = ($fliplist $flipsource)
    set matlist = ($matlist $matsource)
    set botlist = ($botlist $botrange)
    set toplist = ($toplist $toprange)
    set invertlist = ($invertlist $ifinvert)
    set sizelist = ($sizelist $rotsize)
    set anglelist = ($anglelist $rotangle)
    set ifrotlist = ($ifrotlist $ifflip)

    @ itomo++
end

echo -n "Enter root name for joined tomogram and other files: "
set joinroot = $<

# WORK OUT WHETHER SQUEEZING IS NEEDED, SET UP TRANSFORMS

@ xymax = $nxmax
if ($nymax > $nxmax) @ xymax = $nymax
set ifsquoze = "0"
set newsize = "$nxmax,$nymax"
if ($xymax > $MIDASLIMIT) then
    set ifsquoze = "1"
    set squeeze = `echo $xymax ${MIDASLIMIT}'.' | awk '{print $2 / $1}'`
    set expand = `echo $xymax ${MIDASLIMIT}'.' | awk '{print $1 / $2}'`
    set newx = `echo $nxmax $squeeze | awk '{print int($1 * $2)}'`
    set newy = `echo $nymax $squeeze | awk '{print int($1 * $2)}'`
    set newsize = "$newx,$newy"
    if (-e $joinroot.sqzxf) \mv $joinroot.sqzxf $joinroot.sqzxf~
    if (-e $joinroot.xpndxf) \mv $joinroot.xpndxf $joinroot.xpndxf~
    echo "$squeeze 0. 0. $squeeze 0. 0." > $joinroot.sqzxf
    echo "$expand 0. 0. $expand 0. 0." > $joinroot.xpndxf
endif

# OUTPUT INFO FILE

if (-e $joinroot.info) \mv $joinroot.info $joinroot.info~
echo "$ntomo  $ifsquoze  $nxmax  $nymax" > $joinroot.info
echo $matlist >> $joinroot.info
echo $invertlist >> $joinroot.info

# COMPOSE THE COMMAND FILE

if (-e $joincom) \mv $joincom $joincom~

echo -n > $joincom

# LOOP THROUGH THE FILES, FLIP OR ROTATE IF NECESSARY, AND DENSMATCH

@ itomo = 1
while ($itomo <= $ntomo)
    @ indx = 3 * $itomo - 2
    @ indy = $indx + 1
    @ indz = $indy + 1
    if ($ifrotlist[$itomo] == "1") then
	echo '$clip'" flipyz $reclist[$itomo] $fliplist[$itomo]" >> $joincom
    else if ($ifrotlist[$itomo] == "2") then
	cat >> $joincom <<EOF
\$rotatevol
$reclist[$itomo]
$fliplist[$itomo]

$sizelist[$indx],$sizelist[$indy],$sizelist[$indz]
/
$anglelist[$indz],$anglelist[$indy],$anglelist[$indx]
EOF
    endif
    if ($itomo > 1) then
	cat >> $joincom <<EOF
\$densmatch
$fliplist[1]
$fliplist[$itomo]
EOF
	if ($matlist[$itomo] == $fliplist[$itomo]) then
	    echo "" >> $joincom
	else
	    echo "$matlist[$itomo]" >> $joincom
	endif
    endif
    @ itomo++
end

# NOW CREATE THE NEWSTACK COMMAND

echo '$newstack' >> $joincom
echo $ntomo >> $joincom
@ itomo = 1
while ($itomo <= $ntomo)
    echo $matlist[$itomo] >> $joincom
    if ($itomo == 1) then
	echo $toplist[$itomo] >> $joincom 
    else if ($itomo == $ntomo) then
	echo $botlist[$itomo] >> $joincom 
    else
	echo $botlist[$itomo],$toplist[$itomo] >> $joincom 
    endif
    @ itomo++
end

cat >> $joincom <<EOF
1
$joinroot.sample
$newsize
/
0
EOF

if ($ifsquoze == "1") then
cat >> $joincom <<EOF
1
$joinroot.sqzxf
0
0
EOF

else
cat >> $joincom <<EOF
0
0
EOF
endif

echo ""
echo "The command file $joincom has been written and is ready to submit."
echo "Run it to create the file $joinroot.sample"
echo "Then run midas on $joinroot.sample and create a transform file $joinroot.xf"
echo "Then run finishjoin to create the joined tomogram"
