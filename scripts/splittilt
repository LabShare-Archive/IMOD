#! /bin/csh -f
# splittilt: splits tilt command file into multiple files to do in chunks
#
#  $Author$
#
#  $Date$
#
#  $Revision$
#
#  $Log$
#  Revision 3.4  2005/10/08 20:10:38  mast
#  Fixed for binned images
#
#  Revision 3.3  2004/07/22 20:51:47  mast
#  Added exit statement to unrecognized option error point
#
#  Revision 3.2  2004/07/22 18:16:56  mast
#  Change to better sed command for stripping Ctrl M
#
#  Revision 3.1  2004/07/21 17:00:07  mast
#  Initial creation
#

set pn = splittilt
set penalty = 1.33
@ maxextrapct = 102
@ numproc = 8
@ targetslabs = 0
@ minslabs = 0
@ minslices = 50
@ minratio = 2
@ targetratio = 5

if ($#argv < 1) then
cat <<EOF
Usage: $pn [options] command_file
   Produces multiple command files for running Tilt in parallel
   Options:
      -n #   Target or expected number of machines (default $numproc)
      -s #   Minimum number of slices per chunk (default $minslices)
      -t #   Target # of chunks (default $targetratio times # of machines)
      -m #   Minimum # of chunks (default $minratio times # of machines)
      -p #   Penalty for old-style X-axis tilting (default $penalty)
      -v     Do vertical slices instead of old-style X-axis tilting
      -f     Allow fast backprojection where possible
EOF
exit 0
endif

set vertical = 0
set oldstyle = "#"
set nofbp = "FBPINTERP 0"

while ($#argv > 1)
  switch ($argv[1])
    case -n:
      @ numproc = $argv[2]
      shift; shift
      breaksw

    case -s:
      @ minslices = $argv[2]
      shift; shift
      breaksw

    case -p:
      set penalty = $argv[2]
      shift; shift
      breaksw

    case -t:
      @ targetslabs = $argv[2]
      shift; shift
      breaksw

    case -m:
      @ minslabs = $argv[2]
      shift; shift
      breaksw

    case -v:
      set vertical = 1
      shift
      breaksw

    case -f:
      set nofbp = "#"
      shift
      breaksw

    default:
      echo "ERROR: $pn - unrecognized option $argv[1]"
      exit 1
  endsw
end

set rootname = $argv[1]:r
set comname = $rootname.com
if (! -e $comname) then
    echo "ERROR: $pn - command file $comname does not exist"
    exit 1
endif

# Set min and target slabs if not entered
#
if ($minslabs == 0) @ minslabs = $minratio * $numproc
if ($targetslabs == 0) @ targetslabs = $targetratio * $numproc

# Collect info from command file
#

set xaxistilt = `grep -i xaxistilt $comname | grep -v '^#' | sed '/[^0-9\.]/s///g'`
set fullimage = `grep -i fullimage $comname | grep -v '^#' | sed '/[^ 0-9\.]/s///g'`
set thickness = `grep -i thickness $comname | grep -v '^#' | sed '/[^0-9\.]/s///g'`
set slices = `grep -i slice $comname | grep -v '^#' | sed '/[^ 0-9\.]/s///g'`
set local = `grep -i localfile $comname | grep -v '^#'`
set binning = `grep -i imagebinned $comname | grep -v '^#' | sed '/[^0-9\.]/s///g'`

if ($#fullimage == 0 && "$slices" == "") then
    echo "ERROR: $pn - Command file has neither a SLICES nor a FULLIMAGE entry"
    exit 1
endif

if ($thickness == "") then
    echo "ERROR: $pn - Command file has no THICKNESS entry"
    exit 1
endif

# Divide thickness and slice entries by the binning for computations
#
if ("$binning" != "") @ binval = $binning[1]
@ thickness /= $binval

# Remove any previous files now in case the number has changed
#
\find . -type f -name  "$rootname-[0-9]*.*" -exec rm -f "{}" \;

if ($#fullimage > 1) then
    @ firstslice = 0
    @ numslices = $fullimage[2]
    @ numslices = ($numslices + $binval - 1) / $binval
endif

if ($#slices > 1) then
    @ firstslice = $slices[1]
    @ firstslice /= $binval
    @ numslices = $slices[2]
    @ numslices = ($numslices / $binval) + 1 - $firstslice
endif

# Start with target size, make sure bigger than minimum
#
@ slabsize = $numslices / $targetslabs
if ($slabsize < $minslices) @ slabsize = $minslices

if ("$local" == "" && $xaxistilt != "") then
    #
    # If no locals and X axis tilt, go for maximum # of slabs that has a
    # percentage of extra slices within a minimal limit, down to the
    # "min" # of slabs
    #
    @ nslabs = $targetslabs
    while ($nslabs >= $minslabs)
        @ slabsize = $numslices / $nslabs
        if ($slabsize < $minslices) @ slabsize = $minslices
        @ nslabs--
        #
        # Get percent of extra slices required
        #
        set extra = `echo $slabsize $thickness $xaxistilt | \
          awk '{print int(100. * ($1 + $2 * sin(0.01745329 * $3)) / $1)}' | \
          sed '/[[:cntrl:]]/s///g'`
        # echo $extra
        @ extranum = $extra
        if ($extranum <= $maxextrapct) break
    end

    # echo $slabsize $thickness $xaxistilt
    set penpct = `echo $penalty | awk '{print int(100. * $1)}' | \
        sed '/[[:cntrl:]]/s///g'`
    @ pennum = $penpct

    # If extra is less than penalty, proceed
    # Otherwise, drop to old-style tilting unless vertical specified
    #
    if ($extranum > $pennum) then
        if ($vertical == 0) then
            set oldstyle = "XTILTINTERP 0"
        else
            # If vertical specified, compute optimum size that just breaks
            # even with penalty for old-style tilting, but limit it
            #
            set optsize = `echo $penalty $thickness $xaxistilt | \
                awk '{print int($2 * sin(0.01745329 * $3) / ($1 - 1.))}' | \
                sed '/[[:cntrl:]]/s///g'`
            @ slabsize = $optsize
            @ maxsize = $numproc / $minslabs
            if ($slabsize > $maxsize) @ slabsize = $maxsize
            if ($slabsize < $minslices) @ slabsize = $minslices
        endif
    endif
endif

@ numslabs = ($numslices + $slabsize / 2) / $slabsize
@ slabsize = $numslices / $numslabs
@ remainder = $numslices - $numslabs * $slabsize

set topline  = `vmstocsh < $comname | awk '/tilt/{print NR}' | \
                sed '/[[:cntrl:]]/s///g'`
if ($#topline > 1) then
    @ topnum = $topline[1]
else
    @ topnum = $topline
endif
@ nextline = $topnum + 2
set recfile = `vmstocsh < $comname | awk '{if (NR==LINE) print}' \
                LINE=$nextline | sed '/[[:cntrl:]]/s///g'`

set recroot = $recfile:r
set templist = ()

@ num = 0
while ($num < $numslabs)
    @ num++
    set numtext = $num
    if ($num < 10) then
        set numtext = 00"$numtext"
    else if ($num < 100) then
        set numtext = 0"$numtext"
    endif
    set thiscom = $rootname-$numtext.com
    set tempname = $recroot-$numtext.rec
    set templist = ($templist $tempname)
    @ lastslice = $firstslice + $slabsize - 1
    if ($num <= $remainder) @ lastslice++

    # Get unbinned first and last slices for output
    #
    @ ubfirst = $firstslice * $binval
    @ ublast = $lastslice * $binval

    # Modify the command file: delete existing slice, get rid of savework,
    # Set the new slice command and the xtiltinterp control, and turn off
    # FBP for consistency
    #
    sed -e "/$recfile/s//$tempname/" \
        -e "/SLICE/d" \
        -e '/savework/d' \
        -e "/THICKNESS/a\\
SLICE $ubfirst $ublast\
" \
        -e "/THICKNESS/a\\
$oldstyle\
" \
        -e "/THICKNESS/a\\
$nofbp\
" $comname >! $thiscom
    cat <<EOF >> $thiscom
\$echo CHUNK DONE
EOF

    @ firstslice = $lastslice + 1
end

set finish = $rootname-finish.com
cat <<EOF >! $finish
\$newstack -StandardInput
OutputFile $recfile
EOF
@ num = 0
while ($num < $numslabs)
    @ num++
    echo "InputFile $templist[$num]" >> $finish
end
cat <<EOF >> $finish
\$\\rm -f $rootname-[0-9]*.* $recroot-[0-9]*.rec
EOF

echo "Command files for $numslabs chunks created and ready to run with:"
echo "  processchunks machine_list $rootname"
