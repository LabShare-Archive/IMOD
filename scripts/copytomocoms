#! /bin/csh -f
# SCRIPT TO COPY AND MODIFY COMMAND FILES FOR TOMOGRAPHY

set SAMPLESIZE = 10               # Size of sample tomogram
set SAMPALISIZE = 60              # Size of aligned stack for sampling
@ MINBORDER1 = 30                 # Minimum border size
@ MINBORDER2 = 40                 # Minimum size if y dimension > borderstep1
@ BORDERSTEP1 = 500               # threshold for using minborder2
@ BORDERSTEP2 = 1000              # threshold for linearly increasing size
@ BORDERFAC = 10                  # controls linear increase of border size
set CCDBORDERFAC = 2.0            # extra size of border for CCD images
set RESIDUAL_SCALE = 10           # scaling for tiltalign residuals
set MONTAGE_XCORR_MAX = 2048      # Max size for blended stack for doing xcorr
set backupname = "./savework"

set single_srcname = "g5a"
set seedname = "empty.seed"
set pn = "copytomocoms"

#  $Author$
#
#  $Date$
#
#  $Revision$
#
# Log at end of file
#
if ($?IMOD_DIR) then
    set srcdir = "$IMOD_DIR/com"
    setenv PATH "$IMOD_DIR/bin:$PATH"
else
    echo "Environment variable IMOD_DIR must be set to the top IMOD directory"
    exit 1
endif

if (! -d $srcdir) then
    echo "Source directory for command files, $srcdir, not found."
    echo "Edit $0 if necessary to set the source directory correctly"
    exit 1
endif

if ("$PWD" == $srcdir) then
    echo "You should be in the directory where your data are located, not"
    echo "in the com directory."
    exit 1
endif

set noglob
set srcname = $single_srcname
set disttext = "-xf"
set focusAdj = 0
set bFocusAdj = 0
set binning = 1
set distort = ""
set subdistort = gibberish
set pixsize = ""

if ($#argv > 0) then

    # Initialize
    set interactive = 0
    set filmccd = "C"
    set montage = "0"
    set naxis = "1"
    set backup = 0
    set userawtlt = 0
    set buserawtlt = 0
    set ifextract = 0
    set bifextract = 0
    set excludelistin = ""
    set bexcludelistin = ""
    set local = "1"
    set preblend = "0"
    @ numsec = 0
    @ bnumsec = 0
    set imsec = ""
    set bimsec = ""
    set angles = 0
    set bangles = 0
    set firstinc = 0
    set bfirstinc = 0

    # process arguments
    while ($#argv > 0)
      switch ($argv[1])
        case -h*:
          goto usage
          breaksw
        case -n*:
          set rootname = $argv[2]
          shift; shift
          breaksw
        case -du*:
          set naxis = "2"
          shift
          breaksw
        case -fil*:
          set filmccd = "F"
          shift
          breaksw
        case -pre*:
          set preblend = "1"
          shift
          breaksw
        case -m*:
          set montage = "1"
          shift
          breaksw
        case -bac*:
          set backupdir = $argv[2]
          set backup = 1
          shift; shift
          breaksw
        case -x*:
          @ xsize = $argv[2]
          shift; shift
          breaksw
        case -y*:
          @ ysize = $argv[2]
          shift; shift
          breaksw
        case -pi*:
          set pixsize = $argv[2]
          shift; shift
          breaksw
        case -go*:
          set beadnm = $argv[2]
          shift; shift
          breaksw
        case -r*:
          set axisangle = $argv[2]
          shift; shift
          breaksw
        case -br*:
          set baxisangle = $argv[2]
          shift; shift
          breaksw
        case -a*:
          set angles = $argv[2]
          shift; shift
          breaksw
        case -ban*:
          set bangles = $argv[2]
          shift; shift
          breaksw
        case -fir*:
          set firstinc = $argv[2]
          shift; shift
          breaksw
        case -bfi*:
          set bfirstinc = $argv[2]
          shift; shift
          breaksw
        case -u*:
          set userawtlt = 1
          shift
          breaksw
        case -bu*:
          set buserawtlt = 1
          shift
          breaksw
        case -e*:
          set ifextract = "Y"
          set userawtlt = 1
          shift
          breaksw
        case -be*:
          set bifextract = "Y"
          set buserawtlt = 1
          shift
          breaksw
        case -s*:
          set excludelistin = $argv[2]
          shift; shift
          breaksw
        case -bs*:
          set bexcludelistin = $argv[2]
          shift; shift
          breaksw
        case -z*:
          @ numsec = $argv[2]
          shift; shift
          breaksw
        case -bz*:
          @ bnumsec = $argv[2]
          shift; shift
          breaksw
        case -o*:
          set imsec = $argv[2]
          shift; shift
          breaksw
        case -bo*:
          set bimsec = $argv[2]
          shift; shift
          breaksw
        case -di*:
          set distort = "$argv[2]"
          shift; shift
          breaksw
        case -bi*:
          set binning = $argv[2]
          shift; shift
          breaksw
        case -gr*:
          set gradient = "$argv[2]"
          shift; shift
          breaksw
        case -fo*:
          set focusAdj = 1
          shift
          breaksw
        case -bfo*:
          set bFocusAdj = 1
          shift
          breaksw
        default:
          echo "ERROR: $pn - unrecognized option"
          exit 1
      endsw
    end

    # Check validity of inputs
    #
    if (! $?rootname) then
        echo "ERROR: $pn - You must enter a root name"
        exit 1
    endif
    if (! $?beadnm) then
        echo "ERROR: $pn - You must enter a size for fiducials"
        exit 1
    endif
    if (! $?axisangle) then
        echo "ERROR: $pn - You must enter the rotation angle of the tilt axis"
        exit 1
    endif
    @ numin = 0
    if ($angles != 0) @ numin++
    if ($firstinc != 0) @ numin++
    if ($userawtlt != 0) @ numin++
    if ($numin != 1) then
        echo "ERROR: $pn - You must enter one and only one of -angles, -firstinc, and -userawtlt"
        exit 1
    endif

    if ($naxis == "2") then
        if (! $?baxisangle) then
            echo "ERROR: $pn - You must enter the rotation angle of the tilt axis for second axis"
            exit 1
        endif
        @ numin = 0
        if ($bangles != 0) @ numin++
        if ($bfirstinc != 0) @ numin++
        if ($buserawtlt != 0) @ numin++
        if ($numin != 1) then
            echo "ERROR: $pn - You must enter one and only one of -bangles, -bfirstinc, and -buserawtlt"
            exit 1
        endif
    endif

    # Set a few things based on film/ccd or number of axes
    if ($filmccd == "C") then
        set erase = "1"
        set logbase = "0"
    else
        set logbase = "-250"
    endif
    if ($naxis == 1) then
        set stackname = $rootname.st
        set piecename = $rootname.pl
    else
        set stackname = $rootname"a.st"
        set piecename = $rootname"a.pl"
    endif

    # set distortion parameters
    #
    if ($distort != "") then

        # convert backslashes (use system echo in case of c:\cygwin)
        # then copy distortion field file to here if it is not local
        #
        set distort = `\echo "$distort" | sed '/\\/s//\//g'`
        set distort = "$distort"
        if ("$distort" != "$distort:t") then
            \cp "$distort" .
            set distort = "$distort:t"
        endif

        set disttext = "-distort $distort -imagebinned $binning -xf"
        set subdistort = "DistortionField"
    endif

else

    # INTERACTIVE INPUT

    set interactive = 1
    echo " "
    echo "This program will set up the command files needed for tomography."
    echo "You can run it with command line arguments instead of interactively;"
    echo " enter  copytomocoms -h  to see options."
    echo "Just answer each of the questions in turn."
    echo "To interrupt, type Ctrl-C then Return."
    echo " "

    set naxis = "0"
    while ($naxis != "1" && $naxis != "2")
        echo -n "Do you have tilts around one axis or two axes (Enter 1 or 2)? "
        set naxis = $<
    end

    # FIND OUT IF FILM OR CCD

    set filmccd = "0"
    while ($filmccd != "C" && $filmccd != 'c' && $filmccd != 'F')
        echo "Enter f (for film) if your tilt images are already fairly well aligned,"
        echo -n " or c (for CCD) if the images need prealignment: "
        set filmccd = $<
        if ($filmccd == "f") set filmccd = "F"
    end

        # IN EITHER CASE, FIND OUT IF MONTAGE

    set montage = "-1"
    while ($montage == "-1")
        echo -n "Are the data montaged (Enter y or n)? "
        set ifmont = $<
        if ($ifmont == "y" || $ifmont == "Y") set montage = "1"
        if ($ifmont == "n" || $ifmont == "N") set montage = "0"
    end 


    if ($filmccd == "F") then
        set logbase = "-250"
        set preblend = "0"

        # IF FILM AND MONTAGE, FIND OUT IF NEED PREBLEND
        if ($montage == "1") then
    	set preblend = "-1"
    	while ($preblend == "-1")
    	    echo  "Do you need to correct for errors in overlap between pieces"
    	    echo -n " when you blend the pieces together (Enter y or n)? "
    	    set ifpre = $<
    	    if ($ifpre == "y" || $ifpre == "Y") set preblend = "1"
    	    if ($ifpre == "n" || $ifpre == "N") set preblend = "0"
    	end
        endif
    else

        set logbase = "0"

        # IF CCD, ASK IF NEED ERASER

        set erase = "-1"
        while ($erase == "-1")
    	echo -n "Do you need to run CCDERASER on the data (Enter y or n)? "
    	set ifera = $<
    	if ($ifera == "y" || $ifera == "Y") set erase = "1"
    	if ($ifera == "n" || $ifera == "N") set erase = "0"
        end

    endif

    # ASK IF WANT TO DO LOCAL ALIGNMENTS

    set local = "-1"
    while ($local == "-1")
        echo -n "Is it possible that you will need to use local alignments (Enter y or n)? "
        set ifloc = $<
        if ($ifloc == "y" || $ifloc == "Y") set local = "1"
        if ($ifloc == "n" || $ifloc == "N") set local = "0"
    end

    # GET ROOT NAME OF DATA SET

    if ($naxis == "1") then
        echo -n "Enter root name of data set (omitting .st): "
        set rootname = $<
        set stackname = $rootname.st
        set piecename = $rootname.pl

    else
        echo -n "Enter root name of data sets (omitting a.st or b.st): "
        set rootname = $<
        set stackname = $rootname"a.st"
        set piecename = $rootname"a.pl"

    endif

    # GET BACKUP AND POSSIBLE TRUE SOURCE DIRECTORY OF FILES

    set backup = "-1"
    while ($backup == "-1")
        echo "If you want command files and small result files to be saved to another"
        echo " directory for backup protection, enter the path name of the directory;"
        echo -n " otherwise Return: "
        set backupdir = "$<"
        if ("$backupdir" == "") then
            set backup = "0"
        else if ((-d "$backupdir") && (-w "$backupdir")) then
    	    set backup = "1"
        endif
    end 

endif

# HANDLE BACKUP DIRECTORY TASKS LIKE LINKS

if ($backup) then
    if ((! -e $stackname) && (-e "$backupdir/$stackname")) then
	echo "Creating link to $backupdir/$stackname in current directory"
	ln -s "$backupdir/$stackname" .
    endif
    if ($naxis == "2")then
	set bname = $rootname"b.st"
	if (! -e $bname) then
            if (-e "$backupdir/$bname") then
                echo "Creating link to $backupdir/$bname in current directory"
                ln -s "$backupdir/$bname" .
            else
                echo2 " "
                echo2 "INFO: $bname does not exist yet."
                echo2 "  If you place it in the backup directory later, you will have to run:"
                echo2 "  ln -s $backupdir/$bname ."
            endif
	endif
    endif
endif
set backuplist = ""

# GET X AND Y SIZE IF STACK DOES NOT EXIST, OR MAKE SURE IT WAS ENTERED
#
if (! -e $stackname) then
    if ($interactive) then

        set sayaset = ":"
        if ($naxis == "2") set sayaset = ' in the first ("a") set:'

        echo -n "Enter X dimension of tilt images$sayaset "
            set xsize = $<
        echo -n "Enter Y dimension of tilt images$sayaset "
        set ysize = $<
    else
        if (! ($?xsize && $?ysize)) then
            echo "ERROR: $pn - Stack is not present; you must enter -xsize and -ysize"
            exit 1
        endif
    endif
endif

# GET INFORMATION FOR SETTING UP TRACK.COM RADIUS AND BOX SIZE

if ($interactive) then
    echo -n "Pixel size in nanometers (Return if unavailable): "
    set pixsize = $<
endif
if ($pixsize == "") then
    if ($interactive) then
        echo -n "Diameter of gold beads in PIXELS (not nanometers): "
        set beadsize = $<
    else
        set beadsize = $beadnm
    endif
else
    if ($interactive) then
        echo -n "Diameter of gold beads in NANOMETERS: "
        set beadnm = $<
    endif
    set beadsize = `echo $beadnm $pixsize | awk '{print $1 / $2}'`
endif
set beadrad = `echo $beadsize | awk '{printf "%.2f", 0.5 * ($1 + 3)}'`

switch ($beadrad)
    case 0.*:
    case 1.*:
    case 2.*:
        set eraserad = "1.1"
    case 3.*:
    case 4.*:
	set boxsize = "32"
        set eraserad = "2.1"
	breaksw
    case 5.*:
    case 6.*:
	set boxsize = "40"
        set eraserad = "2.6"
	breaksw
    default:
	set boxsize = "48"
        set eraserad = "3.6"
	breaksw
endsw


set srcext = ".com"
@ numax = $naxis
@ iaxis = 0
while ($iaxis < $numax)

    set setname = $rootname
    set dstext = ".com"
    set modext = ".mod"
    set logext = ".log"
    set recext = ".rec"
    set xftext = "$disttext"
    set gradspec = " "
    set subgradient = gibberish
    if ($numax == 2) then
	set setlet = "a"
        set sayaset = 'first ("a")'
	if ($iaxis == 1) then
            set setlet = "b"
            set sayaset = 'second ("b")'
        endif
        if ($interactive) then
            echo ' '
            echo "Now make entries specific to the $sayaset set"
            echo ' '
        endif
	set setname = $rootname$setlet
	set dstext = "$setlet.com"
	set modext = "$setlet.mod"
	set logext = "$setlet.log"
	set recext = "$setlet.rec"

        if ($iaxis == 1 && (! $interactive)) then
            set axisangle = $baxisangle
            set excludelistin = $bexcludelistin
            set ifextract = $bifextract
            @ numsec = $bnumsec
            set imsec = $bimsec
            set bangles = $angles
            set userawtlt = $buserawtlt
            set firstinc = $bfirstinc
            set focusAdj = $bFocusAdj
        endif

    endif

    set dstname = $setname
    set stackname = $setname".st"
    set piecename = $setname".pl"

    # GET X AND Y SIZE FROM STACK IF IT EXISTS

    set xysize = "0"
    if (-e $stackname) then

        if ($montage == "0") then
            set xysize = `header -si $stackname | sed '/[[:cntrl:]]/s///g'`
        else if ((-e $piecename) || ($filmccd != "F")) then
            if (-e $piecename) then
                set xysize = `montagesize $stackname $piecename | sed -n -e '/Total/s/Total.*://p' -e '/[[:cntrl:]]/s///g'`
            else
                set xysize = `montagesize $stackname | sed -n -e '/Total/s/Total.*://p' -e '/[[:cntrl:]]/s///g'`
            endif
        endif
        if ("$xysize" != "0") then
            if ($#xysize == 3) then
                @ xsize = $xysize[1]
                @ ysize = $xysize[2]
            else
                echo "ERROR: $pn - extracting image size from stack header"
                exit 1
            endif
        endif

    else if ($iaxis == 1) then
        echo ""
        echo "INFO: $stackname does not exist yet, assuming size $xsize x $ysize"
        echo "   If the size is different, you will need to fix FULLIMAGE in tiltb.com"
        echo "   in order to use parallel processing"
        if ($montage == "1") then
            echo '   Run   "montagesize' $stackname'"    to get the raw image size (NX, NY, and NZ)'
            echo '   Then run   "goodframe NX NY"   to get the numbers to put in tiltb.com'
        endif
        echo ""
    endif

    # GET TILT ANGLE AND AXIS INFORMATION

    if ($interactive) then
        echo  "Enter estimated angle of rotation from the vertical axis to the "
        echo -n "   tilt axis in the raw images (counterclockwise positive): " 
        set axisangle = $<
    endif

    @ axangnum = `echo $axisangle | awk '{ print int($1)}'` 
    set newstwidth = ""
    if ($axangnum > 70 || $axangnum < -70) set newstwidth = $ysize

    if ($filmccd != "F") then

	# IF CCD, FIND OUT IF WANT TO EXTRACT A RAWTLT FILE

	set tiltspec = $setname".rawtlt"
        if (! -e $tiltspec) then
            if ($interactive) then
                echo "Do you want to make a .rawtlt file by extracting tilt angles"
                echo -n "  from the image file (Enter y or n)? "
                set ifextract = $<
            endif
	    if ($ifextract == "y" || $ifextract == "Y") then
                if (-e $stackname) then
                    extracttilts $stackname $tiltspec | tail  -1
                else
                    echo2 " "
                    echo2 "INFO: $stackname does not exist yet."
                    echo2 "  When it does, you will have to run:"
                    echo2 "  extracttilts $stackname $tiltspec"
                endif
	    endif
	endif

	# AND IF MONTAGED CCD, JUST EXTRACT THE PIECE LIST IF NEEDED

	if ($montage == "1") then
	    set plspec = $setname.pl
	    if (! -e $plspec) then
                if (-e $setname.st) then
                    echo "Extracting piece list file from the image file..."
                    extractpieces $stackname $plspec | tail -n 1
                else
                    echo2 " "
                    echo2 "INFO: $stackname does not exist yet."
                    echo2 "  When it does, you will have to run:"
                    echo2 "  extractpieces $stackname $plspec"
                endif
	    endif
	endif
        
        # Set up mag gradient file

        if ($?gradient) then
            set gradspec = $setname.maggrad
            set gradok = "1"
	    if (! -e $gradspec) then
                if (-e $stackname) then
                    set pixarg = ""
                    set pixhead = `header -pi $stackname | sed '/[[:cntrl:]]/s///g' | awk '{print $1}'`
                    if ("$pixhead" == "1.000" && $pixsize != "") set pixarg = "-pixel $pixsize"
                    echo "Extracting mag gradients from the image file..."
                    extractmagrad -rot $axisangle $pixarg -grad "$gradient" $stackname $gradspec | tail -n 2
                    if ($status) then
                        echo2 " "
                        echo2 "WARNING: Could not extract mag gradients from $stackname"
                        set gradok = "0"
                    endif
                else
                    echo2 " "
                    echo2 "INFO: $stackname does not exist yet."
                    echo2 "  When it does, you will have to run:"
                    echo2 "  extractmagrad -rot $axisangle -grad $gradient $stackname $gradspec"
                endif
	    endif
            if ($gradok == "1") then
                set xftext = "-grad $gradspec $disttext"
                set subgradient = "GradientFile"
            endif
        endif
    endif

    if ($interactive) then
        echo "Enter -1 to specify all tilt angles, 1 to specify a starting and increment"
        echo -n "   tilt angle, or 0 to take tilt angles from a .rawtlt file: "
        @ tiltopt = $<
    
        if ($tiltopt < 0) then
            echo "Enter all of the tilt angles, all in one line, separated by commas"
            set tiltspec = $<
        else if ($tiltopt > 0) then
            echo "Enter starting tilt angle and tilt increment, separated by a comma: "
            set tiltspec = $<
        else
            set tiltspec = $setname".rawtlt"
        endif

        echo "Enter list of views to exclude from tracking, alignment, and reconstruction,"
        echo "  or Return if none (enter ranges separated by commas, e.g. 1,77-80)"
        set excludelistin = "$<"
    else

        if ($angles != 0) then
            @ tiltopt = -1
            set tiltspec = $angles
        else if ($firstinc != 0) then
            @ tiltopt = 1
            set tiltspec = $firstinc
        else
            @ tiltopt = 0
            set tiltspec = $setname".rawtlt"
        endif
    endif

    # Handle text for PIP-style tilt options


    set incDelText = "TiltIncrement"
    set tiltIncText = "gibberish232"
    set tiltStart = $tiltspec
    set tiltInc = 1
    if ($tiltopt < 0) then
        set tiltTypeText = "TiltAngles"
    else if ($tiltopt == 0) then
        set tiltTypeText = "TiltFile"
    else
        set tiltTypeText = "FirstTiltAngle"
        set startInc = `echo $tiltspec | sed '/,/s// /g'`
        if ($#startInc < 2) then
            echo "ERROR: $pn - You entered only one number for start and increment tilt angles"
            exit 1
        endif
        set tiltStart = $startInc[1]
        set tiltInc = $startInc[2]
        set tiltIncText = "TiltIncrement"
        set incDelText = "gibberish434"
    endif


    set excludelistin = ($excludelistin)
    set excludelist = ""
    while ($#excludelistin > 0)
        set excludelist = ${excludelist}$excludelistin[1]
        shift excludelistin
    end

    set wipeexclude = "ExcludeList"
    set wipeskip = "SkipViews"
    if ($excludelist != "") set wipeexclude = "gibberish"
    if ($excludelist != "") set wipeskip = "gibberish"

    set backuplist = ($backuplist $setname.pl $setname.rawtlt track$logext align$logext findsec$logext tomopitch$logext)

    # FOR CCD CAMERA ONLY

    set wipepl = "gibberish9876543"
    if ($filmccd != "F") then

	set wipepl = $setname.pl
	set tiltxf = $setname.tltxf
	set tracksrc = $setname.preali

	# GET ERASER IF DESIRED

	if ($erase == "1") then
	    set srcfile = $srcdir/"eraser"$srcext
	    set dstfile = "eraser"$dstext
	    set backuplist = ($backuplist $dstfile $setname.erase)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g \
                -e "s/^MaximumRadius.*/MaximumRadius   $eraserad/" \
                <$srcfile >$dstfile
	endif


	# GET XCORR

	set dstfile = "xcorr"$dstext
        set backuplist = ($backuplist $dstfile $setname.prexf $setname.prexg $setname.tltxf)
	if (-e $dstfile) \mv -f $dstfile $dstfile~
cat > $dstfile <<EOF
# THIS IS A COMMAND FILE TO RUN TILTXCORR AND DETERMINE CROSS-CORRELATION
# ALIGNMENT OF A TILT SERIES
#
EOF
        set xcsrc = $setname.st
	set preblend = "0"
	if ($montage == "1") then

	    # IF MONTAGED, START THE FILE WITH PREBLEND - LIMIT SIZE

            cat >> $dstfile <<EOF
# Set the following goto to 'doxcorr' to skip the blend
\$goto doblend
\$doblend:
EOF
	    set preblend = "1"
	    set srcfile = $srcdir/"blend"$srcext
	    @ xcxsize = $xsize
	    @ xcysize = $ysize
	    if ($xcxsize > $MONTAGE_XCORR_MAX) @ xcxsize = $MONTAGE_XCORR_MAX
	    if ($xcysize > $MONTAGE_XCORR_MAX) @ xcysize = $MONTAGE_XCORR_MAX
	    @ xstart = ($xsize - $xcxsize) / 2
	    @ xend = ($xsize + $xcxsize) / 2 - 1
	    @ ystart = ($ysize - $xcysize) / 2
	    @ yend = ($ysize + $xcysize) / 2 - 1
	    set xcsrc = $setname.bl
	    sed -e s/$srcname/$dstname/g\
	        -e s/$setname.ali/$xcsrc/\
	        -e "/^TransformFile/s/^T/#T/"\
	        -e "/^#*$subdistort/s/.*/DistortionField	$distort/"\
	        -e "/^ImagesAreBinned/s/1/$binning/"\
	        -e "/^#*$subgradient/s/^#//"\
                -e "/^AdjustedFocus/s/0/$focusAdj/"\
	        -e "/^SloppyMontage/s/0/1/"\
	        -e "/^ShiftPieces/s/0/1/"\
		-e "/^StartingAndEndingX/s/[ 	].*/	$xstart $xend/"\
		-e "/^StartingAndEndingY/s/[ 	].*/	$ystart $yend/"\
                -e /mrctaper/d\
		    <$srcfile >>$dstfile

            echo '$doxcorr:' >> $dstfile
	endif

        set srcfile = $srcdir/"xcorr"$srcext
        sed -e s/$srcname/$dstname/g\
	    -e "/^FirstTiltAngle/s/.*/$tiltTypeText	$tiltStart/"\
	    -e "/^$tiltIncText/s/[ 	].*/	$tiltInc/"\
	    -e "/^$incDelText/d"\
	    -e "/^RotationAngle/s/[ 	].*/	$axisangle/"\
	    -e s/$setname.st/$xcsrc/\
	    <$srcfile >>$dstfile
	echo '$'"if (-e $backupname) $backupname" >> $dstfile

	if ($montage == "0") then

	    # GET PRENEWST

	    set srcfile = $srcdir/"prenewst"$srcext
	    set dstfile = "prenewst"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
                -e "/newst/s/-xf/$xftext/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile

	    # GET NEWST

	    set srcfile = $srcdir/"ccdnewst"$srcext
	    set dstfile = "newst"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
                -e "/newst/s/-xf/$xftext/"\
		-e "/newst/s/-size ,,/-size $newstwidth,$SAMPLESIZE/g"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile

	else

	    # OR, GET PREBLEND AND BLEND

	    set srcfile = $srcdir/"ccdpreblend"$srcext
	    set dstfile = "preblend"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
	        -e "/^#*$subdistort/s/.*/DistortionField	$distort/"\
	        -e "/^ImagesAreBinned/s/1/$binning/"\
	        -e "/^#*$subgradient/s/^#//"\
                -e "/^AdjustedFocus/s/0/$focusAdj/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile

	    @ ymin = $ysize / 2 - $SAMPLESIZE / 2
	    @ ymax = $ysize / 2 + $SAMPLESIZE / 2
	    set srcfile = $srcdir/"blend"$srcext
	    set dstfile = "blend"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
	        -e "/^#*$subdistort/s/.*/DistortionField	$distort/"\
	        -e "/^ImagesAreBinned/s/1/$binning/"\
	        -e "/^#*$subgradient/s/^#//"\
                -e "/^AdjustedFocus/s/0/$focusAdj/"\
	        -e "/^SloppyMontage/s/0/1/"\
	        -e "/^ShiftPieces/s/0/1/"\
	        -e "/^ReadInXcorrs/s/0/1/"\
	        -e "/^OldEdgeFunctions/s/0/1/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile
	    set backuplist = ($backuplist $setname.ecd)
	endif

    else

	# FOR FILM, GET BLEND OR NEWST

	set tiltxf = $setname.xf
	set tracksrc = $setname.st

	if ($montage == "1") then
	    set buildnew = "0"
	    set shiftopt = "0"

	    # IF PREBLEND, GET FILE, SET UP THINGS DIFFERENTLY FOR BLEND

	    if ($preblend == "1") then
		set wipepl = $setname.pl
		set tracksrc = $setname.bl
		set srcfile = $srcdir/"blend"$srcext
		set dstfile = "preblend"$dstext
		set backuplist = ($backuplist $dstfile)
		set buildnew = "1"
		set shiftopt = "1"
		if (-e $dstfile) \mv -f $dstfile $dstfile~
		sed -e s/$srcname/$dstname/g\
                    -e "/^TransformFile/s/^T/#T/"\
                    -e "/^ShiftPieces/s/0/1/"\
                    -e /mrctaper/d\
		    -e s/$setname.ali/$tracksrc/\
		    <$srcfile >$dstfile
		echo '$'"if (-e $backupname) $backupname" >> $dstfile
	    endif		

	    @ ymin = $ysize / 2 - $SAMPLESIZE / 2
	    @ ymax = $ysize / 2 + $SAMPLESIZE / 2
	    set srcfile = $srcdir/"blend"$srcext
	    set dstfile = "blend"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
                -e "/^ShiftPieces/s/0/$shiftopt/"\
	        -e "/^OldEdgeFunctions/s/0/$buildnew/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile
	    set backuplist = ($backuplist $setname.ecd)
	 
	else

	    # IF NEWST, NEED NUMBER OF SECTIONS, AND IF THERE IS A PL FILE,
	    # HAVE TO GET A LIST OF SECTION NUMBERS FOR NEWST ALSO.

	    if (-e $stackname) then
		@ numsec =  `header -si $stackname | sed '/[[:cntrl:]]/s///g' | awk '{print $3}'`
	    else
                if ($interactive) then
                    echo -n "Cannot find $stackname - Enter the total number of views in the stack: "
                    @ numsec = $<
                else if (! $numsec) then
                    echo "Cannot find $stackname - you must enter # of sections with -zsize or -bzsize"
                    exit 1
                endif 
	    endif

	    @ numsec--
	    set xfsec = "0-"$numsec

	    if (-e $setname.pl) then
                if ($interactive) then
                    echo "Enter list of section numbers needed to put the images"
                    echo "   in the proper order in an aligned stack"
                    set imsec = $<
                else if ($imsec == "") then
                    echo "There is a .pl file, so you must enter list to order images with -orderlist or -borderlist"
                    exit 1
                endif
	    else
		echo "Assuming images are in order in file because there is no $setname.pl file"
		set imsec = $xfsec
		set wipepl = $setname.pl
	    endif

	    set srcfile = $srcdir/"filmnewst"$srcext
	    set dstfile = "newst"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
		-e "/size/s/.*	/$newstwidth,$SAMPLESIZE	/"\
		-e "/list of sections/s/.*	/$imsec	/"\
		-e "/list of transforms/s/.*	/$xfsec	/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile
	endif
    endif

    # GET TRACK: WIPE OUT PL ENTRY WHEN NO MONTAGE FOR FILM
    # SET INPUT TO .PREALI FOR CCD

    set srcfile = $srcdir/"track"$srcext
    set dstfile = "track"$dstext
    set backuplist = ($backuplist $dstfile $setname.seed $setname.fid)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e s/$srcname/$dstname/g\
	-e "/^FirstTiltAngle/s/.*/$tiltTypeText	$tiltStart/"\
	-e "/^$tiltIncText/s/[ 	].*/	$tiltInc/"\
	-e "/^$incDelText/d"\
	-e "/^RotationAngle/s/[ 	].*/	$axisangle/"\
	-e "/^#*SkipViews.*/s//SkipViews	$excludelist/"\
	-e "/^#*$wipeskip/d"\
	-e "/^CentroidRadius/s/[ 	].*/	$beadrad/"\
	-e "/^BoxSizeXandY/s/[ 	].*/	$boxsize,$boxsize/"\
	-e "s/$stackname/$tracksrc/"\
	-e s/$wipepl//\
	<$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile

    # COPY EMPTY SEED MODELS
    if (! -e $setname.seed) \cp $srcdir/$seedname $setname.seed

    # GET ALIGN; zero FixXYZCoords IF SINGLE AXIS; SET OUTPUT TO .TLTXF FOR CCD

    set fixxyz = "1"
    if ($numax == 1) set fixxyz = "0"

    # set the frame size bigger if needed for a montage set

    set alxsize = $xsize
    set alysize = $ysize
    if ($preblend == "1") then
	set alxsize = `goodframe $xsize | sed '/[[:cntrl:]]/s///g'`
	set alysize = `goodframe $ysize | sed '/[[:cntrl:]]/s///g'`
    endif

    # 5/3/02: change to using image file name, keep dimensions commented out

    set srcfile = $srcdir/"align"$srcext
    set dstfile = "align"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e s/$srcname/$dstname/g\
	-e "/^FirstTiltAngle/s/.*/$tiltTypeText	$tiltStart/"\
	-e "/^$tiltIncText/s/[ 	].*/	$tiltInc/"\
	-e "/^$incDelText/d"\
	-e "/^RotationAngle/s/[ 	].*/	$axisangle/"\
	-e "/ImageSizeXandY/s/[ 	].*/	$alxsize,$alysize/"\
	-e "/^#*ExcludeList.*/s//ExcludeList	$excludelist/"\
	-e "s/$stackname/$tracksrc/"\
	-e "s/$setname.xf/$tiltxf/"\
        -e "/^FixXYZCoordinates/s/.*/FixXYZCoordinates	$fixxyz/"\
	-e "/^#*$wipeexclude/d"\
	<$srcfile >$dstfile


    if ($local == 1) then
	set backuplist = ($backuplist $setname"local.xf")
    endif

    if ($filmccd != "F")then
	cat >> $dstfile <<EOF
#
# COMBINE TILT TRANSFORMS WITH PREALIGNMENT TRANSFORMS
#
\$xfproduct -StandardInput
InputFile1 $setname.prexg
InputFile2 $setname.tltxf
OutputFile ${setname}_fid.xf
\$\\cp ${setname}_fid.xf $setname.xf
\$\\cp  $setname.tlt ${setname}_fid.tlt
EOF
    endif
    cat >> $dstfile <<EOF
#
# CONVERT RESIDUAL FILE TO MODEL
#
\$if (-e $setname.resid) patch2imod -s $RESIDUAL_SCALE $setname.resid $setname.resmod
EOF

    set backuplist = ($backuplist $setname.xf $setname.tlt $setname.resid $setname.resmod $setname.3dmod)
    if ($naxis == "2") set backuplist = ($backuplist $setname"fid.xyz")
    echo '$'"if (-e $backupname) $backupname" >> $dstfile


    # GET MTFFILTER

    set srcfile = $srcdir/"mtffilter"$srcext
    set dstfile = "mtffilter"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e s/$srcname/$dstname/g\
        <$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile


    # GET TILT

    set fullx = $xsize
    set fully = $ysize
    if ($axangnum > 70 || $axangnum < -70) then
	set fullx = ysize
	set fully = xsize
    endif

    # Adjust mode in tilt output.  
    # Also adjust base for log if maximum denisty is negative and minimum is
    # very negative and mode is 1
    #
    set mode = 1
    if (-e $setname".st") then
	 set modeline = `header -mo $stackname | sed '/[[:cntrl:]]/s///g'`
	 if ("$modeline" == 2) set mode = 2
         @ mindens = `header -min $stackname | sed '/[[:cntrl:]]/s///g' | awk '{print int($1)}'`
         @ meandens = `header -mean $stackname | sed '/[[:cntrl:]]/s///g' | awk '{print int($1)}'`
         if ($mode == 1 && $meandens < -1000 && $mindens < -10000) set logbase = 32768
    endif

    set delexclude = "gibberish"
    if ($excludelist == "") set delexclude = "EXCLUDELIST"

    if ($montage == "1") then
	set alxsize = `goodframe $xsize | sed '/[[:cntrl:]]/s///g'`
	set alysize = `goodframe $ysize | sed '/[[:cntrl:]]/s///g'`
    endif

    set srcfile = $srcdir/"tilt"$srcext
    set dstfile = "tilt"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e s/$srcname/$dstname/g\
        -e "/^LOG/s/LOG.*/LOG $logbase/"\
        -e "/MODE/s/MODE.*/MODE $mode/"\
	-e "/FULLIMAGE/s//FULLIMAGE $alxsize $alysize/"\
	-e "/EXCLUDELIST/s//EXCLUDELIST $excludelist/"\
	-e "/$delexclude/d"\
        <$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile

    # COMPUTE OFFSET FOR SAMPLING

    @ ofsize = $ysize
    if ($axangnum > 70 || $axangnum < -70) @ ofsize = $xsize

    @ border = $MINBORDER1
    if ($ofsize > $BORDERSTEP1) @ border = $MINBORDER2
    if ($ofsize > $BORDERSTEP2) @ border = $MINBORDER2 + (($ofsize - $BORDERSTEP2) / $BORDERFAC)
    if ($filmccd != "F") @ border = `echo $border $CCDBORDERFAC | awk '{print (int ( $1 * $2))}'`
    @ offset = $ofsize / 2 - $border
    @ halfsampali = $SAMPALISIZE / 2
    if ($halfsampali > $border - 10) @ halfsampali = $border - 10
    @ sampali = 2 * $halfsampali
    @ slmin = $halfsampali - $SAMPLESIZE / 2
    @ slmax = $slmin + $SAMPLESIZE - 1
    @ sllimit = $SAMPALISIZE - 1

    set offarr = (0 $offset -$offset)
    set bmtarr = (mid$recext top$recext bot$recext)

    set dstfile = "sample"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~

    # MAKE UP SAMPLE FILE WITH VARIOUS CASES

    cat > $dstfile <<EOF
# THIS IS A COMMAND FILE TO MAKE 3 TOMOGRAM SAMPLES
#
# The sample aligned stacks will each be $SAMPALISIZE pixels in Y
# The sample tomograms will have $SAMPLESIZE slices
# To get more slices in the samples, change "SLICE $slmin $slmax" by
# decreasing $slmin and increasing $slmax by equal amounts, up to 0 and $sllimit
#
EOF

    @ ind = 0
    while ($ind < 3)
        @ ind++
        @ offind = $offarr[$ind]
        # THESE () WERE NEEDED TO KEEP IT FROM BEING EVALED RIGHT TO LEFT
        @ ymin = ($ofsize / 2 + $offind) - $halfsampali
        @ ymax = ($ofsize / 2 + $offind) + $halfsampali
        if ($montage == "0") then
            if ($filmccd == "F") then
                sed -e "/single offset/s/.*	/0,$offind	/"\
                    -e "/size/s/,.*	/,$sampali	/"\
                    -e "/if (-e/d"\
                    -e "/mrctaper/d"\
                    <newst$dstext >>$dstfile
            else
                sed -e "s/-offset 0,0/-offset 0,$offind/"\
                    -e "/\(-size *[0-9]*,\)[0-9]* /s//\1$sampali /"\
                    -e "/if (-e/d"\
                    -e "/mrctaper/d"\
                    -e "/THIS IS A COMMAND FILE/s//THESE ARE COMMANDS/"\
                    <newst$dstext >>$dstfile
            endif
        else
            sed -e "/^OldEdgeFunctions/s/0/1/"\
                -e "/^StartingAndEndingY/s/[ 	].*/	$ymin $ymax/"\
                -e "/if (-e/d"\
                -e "/mrctaper/d"\
                 -e "/Command file/s//Commands/"\
                <blend$dstext >>$dstfile
        endif

        cat << EOF >> $dstfile
\$sed -e '/^[\$#]/d' -e '/SUBSETSTART.*/s//SUBSETSTART 0 $ymin/' \
 -e '/$setname.*\.rec/s//$bmtarr[$ind]/' -e '/SLICE/d' -e '/WIDTH/d' \
 -e '/THICKNESS/a\\\\\\
SLICE $slmin $slmax 1\\\\
' tilt$dstext |tilt
EOF
    end

    echo '$'"if (-e $backupname) $backupname" >> $dstfile

    # GET FINDSEC

    set npatch = 5
    if ($xsize >= 800) set npatch = 7
    if ($xsize >= 1050) set npatch = 9
    set srcfile = $srcdir/"findsec"$srcext
    set dstfile = "findsec"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e "/size of patch/s/,.*	/,$npatch	/"\
	-e "/spacing between sample/s/.*	/-$offset	/"\
	-e "s/\.rec/$recext/"\
	<$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile
    
    # GET TOMOPITCH

    set srcfile = $srcdir/"tomopitch"$srcext
    set dstfile = "tomopitch"$dstext
    set backuplist = ($backuplist $dstfile top$modext mid$modext bot$modext tomopitch$modext)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e "/^SpacingInY/s/[ 	].*/	-$offset/"\
	-e "s/\.mod/$modext/g"\
	-e "s/\.rec/$recext/g"\
	<$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile
    

    # PREPARE FOR NEXT ROUND

    @ temp = $xsize
    @ xsize = $ysize
    @ ysize  = $temp
    @ iaxis++
end

# OUTPUT THE BACKUP FILE

if ($backup == "1")then

    if ($naxis == "2") set backuplist = ($backuplist combine.com solve.xf refine.xf inverse.xf warp.xf patch.out combine.log)

    cat << EOF >! $backupname
#! /bin/csh -f
set backupdir = "$backupdir"
set backuplist = ( \\
EOF
    @ num = 0
    while ($#backuplist > 0)
      	echo -n "$backuplist[1]  " >> $backupname
	shift backuplist
	@ num++
	if (($num % 4) == 0) then
cat << EOF >> $backupname
\\
EOF
	endif
    end

    cat << EOF >> $backupname
)
while (\$#backuplist > 0)
  set flnm = \$backuplist[1]
  if (-e \$flnm) then
    if (! -e "\$backupdir/\$flnm") \\cp -p \$flnm "\$backupdir"
    \\find . -name \$flnm -newer "\$backupdir/\$flnm" -exec cp -p "{}" "\$backupdir" \\;
  endif
  shift backuplist
end
EOF
    chmod +x $backupname
    $backupname
endif

set setname = $rootname
set dstext = ".com"
set moda = ""
if ($numax == 2) then
    set setname = $rootname"a"
    set dstext = "a.com"
    set moda = "a"
endif

echo " "
echo "Run files in the following sequence:"
echo " "
if ($filmccd == "F")then
    if ($montage == "1" && $preblend == "1")echo preblend$dstext   to create   $setname.bl
else
    if ($erase == "1") echo "eraser$dstext   to modify   $setname.st"
    echo "xcorr$dstext   to create   $setname.prexf"
    if ($montage == "0") then
	echo "prenewst$dstext   to create   $setname.preali"
    else
	echo "preblend$dstext   to create   $setname.preali"
    endif
endif

echo "track$dstext   to create   $setname.fid"
echo "align$dstext   to create   $setname.xf  and  $setname.tlt"

echo "sample$dstext   to create   top$moda.rec, mid$moda.rec, bot$moda.rec"
echo "tomopitch$dstext   to find angles of section from tomopitch$moda.mod"

if ($montage == "0") then
    echo "newst$dstext   to create   $setname.ali"
else
    echo "blend$dstext   to create   $setname.ali"
endif

echo "mtffilter$dstext   to create   ${setname}_filt.ali   (optional)"
echo "tilt$dstext   to create   $setname.rec"

if ($naxis == "2") then
cat <<EOF

Run similar command files for the second axis.
After the tomograms are built, run setupcombine to get combine.com.
EOF
endif

if ($backup == "1") then
cat <<EOF

Command files and other small informative files will be saved to
$backupdir whenever you run one of these command
files.  To back up these files at other times, give the command line command
   $backupname
EOF
endif

exit 0

usage:
cat <<EOF
Usage: copytomocoms -options
Options may be abbreviated to unique strings, characters in [] are optional.
When there are two axes, for some options the basic entry applies to the
first axis and there is a separate entry for the second axis.
Current options:
  -na[me]  name      Root name of data set (omitted a or b for dual-axis set)
  -du[al]            Dual-axis data set
  -mo[ntage]         Data are montaged
  -bac[kup]  dir     Set directory for backing up small files
  -pi[xel]  #        Pixel size in nanometers
  -go[ld]   #        Size of gold beads in nanometers
  -ro[tation]  #     Angle from the vertical to the tilt axis in raw images
  -bro[tation] #     Angle from the vertical to the tilt axis for b axis
  -fir[stinc] #,#    First tilt angle and tilt angle increment
  -bfi[rstinc] #,#   First tilt angle and tilt angle increment for b axis
  -us[erawtlt]       Take tilt angle from a .rawtlt file
  -bus[erawtlt]      Take tilt angle from a .rawtlt file for b axis
  -ex[tract]         Extract tilt angles from data file
  -be[xtract]        Extract tilt angles from data file for b axis
  -sk[ip]  list      List of views to exclude from processing
  -bs[kip]  list     List of views to exclude from processing for b axis
  -di[stort]  name   Undistort images with the given .idf file
  -bi[nning]  #      Binning of raw stacks (needed to undistort if ambiguous)
  -gr[adient]  name  Correct for mag gradients using the given .mgt file
  -fo[cus]           Focus was adjusted between frames when acquiring montage
  -bfo[cus]          Focus was adjusted between montage frames for b axis
 
Options for special cases or film data:
  -xs[ize]  #        X size of image data (needed if data file not present)
  -ys[ize]  #        Y size of image data (needed if data file not present)
  -an[gles] list     Complete list of tilt angles, on one line with no spaces
  -ban[gles] list    Complete list of tilt angles for b axis
  -fil[m]            Data are from film, not CCD
  -zs[ize]  #        Number of sections (needed if stack not present for film)
  -bzs[ize]  #       Number of sections for b axis
  -or[derlist] list  List of section numbers for reordering film data
  -bor[derlist] list List of section numbers for reordering data for b axis
EOF
exit 0


#
#  $Log$
#  Revision 3.46  2006/02/16 06:47:09  mast
#  Stripped control chars from output of sed/header etc for Windows
#
#  Revision 3.45  2006/02/06 22:11:16  mast
#  Made ccderaser radius dynamic and smaller than fiducial size
#
#  Revision 3.44  2005/11/19 04:31:26  mast
#  Quote path setting to preserve spaces
#
#  Revision 3.43  2005/10/28 04:32:49  mast
#  Fixed error in testing for non-entered pixel size, and added a useless
#  sending of pixel size to extractmagrad when header has none.
#
#  Revision 3.42  2005/10/27 14:15:41  mast
#  Changed WARNING to INFO for actions that etomo will take care of
#
#  Revision 3.41  2005/10/05 17:46:37  mast
#  Got b axis size from b axis data, gave warning about FULLIMAGE if no
#  b axis yet
#
#  Revision 3.40  2005/06/08 20:10:48  mast
#  Leave fid.xyz in align.com for single axis, set FixXYZCoordinates to
#  1 for dual and 0 for single axis
#
#  Revision 3.39  2005/05/11 05:35:42  mast
#  Changes for PIP style track.com
#
#  Revision 3.38  2005/03/23 23:18:49  mast
#  Fixed FULLIMAGE output for tilt.com in montage case
#
#  Revision 3.37  2005/03/01 22:08:04  mast
#  Added distortion and mag gradient correction for montages
#
#  Revision 3.36  2005/03/01 18:34:59  mast
#  Changed test for negative densities in stack to be based on mean density
#  instead of max density
#
#  Revision 3.35  2005/02/17 17:25:10  mast
#  Added goto to xcorr.com for blend, to skip the blendmont
#
#  Revision 3.34  2005/02/11 23:14:20  mast
#  Handle distortion and mag gradient filenames better in case of spaces
#  in path or Windows filenames
#
#  Revision 3.33  2005/01/28 16:20:20  mast
#  Fixed bug in processing exclude list in align.com
#
#  Revision 3.32  2005/01/25 19:29:24  mast
#  Converted blendmont commands to use 0/1 instead of commenting out
#
#  Revision 3.31  2005/01/03 20:25:15  mast
#  Changed for new PIP version of align.com
#
#  Revision 3.30  2004/08/27 05:46:48  mast
#  Switched to using head -n and tail -n
#
#  Revision 3.29  2004/07/12 18:16:56  mast
#  Fixed problem with increment angle not getting into align.com and track.com
#
#  Revision 3.28  2004/06/10 22:45:52  mast
#  Added automatic setting of log base to 32767 if densities are negative
#
#  Revision 3.27  2004/04/22 17:34:14  mast
#  Copied .tlt to _fid.tlt in align.com
#
#  Revision 3.26  2004/03/30 19:46:28  mast
#  Added mtffilter, rearranged directions at end.
#
#  Revision 3.25  2004/03/20 15:30:12  mast
#  Added mag gradient option
#
#  Revision 3.24  2004/03/14 16:44:57  mast
#  Changed xfproduct output to keyword-value pairs
#
#  Revision 3.23  2004/03/12 00:07:31  mast
#  Changed substitution text from tab to [space tab] for sed on PIP input
#
#  Revision 3.22  2004/03/11 21:31:27  mast
#  Converted tiltxcorr to PIP input
#
#  Revision 3.21  2004/02/23 22:49:58  mast
#  Needed to escape any / characters in distortion filename
#
#  Revision 3.20  2004/01/28 00:28:11  mast
#  Change from .fidxf to _fid.xf
#
#  Revision 3.19  2004/01/27 03:02:41  mast
#  Added command line argument interface and distortion options
#
#  Revision 3.18  2004/01/13 20:02:06  mast
#  ($<) does not work in true csh on SGI, so make wordlist in two steps
#
#  Revision 3.17  2003/12/22 19:15:37  mast
#  Allow the B axis data file to not exist yet and issue appropriate warnings
#
#  Revision 3.16  2003/12/09 00:07:36  mast
#  Make the sed append command in sample add new line after SLICE for Mac 10.2
#
#  Revision 3.15  2003/12/02 19:13:58  mast
#  Added instructions for making thicker samples to sample.com
#
#  Revision 3.14  2003/11/18 04:00:43  mast
#  Fix format of sed append in sample.com so it works on Mac 10.3
#
#  Revision 3.13  2003/10/16 20:51:14  mast
#  Increased Y dimension of aligned stacks used to make samples, modified
#  sample.com to use the central 10 slices, and protected samples from
#  existing slice and width statements in tilt.com
#
#  Revision 3.12  2003/09/19 20:06:15  mast
#  Changed sample.com so that Tilt puts out the top...rec files directly, to
#  avoid name conflicts and overwriting real reconstructions
#
#  Revision 3.11  2003/08/09 23:18:41  mast
#  Changes for using PIP input in blendmont
#
#  Revision 3.10  2003/07/08 21:06:49  mast
#  Add test for existence of .resid file in align.com before running patch2imod
#
#  Revision 3.9  2003/06/05 00:09:17  mast
#  Copy seed model only if it does not exist
#
#  Revision 3.8  2003/06/04 23:57:38  mast
#  Copy empty seed models
#
#  Revision 3.7  2003/06/03 00:02:10  mast
#  Fix question that said "first" for both sets
#
#  Revision 3.6  2003/05/20 23:57:38  mast
#  Strip spaces from exclude list
#
#  Revision 3.5  2003/05/16 15:33:23  mast
#  Made it work with spaces in names for current and backup directories
#
#  Revision 3.4  2002/12/21 00:01:07  mast
#  Add conversion of tiltalign residual file to model
#
#  Revision 3.3  2002/11/04 20:45:50  mast
#  Changed output to savework file to fix \ output under tcsh 6.12 bug,
#  changed output to sample.com to protect \ outputs also.
#
#  Revision 3.2  2002/05/20 19:12:01  mast
#  Changes to have tomopitch operate on one model file
#
#  Revision 3.1  2002/05/07 01:59:42  mast
#  Added a query for global exclusion list
#
#  Revision 3.0  2001/11/29 18:11:10  rickg
#  *** empty log message ***
#
#  Revision 1.3  2001/11/28 23:20:18  mast
#  Make samplea.com produce, and findseca.com use, topa.rec, mida.rec, and
#  bota.rec.
