#! /bin/csh -f
# SCRIPT TO COPY AND MODIFY COMMAND FILES FOR TOMOGRAPHY

set SAMPLESIZE = 10               # Size of sample tomogram
set SAMPALISIZE = 60              # Size of aligned stack for sampling
@ MINBORDER1 = 30                 # Minimum border size
@ MINBORDER2 = 40                 # Minimum size if y dimension > borderstep1
@ BORDERSTEP1 = 500               # threshold for using minborder2
@ BORDERSTEP2 = 1000              # threshold for linearly increasing size
@ BORDERFAC = 10                  # controls linear increase of border size
set CCDBORDERFAC = 2.0            # extra size of border for CCD images
set RESIDUAL_SCALE = 10           # scaling for tiltalign residuals
set backupname = "./savework"

set single_srcname = "g5a"
set dual_srcname = "g5"
set seedname = "empty.seed"

#  $Author$
#
#  $Date$
#
#  $Revision$
#
# Log at end of file
#
if ($?IMOD_DIR) then
    set srcdir = "$IMOD_DIR/com"
    set path = ($IMOD_DIR/bin $path)
else
    echo "Environment variable IMOD_DIR must be set to the top IMOD directory"
    exit 1
endif

if (! -d $srcdir) then
    echo "Source directory for command files, $srcdir, not found."
    echo "Edit $0 if necessary to set the source directory correctly"
    exit 1
endif

if ("$PWD" == $srcdir) then
    echo "You should be in the directory where your data are located, not"
    echo "in the com directory."
    exit 1
endif

set noglob

echo " "
echo "This program will set up the command files needed for tomography."
echo "There are no command line arguments."
echo "Just answer each of the questions in turn."
echo "To interrupt, type Ctrl-C then Return."
echo " "


set naxis = "0"
while ($naxis != "1" && $naxis != "2")
    echo -n "Do you have tilts around one axis or two axes (Enter 1 or 2)? "
    set naxis = $<
end

# FIND OUT IF FILM OR CCD

set filmccd = "0"
while ($filmccd != "C" && $filmccd != 'c' && $filmccd != 'F')
    echo "Enter f (for film) if your tilt images are already fairly well aligned,"
    echo -n " or c (for CCD) if the images need prealignment: "
    set filmccd = $<
    if ($filmccd == "f") set filmccd = "F"
end

    # IN EITHER CASE, FIND OUT IF MONTAGE

set montage = "-1"
while ($montage == "-1")
    echo -n "Are the data montaged (Enter y or n)? "
    set ifmont = $<
    if ($ifmont == "y" || $ifmont == "Y") set montage = "1"
    if ($ifmont == "n" || $ifmont == "N") set montage = "0"
end

if ($filmccd == "F") then
    set logbase = "-250"
    set preblend = "0"

    # IF FILM AND MONTAGE, FIND OUT IF NEED PREBLEND
    if ($montage == "1") then
	set preblend = "-1"
	while ($preblend == "-1")
	    echo  "Do you need to correct for errors in overlap between pieces"
	    echo -n " when you blend the pieces together (Enter y or n)? "
	    set ifpre = $<
	    if ($ifpre == "y" || $ifpre == "Y") set preblend = "1"
	    if ($ifpre == "n" || $ifpre == "N") set preblend = "0"
	end
    endif
else

    set logbase = "0"

    # IF CCD, ASK IF NEED ERASER

    set erase = "-1"
    while ($erase == "-1")
	echo -n "Do you need to run CCDERASER on the data (Enter y or n)? "
	set ifera = $<
	if ($ifera == "y" || $ifera == "Y") set erase = "1"
	if ($ifera == "n" || $ifera == "N") set erase = "0"
    end

endif

# ASK IF WANT TO DO LOCAL ALIGNMENTS

set local = "-1"
while ($local == "-1")
    echo -n "Is it possible that you will need to use local alignments (Enter y or n)? "
    set ifloc = $<
    if ($ifloc == "y" || $ifloc == "Y") set local = "1"
    if ($ifloc == "n" || $ifloc == "N") set local = "0"
end



# GET ROOT NAME OF DATA SET AND DIMENSIONS 

if ($naxis == "1") then
    set srcname = $single_srcname
    echo -n "Enter root name of data set (omitting .st): "
    set rootname = $<
    set stackname = $rootname.st
    set piecename = $rootname.pl

else
    set srcname = $single_srcname
    echo -n "Enter root name of data sets (omitting a.st or b.st): "
    set rootname = $<
    set stackname = $rootname"a.st"
    set piecename = $rootname"a.pl"

endif

# GET BACKUP AND POSSIBLE TRUE SOURCE DIRECTORY OF FILES

set backup = "-1"
while ($backup == "-1")
    echo "If you want command files and small result files to be saved to another"
    echo " directory for backup protection, enter the path name of the directory;"
    echo -n " otherwise Return: "
    set backupdir = "$<"
    if ("$backupdir" == "") then
	set backup = "0"
    else
        echo $backupdir
	if ((-d "$backupdir") && (-w "$backupdir")) then
	    set backup = "1"
	    if ((! -e $stackname) && (-e "$backupdir/$stackname")) then
		echo "Creating link to $backupdir/$stackname in current directory"
		ln -s "$backupdir/$stackname" .
	    endif
	    if ($naxis == "2")then
		set bname = $rootname"b.st"
		if ((! -e $bname) && (-e "$backupdir/$bname")) then
		    echo "Creating link to $backupdir/$bname in current directory"
		    ln -s "$backupdir/$bname" .
		endif
	    endif
	endif
    endif
end
set backuplist = ""

# GET X AND Y SIZE FROM STACK IF IT EXISTS AND IS NOT MONTAGE

set sizevar = "0"
if ((-e $stackname) && ($montage == "0")) then
    set sizevar = `header $stackname | sed -n '/rows, sections/p'| awk '{print $7, $8, $9}'`
else if ((-e $stackname) && ((-e $piecename) || ($filmccd != "F"))) then
    if (-e $piecename) then
	set sizevar = `montagesize $stackname $piecename | sed -n '/Total/s/Total.*://p'`
    else
	set sizevar = `montagesize $stackname | sed -n '/Total/s/Total.*://p'`
    endif
endif

set xysize = ($sizevar)
if ($#xysize == 3) then
    @ xsize = $xysize[1]
    @ ysize = $xysize[2]

else

    # OTHERWISE ASK THE USER FOR THE SIZES

    set sayaset = ":"
    if ($naxis == "2") set sayaset = ' in the first ("a") set:'

    echo -n "Enter X dimension of tilt images$sayaset "
    set xsize = $<
    echo -n "Enter Y dimension of tilt images$sayaset "
    set ysize = $<
endif

# GET INFORMATION FOR SETTING UP TRACK.COM RADIUS AND BOX SIZE

echo -n "Pixel size in nanometers (Return if unavailable): "
set pixsize = $<
if ($pixsize == "") then
    echo -n "Diameter of gold beads in PIXELS (not nanometers): "
    set beadsize = $<
else
    echo -n "Diameter of gold beads in NANOMETERS: "
    set beadnm = $<
    set beadsize = `echo $beadnm $pixsize | awk '{print $1 / $2}'`
endif
set beadrad = `echo $beadsize | awk '{printf "%.2f", 0.5 * ($1 + 3)}'`

switch ($beadrad)
    case 0.*:
    case 1.*:
    case 2.*:
    case 3.*:
    case 4.*:
	set boxsize = "32"
	breaksw
    case 5.*:
    case 6.*:
	set boxsize = "40"
	breaksw
    default:
	set boxsize = "48"
	breaksw
endsw


set srcext = ".com"
@ numax = $naxis
@ iaxis = 0
while ($iaxis < $numax)

    set setname = $rootname
    set dstext = ".com"
    set modext = ".mod"
    set logext = ".log"
    set recext = ".rec"
    if ($numax == 2) then
	set setlet = "a"
        set sayaset = 'first ("a")'
	if ($iaxis == 1) then
            set setlet = "b"
        set sayaset = 'second ("b")'
        endif
	echo ' '
	echo "Now make entries specific to the $sayaset set"
	echo ' '
	set setname = $rootname$setlet
	set dstext = "$setlet.com"
	set modext = "$setlet.mod"
	set logext = "$setlet.log"
	set recext = "$setlet.rec"
    endif

    set dstname = $setname

    # GET TILT ANGLE AND AXIS INFORMATION

    echo  "Enter estimated angle of rotation from the vertical axis to the "
    echo -n "   tilt axis in the raw images (counterclockwise positive): " 
    set axisangle = $<

    @ axangnum = `echo $axisangle | awk '{ print int($1)}'` 
    set newstwidth = ""
    if ($axangnum > 70 || $axangnum < -70) set newstwidth = $ysize

    if ($filmccd != "F") then

	# IF CCD, FIND OUT IF WANT TO EXTRACT A RAWTLT FILE

	set tiltspec = $setname".rawtlt"
        if (! -e $tiltspec) then
	    echo "Do you want to make a .rawtlt file by extracting tilt angles"
	    echo -n "  from the image file (Enter y or n)? "
	    set ifextract = $<
	    if ($ifextract == "y" || $ifextract == "Y") then
	        extracttilts $setname".st" $tiltspec | tail  -1
	    endif
	endif

	# AND IF MONTAGED CCD, JUST EXTRACT THE PIECE LIST IF NEEDED

	if ($montage == "1") then
	    set plspec = $setname.pl
	    if ((! -e $plspec)  && (-e $setname.st)) then
		echo "Extracting piece list file from the image file..."
		extractpieces $setname".st" $plspec | tail -1
	    endif
	endif
    endif

    echo "Enter -1 to specify all tilt angles, 1 to specify a starting and increment"
    echo -n "   tilt angle, or 0 to take tilt angles from a .rawtlt file: "
    @ tiltopt = $<
    
    if ($tiltopt < 0) then
	echo "Enter all of the tilt angles, all in one line, separated by commas"
	set tiltspec = $<
    else if ($tiltopt > 0) then
	echo "Enter starting tilt angle and tilt increment, separated by a comma: "
	set tiltspec = $<
    else
	set tiltspec = $setname".rawtlt"
    endif

    echo "Enter list of views to exclude from tracking, alignment, and reconstruction,"
    echo "  or Return if none (enter ranges separated by commas, e.g. 1,77-80)"
    set excludelistin = ($<)
    set excludelist = ""
    while ($#excludelistin > 0)
        set excludelist = ${excludelist}$excludelistin[1]
        shift excludelistin
    end

    set backuplist = ($backuplist $setname.pl $setname.rawtlt track$logext align$logext findsec$logext tomopitch$logext)

    # FOR CCD CAMERA ONLY

    set wipepl = "gibberish9876543"
    if ($filmccd != "F") then

	set wipepl = $setname.pl
	set tiltxf = $setname.tltxf
	set tracksrc = $setname.preali

	# GET ERASER IF DESIRED

	if ($erase == "1") then
	    set srcfile = $srcdir/"eraser"$srcext
	    set dstfile = "eraser"$dstext
	    set backuplist = ($backuplist $dstfile $setname.erase)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g <$srcfile >$dstfile
	endif


	# GET XCORR

	set dstfile = "xcorr"$dstext
        set backuplist = ($backuplist $dstfile $setname.prexf $setname.prexg $setname.tltxf)
	if (-e $dstfile) \mv -f $dstfile $dstfile~
cat > $dstfile <<EOF
# THIS IS A COMMAND FILE TO RUN TILTXCORR AND DETERMINE CROSS-CORRELATION
# ALIGNMENT OF A TILT SERIES
#
EOF
        set xcsrc = $setname.st
	set preblend = "0"
	if ($montage == "1") then

	    # IF MONTAGED, START THE FILE WITH PREBLEND - LIMIT SIZE TO 1024

	    set preblend = "1"
	    set srcfile = $srcdir/"blend"$srcext
	    @ xcxsize = $xsize
	    @ xcysize = $ysize
	    if ($xcxsize > 1024) @ xcxsize = 1024
	    if ($xcysize > 1024) @ xcysize = 1024
	    @ xstart = ($xsize - $xcxsize) / 2
	    @ xend = ($xsize + $xcxsize) / 2 - 1
	    @ ystart = ($ysize - $xcysize) / 2
	    @ yend = ($ysize + $xcysize) / 2 - 1
	    set xcsrc = $setname.bl
	    sed -e s/$srcname/$dstname/g\
	        -e s/$setname.ali/$xcsrc/\
	        -e "/^TransformFile/s/^T/#T/"\
	        -e "/^[# ]*SloppyMontage/s/^[# ]*//"\
	        -e "/^[# ]*ShiftPieces/s/^[# ]*//"\
		-e "/^StartingAndEndingX/s/	.*/	$xstart $xend/"\
		-e "/^StartingAndEndingY/s/	.*/	$ystart $yend/"\
                -e /mrctaper/d\
		    <$srcfile >>$dstfile
	endif

        set srcfile = $srcdir/"xcorr"$srcext
        sed -e s/$srcname/$dstname/g\
	    -e "/tilts: 1 for start/s/.*	/$tiltopt	/g"\
	    -e "/start and increment if 1/s/^.*/$tiltspec/g"\
	    -e "/rotation angle/s/.*	/$axisangle	/g"\
	    -e s/$setname.st/$xcsrc/\
	    <$srcfile >>$dstfile
	echo '$'"if (-e $backupname) $backupname" >> $dstfile

	if ($montage == "0") then

	    # GET PRENEWST

	    set srcfile = $srcdir/"prenewst"$srcext
	    set dstfile = "prenewst"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile

	    # GET NEWST

	    set srcfile = $srcdir/"ccdnewst"$srcext
	    set dstfile = "newst"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
		-e "/newst/s/-size ,,/-size $newstwidth,$SAMPLESIZE/g"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile

	else

	    # OR, GET PREBLEND AND BLEND

	    set srcfile = $srcdir/"ccdpreblend"$srcext
	    set dstfile = "preblend"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile

	    @ ymin = $ysize / 2 - $SAMPLESIZE / 2
	    @ ymax = $ysize / 2 + $SAMPLESIZE / 2
	    set srcfile = $srcdir/"blend"$srcext
	    set dstfile = "blend"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
	        -e "/^[# ]*SloppyMontage/s/^[# ]*//"\
	        -e "/^[# ]*ShiftPieces/s/^[# ]*//"\
	        -e "/^[# ]*ReadInXcorrs/s/^[# ]*//"\
	        -e "/^[# ]*OldEdgeFunctions/s/^[# ]*//"\
		-e "/^StartingAndEndingY/s/	.*/	$ymin $ymax/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile
	    set backuplist = ($backuplist $setname.ecd)
	endif

    else

	# FOR FILM, GET BLEND OR NEWST

	set tiltxf = $setname.xf
	set tracksrc = $setname.st

	if ($montage == "1") then
	    set buildnew = "#O"
	    set shiftopt = "#S"

	    # IF PREBLEND, GET FILE, SET UP THINGS DIFFERENTLY FOR BLEND

	    if ($preblend == "1") then
		set wipepl = $setname.pl
		set tracksrc = $setname.bl
		set srcfile = $srcdir/"blend"$srcext
		set dstfile = "preblend"$dstext
		set backuplist = ($backuplist $dstfile)
		set buildnew = "O"
		set shiftopt = "S"
		if (-e $dstfile) \mv -f $dstfile $dstfile~
		sed -e s/$srcname/$dstname/g\
                    -e "/^TransformFile/s/^T/#T/"\
                    -e "/^[# ]*ShiftPieces/s/^[# ]*//"\
                    -e /mrctaper/d\
		    -e s/$setname.ali/$tracksrc/\
		    <$srcfile >$dstfile
		echo '$'"if (-e $backupname) $backupname" >> $dstfile
	    endif		

	    @ ymin = $ysize / 2 - $SAMPLESIZE / 2
	    @ ymax = $ysize / 2 + $SAMPLESIZE / 2
	    set srcfile = $srcdir/"blend"$srcext
	    set dstfile = "blend"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
                -e "/^[# ]*ShiftPieces/s/^[# ]*S/$shiftopt/"\
		-e "/^StartingAndEndingY/s/	.*/	$ymin $ymax/"\
	        -e "/^[# ]*OldEdgeFunctions/s/^[# ]*O/$buildnew/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile
	    set backuplist = ($backuplist $setname.ecd)
	 
	else

	    # IF NEWST, NEED NUMBER OF SECTIONS, AND IF THERE IS A PL FILE,
	    # HAVE TO GET A LIST OF SECTION NUMBERS FOR NEWST ALSO.

	    if (-e $setname.st) then
		@ numsec =  `header $setname.st | sed -n '/rows, sections/p'| awk '{print $9}'`
	    else
		echo -n "Cannot find $setname.st - Enter the total number of views in the stack: "
		@ numsec = $<
	    endif

	    @ numsec--
	    set xfsec = "0-"$numsec

	    if (-e $setname.pl) then
		echo "Enter list of section numbers needed to put the images"
		echo "   in the proper order in an aligned stack"
		set imsec = $<
	    else
		echo "Assuming images are in order in file because there is no $setname.pl file"
		set imsec = $xfsec
		set wipepl = $setname.pl
	    endif

	    set srcfile = $srcdir/"filmnewst"$srcext
	    set dstfile = "newst"$dstext
	    set backuplist = ($backuplist $dstfile)
	    if (-e $dstfile) \mv -f $dstfile $dstfile~
	    sed -e s/$srcname/$dstname/g\
		-e "/size/s/.*	/$newstwidth,$SAMPLESIZE	/"\
		-e "/list of sections/s/.*	/$imsec	/"\
		-e "/list of transforms/s/.*	/$xfsec	/"\
		<$srcfile >$dstfile
	    echo '$'"if (-e $backupname) $backupname" >> $dstfile
	endif
    endif

    # GET TRACK: WIPE OUT PL ENTRY WHEN NO MONTAGE FOR FILM
    # SET INPUT TO .PREALI FOR CCD

    set srcfile = $srcdir/"track"$srcext
    set dstfile = "track"$dstext
    set backuplist = ($backuplist $dstfile $setname.seed $setname.fid)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e s/$srcname/$dstname/g\
	-e "/-1 to enter all tilts/s/.*	/$tiltopt	/g"\
	-e "/start and increment if 1/s/^.*/$tiltspec/g"\
	-e "/initial angle/s/.*	/$axisangle	/g"\
	 -e "/radius of bead/s/.*	/$beadrad,0	/g"\
	-e "/	box size/s/.*	/$boxsize,$boxsize	/g"\
	-e "/views to skip/s/.*	/$excludelist	/"\
	-e "s/$setname.st/$tracksrc/"\
	-e s/$wipepl//\
	<$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile

    # COPY EMPTY SEED MODELS
    if (! -e $setname.seed) \cp $srcdir/$seedname $setname.seed

    # GET ALIGN; WIPE OUT XYZ.FID IF SINGLE AXIS; SET OUTPUT TO .TLTXF FOR CCD

    set wipexyz = "gibberish87654"
    if ($numax == 1) set wipexyz = $setname"fid.xyz"

    # set the frame size bigger if needed for a montage set

    set alxsize = $xsize
    set alysize = $ysize
    if ($preblend == "1") then
	set alxsize = `echo $xsize | goodframe`
	set alysize = `echo $ysize | goodframe`
    endif

    # 5/3/02: change to using image file name, keep dimensions commented out

    set srcfile = $srcdir/"align"$srcext
    set dstfile = "align"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e s/$srcname/$dstname/g\
	-e "/-1 to enter all tilts/s/.*	/$tiltopt	/g"\
	-e "/start and increment if 1/s/^.*/$tiltspec/g"\
	-e "/Initial rotation angle/s/.*	/$axisangle	/g"\
	-e "/size and origin/s/.*	/#$alxsize,$alysize\/	/"\
	-e "/views to exclude/s/.*	/$excludelist	/"\
	-e "s/$setname.st/$tracksrc/"\
	-e "s/$setname.xf/$tiltxf/"\
	-e s/$wipexyz//\
	<$srcfile >$dstfile


    if ($local == 1) then
	echo "# Next line, filename for output of local alignments" >> $dstfile
	echo $setname"local.xf" >> $dstfile
	cat $srcdir/localpart.com >> $dstfile
	set backuplist = ($backuplist $setname"local.xf")
    endif

    if ($filmccd != "F")then
	cat >> $dstfile <<EOF
#
# COMBINE TILT TRANSFORMS WITH PREALIGNMENT TRANSFORMS
#
\$xfproduct
$setname.prexg
$setname.tltxf
$setname.xf
EOF
    endif
    cat >> $dstfile <<EOF
#
# CONVERT RESIDUAL FILE TO MODEL
#
\$if (-e $setname.resid) patch2imod -s $RESIDUAL_SCALE $setname.resid $setname.resmod
EOF

    set backuplist = ($backuplist $setname.xf $setname.tlt $setname.resid $setname.resmod $setname.3Dmod)
    if ($naxis == "2") set backuplist = ($backuplist $setname"fid.xyz")
    echo '$'"if (-e $backupname) $backupname" >> $dstfile

    # GET TILT

    set fullx = $xsize
    set fully = $ysize
    if ($axangnum > 70 || $axangnum < -70) then
	set fullx = ysize
	set fully = xsize
    endif

    set mode = 1
    if (-e $stackname) then
	 set modeline = `header $stackname | sed -n '/Map mode/p'`
	 if ($modeline[4] == 2) set mode = 2
    endif

    set delexclude = "gibberish"
    if ($excludelist == "") set delexclude = "EXCLUDELIST"

    set srcfile = $srcdir/"tilt"$srcext
    set dstfile = "tilt"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e s/$srcname/$dstname/g\
        -e "/^LOG/s/LOG.*/LOG $logbase/"\
        -e "/MODE/s/MODE.*/MODE $mode/"\
	-e "/FULLIMAGE/s//FULLIMAGE $xsize $ysize/"\
	-e "/EXCLUDELIST/s//EXCLUDELIST $excludelist/"\
	-e "/$delexclude/d"\
        <$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile

    # COMPUTE OFFSET FOR SAMPLING

    @ ofsize = $ysize
    if ($axangnum > 70 || $axangnum < -70) @ ofsize = $xsize

    @ border = $MINBORDER1
    if ($ofsize > $BORDERSTEP1) @ border = $MINBORDER2
    if ($ofsize > $BORDERSTEP2) @ border = $MINBORDER2 + (($ofsize - $BORDERSTEP2) / $BORDERFAC)
    if ($filmccd != "F") @ border = `echo $border $CCDBORDERFAC | awk '{print (int ( $1 * $2))}'`
    @ offset = $ofsize / 2 - $border
    @ halfsampali = $SAMPALISIZE / 2
    if ($halfsampali > $border - 10) @ halfsampali = $border - 10
    @ sampali = 2 * $halfsampali

    set offarr = (0 $offset -$offset)
    set bmtarr = (mid$recext top$recext bot$recext)

    set dstfile = "sample"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~

    # MAKE UP SAMPLE FILE WITH VARIOUS CASES

    @ ind = 0
    while ($ind < 3)
        @ ind++
        @ offind = $offarr[$ind]
        # THESE () WERE NEEDED TO KEEP IT FROM BEING EVALED RIGHT TO LEFT
        @ ymin = ($ofsize / 2 + $offind) - $halfsampali
        @ ymax = ($ofsize / 2 + $offind) + $halfsampali
        @ slmin = $halfsampali - $SAMPLESIZE / 2
        @ slmax = $slmin + $SAMPLESIZE - 1
        if ($montage == "0") then
            if ($filmccd == "F") then
                sed -e "/single offset/s/.*	/0,$offind	/"\
                    -e "/size/s/,.*	/,$sampali	/"\
                    -e "/if (-e/d"\
                    -e "/mrctaper/d"\
                    <newst$dstext >>$dstfile
            else
                sed -e "s/-offset 0,0/-offset 0,$offind/"\
                    -e "/\(-size *[0-9]*,\)[0-9]* /s//\1$sampali /"\
                    -e "/if (-e/d"\
                    -e "/mrctaper/d"\
                    <newst$dstext >>$dstfile
            endif
        else
            sed -e "/^[# ]*OldEdgeFunctions/s/^[# ]*O/O/"\
                -e "/^StartingAndEndingY/s/	.*/	$ymin $ymax/"\
                -e "/if (-e/d"\
                -e "/mrctaper/d"\
                <blend$dstext >>$dstfile
        endif

        cat << EOF >> $dstfile
\$sed -e '/^[\$#]/d' -e '/SUBSETSTART.*/s//SUBSETSTART 0 $ymin/' \
 -e '/$setname.*\.rec/s//$bmtarr[$ind]/' -e '/SLICE/d' -e '/WIDTH/d' \
 -e '/THICKNESS/a\\\\\\
SLICE $slmin $slmax 1' tilt$dstext |tilt
EOF
    end

    echo '$'"if (-e $backupname) $backupname" >> $dstfile

    # GET FINDSEC

    set npatch = 5
    if ($xsize >= 800) set npatch = 7
    if ($xsize >= 1050) set npatch = 9
    set srcfile = $srcdir/"findsec"$srcext
    set dstfile = "findsec"$dstext
    set backuplist = ($backuplist $dstfile)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e "/size of patch/s/,.*	/,$npatch	/"\
	-e "/spacing between sample/s/.*	/-$offset	/"\
	-e "s/\.rec/$recext/"\
	<$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile
    
    # GET TOMOPITCH

    set srcfile = $srcdir/"tomopitch"$srcext
    set dstfile = "tomopitch"$dstext
    set backuplist = ($backuplist $dstfile top$modext mid$modext bot$modext tomopitch$modext)
    if (-e $dstfile) \mv -f $dstfile $dstfile~
    sed -e "/spacing between sample/s/.*	/-$offset	/"\
	-e "s/\.mod/$modext/g"\
	-e "s/\.rec/$recext/g"\
	<$srcfile >$dstfile
    echo '$'"if (-e $backupname) $backupname" >> $dstfile
    

    # PREPARE FOR NEXT ROUND

    @ temp = $xsize
    @ xsize = $ysize
    @ ysize  = $temp
    @ iaxis++
end

# OUTPUT THE BACKUP FILE

if ($backup == "1")then

    if ($naxis == "2") set backuplist = ($backuplist combine.com solve.xf refine.xf inverse.xf warp.xf patch.out combine.log)

    cat << EOF >! $backupname
#! /bin/csh -f
set backupdir = "$backupdir"
set backuplist = ( \\
EOF
    @ num = 0
    while ($#backuplist > 0)
      	echo -n "$backuplist[1]  " >> $backupname
	shift backuplist
	@ num++
	if (($num % 4) == 0) then
cat << EOF >> $backupname
\\
EOF
	endif
    end

    cat << EOF >> $backupname
)
while (\$#backuplist > 0)
  set flnm = \$backuplist[1]
  if (-e \$flnm) then
    if (! -e "\$backupdir/\$flnm") \\cp -p \$flnm "\$backupdir"
    \\find . -name \$flnm -newer "\$backupdir/\$flnm" -exec cp -p "{}" "\$backupdir" \\;
  endif
  shift backuplist
end
EOF
    chmod +x $backupname
    $backupname
endif

set setname = $rootname
set dstext = ".com"
set moda = ""
if ($numax == 2) then
    set setname = $rootname"a"
    set dstext = "a.com"
    set moda = "a"
endif

echo " "
echo "Run files in the following sequence:"
echo " "
if ($filmccd == "F")then
    if ($montage == "1" && $preblend == "1")echo preblend$dstext   to create   $setname.bl
else
    if ($erase == "1") echo "eraser$dstext   to modify   $setname.st"
    echo "xcorr$dstext   to create   $setname.prexf"
    if ($montage == "0") then
	echo "prenewst$dstext   to create   $setname.preali"
    else
	echo "preblend$dstext   to create   $setname.preali"
    endif
endif

echo "track$dstext   to create   $setname.fid"
echo "align$dstext   to create   $setname.xf  and  $setname.tlt"

if ($montage == "0") then
    echo "newst$dstext   to create   $setname.ali"
else
    echo "blend$dstext   to create   $setname.ali"
endif

cat <<EOF
tilt$dstext   to create   $setname.rec
sample$dstext   to create   top$moda.rec, mid$moda.rec, bot$moda.rec
findsec$dstext   to find section in top$moda.rec, mid$moda.rec, and bot$moda.rec
tomopitch$dstext   to find angles of section from tomopitch$moda.mod
EOF

if ($naxis == "2") then
cat <<EOF

Run similar command files for the second axis.
After the tomograms are built, run setupcombine to get combine.com.
EOF
endif

if ($backup == "1") then
cat <<EOF

Command files and other small informative files will be saved to
$backupdir whenever you run one of these command
files.  To back up these files at other times, give the command line command
   $backupname
EOF
endif
#
#  $Log$
#  Revision 3.13  2003/10/16 20:51:14  mast
#  Increased Y dimension of aligned stacks used to make samples, modified
#  sample.com to use the central 10 slices, and protected samples from
#  existing slice and width statements in tilt.com
#
#  Revision 3.12  2003/09/19 20:06:15  mast
#  Changed sample.com so that Tilt puts out the top...rec files directly, to
#  avoid name conflicts and overwriting real reconstructions
#
#  Revision 3.11  2003/08/09 23:18:41  mast
#  Changes for using PIP input in blendmont
#
#  Revision 3.10  2003/07/08 21:06:49  mast
#  Add test for existence of .resid file in align.com before running patch2imod
#
#  Revision 3.9  2003/06/05 00:09:17  mast
#  Copy seed model only if it does not exist
#
#  Revision 3.8  2003/06/04 23:57:38  mast
#  Copy empty seed models
#
#  Revision 3.7  2003/06/03 00:02:10  mast
#  Fix question that said "first" for both sets
#
#  Revision 3.6  2003/05/20 23:57:38  mast
#  Strip spaces from exclude list
#
#  Revision 3.5  2003/05/16 15:33:23  mast
#  Made it work with spaces in names for current and backup directories
#
#  Revision 3.4  2002/12/21 00:01:07  mast
#  Add conversion of tiltalign residual file to model
#
#  Revision 3.3  2002/11/04 20:45:50  mast
#  Changed output to savework file to fix \ output under tcsh 6.12 bug,
#  changed output to sample.com to protect \ outputs also.
#
#  Revision 3.2  2002/05/20 19:12:01  mast
#  Changes to have tomopitch operate on one model file
#
#  Revision 3.1  2002/05/07 01:59:42  mast
#  Added a query for global exclusion list
#
#  Revision 3.0  2001/11/29 18:11:10  rickg
#  *** empty log message ***
#
#  Revision 1.3  2001/11/28 23:20:18  mast
#  Make samplea.com produce, and findseca.com use, topa.rec, mida.rec, and
#  bota.rec.
