#!/bin/tcsh -f
#
# Multi-platform install script for IMOD. 
# Usage : installIMOD [-d install_dir] [package name]
# If run with no package name, it will look for a package in the current 
# directory and try to install it if there is only one.
#
#  $Id$
#
#  Log at end of file

set installdir = ""
set scriptdir = ""
set custom = 0
set skipcopy = 0
set keepg2c = 0

# First peel off any recognized arguments
#
while ($#argv > 0) 
    switch ($argv[1])
        case -d*:
            set installdir = "$argv[2]"
            shift; shift
            breaksw
        
        case -sc*:
            # Construct absolute path
            set scriptdir = "$argv[2]"
            set absolute = `echo $scriptdir | grep '^/'`
            if ($status) set scriptdir = "`pwd`""/$scriptdir"
            shift; shift
            breaksw
        
        case -sk*:
            set skipcopy = 1
            shift
            breaksw

        case -li*:
            set keepg2c = 1
            shift
            breaksw

        case -h*:
        case --help:
            goto usage
            breaksw

        default:
            break
    endsw
end

# Set the package name from the argument and check it if there is one
#
if ($#argv > 0) then
    set package = "$argv[1]"
    if (! -r "$package") then
        echo "File $package does not exist or is not readable"
        exit 1
    endif
else

    # Or look for the package in the current directory

    set package = `ls imod_*.tar.gz`
    if ($#package == 0) then
        echo "No IMOD package found in current directory; specify package as an argument"
        exit 1
    endif

    if ($#package > 1) then
        echo "Cannot identify IMOD package; there is more than one in this directory"
        echo "Specify package as an argument"
        exit 1
    endif
endif

# Get name that unpacked directory will have
#
set version = `echo $package:t | sed '/\(imod_[0-9.]*\).*/s//\1/' | sed '/\.$/s///'`

echo "Checking system and package types"

# DUPLICATION ALERT: THE FOLLOWING IS INCORPORATED IN THE installStub
#
set system = `uname -s`
set defaultdir = /usr/local

switch ($system)
    case *IRIX*:
        set os = irix
        # leave out /etc/profile because it is more likely used by sh than
        # bash users
        set scripts = (sgi.cshrc IMOD-sgi.csh IMOD-sgi.sh)
        set sysfiles = (/etc/cshrc)
        breaksw
    case *Linux*:
        set os = linux
        set scripts = (IMOD-linux.csh IMOD-linux.sh)
        breaksw
    case *CYGWIN*:
        set os = windows
        set scripts = (IMOD-cygwin.csh IMOD-cygwin.sh)
        set package = `cygpath "$package"`
        breaksw
    case *Darwin*:
        set os = osx
        set defaultdir = /Applications
        set scripts = (mac.cshrc mac.profile IMOD-mac.csh IMOD-mac.sh)
        set sysfiles = (/etc/csh.login /etc/profile)
        breaksw

    default:
        echo "IMOD will not run on this system ($system)"
        exit 1
endsw

if ("$installdir" == "") set installdir = $defaultdir
if ("$installdir" != "$defaultdir") set custom = 1
if ($os == windows && $custom == 1) then
    \echo "In Window environment variables, set IMOD_DIR to "`cygpath -w "$installdir/IMOD"`
endif

switch ($package)
    case *irix*:
        set packos = irix
        breaksw
    case *win*:
        set packos = windows
        breaksw
    case *osx*:
        set packos = osx
        breaksw
    default
        set packos = linux
        breaksw
endsw

if ($os != $packos) then
    echo "The system type ($os) does not match the IMOD package type ($packos)"
    exit 1
endif

set sysdir = /etc
if ($os == linux || $os == windows) set sysdir = /etc/profile.d
if ("$scriptdir" != "") set sysdir = "$scriptdir"

if (! -d "$installdir") then
    echo "The install directory $installdir does not exist or is not a directory"
    exit 1
endif

if (! $skipcopy && ! -d "$sysdir") then
    echo "The directory to copy scripts to, $sysdir, does not exist or is not a directory"
    exit 1
endif

if (! -w "$installdir") then
    if ($os == windows) then
        echo gibberish > "$installdir/testfile"
        if ($status) then
            echo "There is a error writing files to $installdir"
            echo "Make sure the /etc/passwd and /etc/group files are up to date"
            exit 1
        endif
        \rm -f "$installdir/testfile"
    else
        echo "You do not have permission to write to $installdir"
        echo  "Run this command with sudo or as root"
        exit 1
    endif
endif

if (! $skipcopy && ! -w "$sysdir") then
    if ($os == windows) then
        echo gibberish > "$sysdir/testfile"
        if ($status) then
            echo "There is a error writing files to $sysdir"
            echo "Make sure the /etc/passwd and /etc/group files are up to date"
            exit 1
        endif
        \rm -f "$sysdir/testfile"
    else
        echo "You do not have permission to write to $sysdir"
        echo  "Run this command with sudo or as root"
        exit 1
    endif
endif

# Construct absolute path to package if necessary
#
set packpath = ""
set absolute = `echo $package | grep '^/'`
if ($status) set packpath = "`pwd`""/"

cd "$installdir"

# If file exists as a link, just remove it
#
if (-l IMOD) then
    echo "Removing link to previous version but leaving previous version"
    \rm IMOD
endif

# Remove existing files by this name
#
if (-e $version) then
    echo "Removing an existing copy of the same version..."
    \rm -r $version
endif

echo "Unpacking IMOD in $installdir ..."
if ($os == irix) then
    gzcat "$packpath$package" | tar xf -
else
    tar xzf "$packpath$package"
endif

if (-e IMOD) then

    # If there is an existing file, first see if there is a version inside
    #
    if (-e IMOD/VERSION) then
        set vernum = `sed '/[^0-9.]/s///g' IMOD/VERSION`
        set oldversion = imod_$vernum
        if ($oldversion == $version) then
            set oldversion = ""
            echo "The existing IMOD appears to be the same version as the new one"
        else if (-e $oldversion) then
            echo "The existing IMOD appears to be $oldversion"
            echo "Removing another copy of $oldversion ..."
            \rm -r $oldversion
        endif

    else
        # If no version, just rename to first free oldIMOD
        #
        set oldversion = ""
        @ oldnum = 1
        while ($oldnum < 1000)
            if (! -e oldIMOD.$oldnum) then
                set oldversion = oldIMOD.$oldnum
                @ oldnum = 1000
            endif
            @ oldnum++
        end
        if ($oldversion == "") echo "Unable to find a name to rename previous version to"
    endif

    # Rename to the old version name or just remove if couldn't get one
    #
    if ($oldversion == "") then
        echo "Removing previous version ..."
        \rm -r IMOD
    else
        echo "Renaming previous version to $oldversion"
        \mv IMOD $oldversion
    endif
endif

# Make link or rename
#
if ($os == windows || $os == osx) then
    echo "Renaming $version to IMOD"
    mv $version IMOD
else
    echo "Linking $version to IMOD"
    ln -s $version IMOD
endif

set defaultstr = `echo $defaultdir/IMOD | sed '/\//s//\\\//g'`
set installstr = `echo $installdir/IMOD | sed '/\//s//\\\//g'`

cd IMOD

# Edit scripts in place before copying; needed on mac/sgi
#
if ($custom == 1) then
    echo "Editing startup scripts for custom install location"
    foreach i ($scripts)
        sed "/$defaultstr/s//$installstr/g" $i >! custom.tmp
        \mv custom.tmp $i
    end
endif    

if (($os == windows || $os == linux || "$scriptdir" != "") && ! $skipcopy) then

    # The easy ones: copy to /etc/profile.d or designated place
    #
    echo "Copying startup scripts to ${sysdir}: $scripts"
    \cp $scripts "$sysdir"
else if (! $skipcopy) then

    # The hard ones: append a source command to a system file if files exist
    # and it is not there already
    #
    set warned = 0
    @ ind = 1
    while ($ind <= $#sysfiles)
        set sysfil = $sysfiles[$ind]
        if (-e $scripts[$ind] && -e $sysfil) then
            if ($custom == 1) then
                set wrong = `grep -i "^[^#].*source.*$defaultdir.*imod" $sysfil`
                if ($status == 0) then
                    echo ""
                    echo "WARNING: $sysfil has a command to source from the default install location"
                    echo "You should edit $sysfil to remove this line (or lines):"
                    grep -i "^[^#].*source.*$defaultdir.*imod" $sysfil
                    echo ""
                    set warned = 1
                endif
            endif

            set already = `grep "^[^#].*source.*$installdir.*IMOD" $sysfil`
            if ($status) then
                set wrong = `grep -i "^[^#].*source.*imod" $sysfil`
                if ($status == 0 && $warned == 0) then
                    echo ""
                    echo "WARNING: $sysfil has an older, inappropriate source command"
                    echo "You should edit $sysfil to remove this line (or lines):"
                    grep -i "^[^#].*source.*imod" $sysfil
                    echo ""
                endif
                echo "Adding source of startup script to $sysfil"
                echo "# Set environment for IMOD" >> $sysfil
                tail -n 2 $scripts[$ind] >> $sysfil
            else
                echo "Source command already exists in $sysfil"
            endif
        endif
        @ ind++
    end
endif

# Try to take care of SELinux problems in recommended fashion
#
if ($os == linux && -e /usr/sbin/sestatus) then
    set test = `/usr/sbin/sestatus | grep enabled`
    if ("$test" != "") then
        echo ""
        echo "SELinux is enabled - Trying to change security context of libraries."

        # Try in order of the first one that was suppose dto be used, the one
        # that works in targeted mode, and the other one that Nvidia lists
        #
        foreach con (texrel_shlib_t shlib_t textrel_shlib_t)
            chcon -t $con lib/*.so pylib/*.so >& /dev/null
            set constat = $status
            if (! $constat) then
                if (-e qtlib) chcon -t $con qtlib/*.so >& /dev/null
                break
            endif
        end
        if ($constat) then
            echo "  Errors occurred changing the security context."
	    set test = `/usr/sbin/sestatus | sed -n '/Policy from .*targeted/p'`
	    if ("$test" != "") echo "  This is probably OK since your policy is targeted."
            echo "  Disable SELinux if you have permission problems running IMOD programs."
        endif
    endif
endif

# Manage libg2c if it is present or requested
#
if ($os == linux) then
    set filetype = `file lib/libimod.so`
    set g2cdir = /usr/lib
    if ("$filetype" =~ "*64-bit*") set g2cdir = /usr/lib64
    set syshas = `\find $g2cdir -maxdepth 1 -name 'libg2c.so*' -print`
    set packhas = `\find lib -maxdepth 1 -name '*libg2c.so*' -print`

    # Delete the package even if it is on the system if no keep option given
    # Otherwise rename to get rid of concealing name
    #
    if ("$packhas" != "" &&  ! $keepg2c) then
        \rm -f lib/*libg2c.so*
    else if ("$packhas" != "") then
        foreach i ($packhas)
            \mv $i $i:s/imod-//
        end
    endif

    # Issue lots of different warnings
    #
    if ("$packhas" != "" && "$syshas" != "" && $keepg2c) then
        echo "\nWARNING: libg2c is already on the system; if library conflicts occur,"
        echo "         reinstall IMOD without the -libg2c option or"
        echo "         remove libg2c from $installdir/IMOD/lib"
    else if ("$packhas" == "" && "$syshas" != "" && $keepg2c) then
        echo "\nWARNING: libg2c is already on the system and not in this package"
        echo "         your -libg2c option was ignored"
    else if ("$packhas" != "" && "$syshas" == "" && ! $keepg2c) then
        echo "\nWARNING: there is no libg2c on this system."
        echo "         You should install a system package for this if at all possible."
        echo "     Otherwise, reinstall IMOD with the -libg2c option."
    else if ("$packhas" == "" && "$syshas" == "" && ! $keepg2c) then
        echo "\nWARNING: there is no libg2c on this system and none in this package."
        echo "    You should install a system package for this if at all possible."
        echo "    Otherwise, reinstall IMOD from a package that has it, with -libg2c option."
    else if ("$packhas" == "" && "$syshas" == "" && $keepg2c) then
        echo "\nWARNING: there is no libg2c on this system and none in this package."
        echo "         Your -libg2c option was ignored"
        echo "         You should install a system package for this if at all possible."
        echo "         Otherwise, reinstall IMOD from a package that has libg2c."
    endif
endif

# List files and offer to clean up
#
set vernum = `echo $version | sed '/[^0-9.]/s///g'`
echo ""
echo "The installation of IMOD $vernum is complete."
echo "You may need to start a new terminal window for changes to take effect"
echo ""
echo "IMOD-related files in $installdir :"
cd ..
ls -l | grep -i imod | grep -vi tempDir
echo ""
set oldlist = `\find .  -maxdepth 1 -type d -name 'imod_*.*[0-9]' -print | sed -e '/^\.\//s///g' -e "/imod_$vernum/d"`
if ("$oldlist" != "") then
    echo "Do you want to remove these other versions?"
    echo "    " $oldlist
    echo -n "Enter Y to remove them: "
    set yesno = $<
    if ("$yesno" == "Y" || "$yesno" == "y") \rm -rf $oldlist
endif
echo ""    
echo "If there are version-specific IMOD startup commands in individual user"
echo " startup files (.cshrc, .bashrc, .bash_profile) they should be changed"
echo " or removed."
exit 0

usage:
cat <<EOF
Usage: installIMOD [options] [package file name]
  Installs IMOD using a package in the current directory if there is only one,
    or using the specified package file.
  Options (may be abbreviated):
    -dir dir     Directory in which to install IMOD
    -script dir  Directory in which to place the IMOD startup scripts
    -skip        Skip copying startup scripts or modifying system startup files
    -libg2c      Use libg2c in this IMOD package if it exists (Linux only)
    -h, --help   Print this help
EOF
exit 0

#
#  $Log$
#  Revision 3.20  2008/01/25 23:27:19  mast
#  Added option for using libg2c in package
#
#  Revision 3.19  2008/01/04 22:01:32  mast
#  Fixed statement of custom Windows path
#
#  Revision 3.18  2007/12/11 02:35:08  mast
#  Renamed mac.bashrc to mac.profile to reflect preferred destination
#
#  Revision 3.17  2007/10/25 02:22:08  mast
#  Expanded writability test on Windows for vista, allowed install dir also
#
#  Revision 3.16  2007/09/17 17:37:32  mast
#  Made the chcon more elaborate as Nvidia hints, and it works better
#
#  Revision 3.15  2007/09/17 04:02:53  mast
#  Implemented options for specifying or skipping the script copying and
#  for getting help; tested for existence of directories; handled relative 
#  script directory; tested for targeted security context and said error 
#  probably OK
#
#  Revision 3.14  2007/07/19 15:45:35  mast
#  Limited depth of search for IMOD versions
#
#  Revision 3.13  2006/11/10 22:39:43  mast
#  Tried to change security contect of libs if selinux is on
#
#  Revision 3.12  2006/10/19 19:13:45  mast
#  Removed current version from old version list
#
#  Revision 3.11  2006/10/05 22:19:43  mast
#  Offered to remove other versions
#
#  Revision 3.10  2005/01/10 17:51:36  mast
#  Fixed for Mac - switched to editing startup scripts in IMOD
#
#  Revision 3.9  2005/01/10 16:32:13  mast
#  Added option to install elsewhere
#
#  Revision 3.8  2004/08/27 05:48:20  mast
#  Switched to tail -n
#
#  Revision 3.7  2004/07/08 23:23:50  mast
#  Added message to open new window and warning about other source lines
#
#  Revision 3.6  2004/07/06 16:55:20  mast
#  Switch from link to rename for Mac
#
#  Revision 3.5  2004/07/04 13:47:31  mast
#  Added details for user and made it work with spaces in directory path
#
#  Revision 3.4  2004/04/24 17:42:04  mast
#  Remove gzcat error warning, it happened because editing file added a newline
#
#  Revision 3.3  2004/04/24 04:32:59  mast
#  Fixes for SGI; decided not to put source command in /etc/profile
#
#  Revision 3.2  2004/04/24 01:21:57  mast
#  Needed to separate : from varaiable
#
#  Revision 3.1  2004/04/24 01:10:03  mast
#  Initial creation
#
