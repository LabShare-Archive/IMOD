#!/bin/bash
#
# Startup script for eTomo
# 
# $Id$
# 

rollLogs() {
  lasterr=etomo_err12.log
  for i in 11 10 9 8 7 6 5 4 3 2 1
  do
    thiserr=etomo_err${i}.log
    if [ -e ${thiserr} ] ; then 
      mv -f ${thiserr} ${lasterr} 
    fi
    lasterr=${thiserr}
  done
  if [ -e etomo_err.log ]; then
    mv -f etomo_err.log ${lasterr}
  fi
}

# To increase the memory limit for Java, define this environment variable
# to a higher number
#
export ETOMO_MEM_LIM=${ETOMO_MEM_LIM:=128m}

# If you wish to use a different java runtime than the default uncomment the
# following line and define the path to the desired runtime directory

#export IMOD_JAVADIR=/usr/local/j2re1.4.0_04

if [ ! -z "$IMOD_JAVADIR" ]; then
  export PATH=${IMOD_JAVADIR}/bin:${PATH}
fi

# Test for appropriate java run time
if ! which java 2>&1 > /dev/null ; then
  echo "There is no java runtime in the current search path.  A Java runtime"
  echo "environment needs to be installed and the command search path needs"
  echo "to be defined to locate the java command."
  exit
fi

jversion=`java -version 2>&1 | cat`
if echo $jversion | grep GNU > /dev/null ; then
  echo "eTomo will not work with GNU java.  You should install a Sun/Oracle or"
  echo "OpenJDK version of the Java runtime environment and put it on your"
  echo "command search path"
  if [ ! -z "$IMOD_JAVADIR" ]; then
      echo "or make a link to it from $IMOD_JAVADIR"
  fi
  exit
fi

if echo $jversion | grep '1\.4' > /dev/null ; then
  echo "You are trying to run a 1.4 version of Java, located at:"
  which java
  echo "eTomo will no longer work with java 1.4.  You should install a Sun/Oracle"
  echo "version of the Java runtime environment, version 1.5 or higher, and"
  echo "put it on your command search path, or point IMOD_JAVADIR to it"
  if [ ! -z "$IMOD_JAVADIR" ]; then
      echo "or make a link to it from $IMOD_JAVADIR"
  fi
fi

#  Workaround for java 1.4.0 / new threading library clash
#  Really needed to be gone for Fedora Core 5, so make it 2.4 specific
osname=`uname -s`
if [ $osname == 'Linux' ] ; then
  kvers=`uname -r | sed '/\./s// /g'`
  kvers1=`echo $kvers | awk '{print $1}'`
  kvers2=`echo $kvers | awk '{print $2}'`
  if [[ ${kvers1} -eq 2 && ${kvers2} -eq 4 ]] ; then
    export LD_ASSUME_KERNEL=2.4.1
  fi
fi

if [[ $osname == CYGWIN* ]] ; then

  # Windows: must run a cygwin python to maintain process control
  export PATH=/bin:${PATH}
  if [ ! -e /usr/bin/python ] ; then
    echo "You must have python installed in Cygwin in order to use eTomo"
    exit
  fi
fi

#  Make sure awk produces . not , for decimal in floating point output
export LC_NUMERIC=C

# Make sure all PIP programs print entries
export PIP_PRINT_ENTRIES=1

# Test for existence of IMOD_DIR
if [ -z "$IMOD_DIR" ]; then
  echo "The IMOD_DIR environment variable has not been set"
  echo "Set it to point to the directory where IMOD is installed"
  exit
fi
if [ ! -e "$IMOD_DIR" ]; then
  echo "IMOD_DIR="${IMOD_DIR} " does not exist"
  echo "Set it to point to the directory where IMOD is installed"
  exit
fi


# If the system-dependent script for setting the library search path exists,
# source it.  This takes care of putting our Qt libraries on the right path
# variable, and allows other directories to be placed on the path too, to
# prevent clashes with libraries supplied by other packages

if [ -e "${IMOD_DIR}/bin/setlibpath" ]; then
  . "${IMOD_DIR}/bin/setlibpath"
fi

# Check for help option
# Check for foreground option - needed to run multiple etomos with automation.

help=0
foreground=0
if [ $# -gt 0 ] ; then
    if [ "$1" == '-h' ] ; then
    	help=1
    elif [ "$1" == '--help' ] ; then
    	help=1
    elif [ "$1" == '--fg' ] ; then
    	foreground=1
    fi
fi

# If ETOMO_LOG_DIR is defined and writable, set up log files there with 
# date/time stamp; if not defined, put them in a hidden directory
if [ ${help} -eq 0 ] ; then
  outlog=etomo_out.log
  errlog=etomo_err.log

  # Put logs in hidden directory if directory is not defined
  if [ -z "${ETOMO_LOG_DIR}" ] ; then
      ETOMO_LOG_DIR=$HOME/.etomologs
      mkdir -p ${ETOMO_LOG_DIR}
  fi
  if [[ -n "${ETOMO_LOG_DIR}" && -w "${ETOMO_LOG_DIR}" ]] ; then

    # purge the directory to 60 files (30 sessions) or whatever user chooses
    purgenum=31
    if [ ! -z ${ETOMO_LOGS_TO_RETAIN} ] ; then
      purgenum=${ETOMO_LOGS_TO_RETAIN}
    fi
    timestamp=`date | sed 's/://g' | awk '{printf "%s-%s-%s",$2,$3,$4}'`
    errlog="${ETOMO_LOG_DIR}/etomo_err_${timestamp}.log"
    anypurge=`cd "${ETOMO_LOG_DIR}" ; find . -name 'etomo_*.log' -print`
    if [ ! -z "${anypurge}" ] ; then
      purgelist=`cd "${ETOMO_LOG_DIR}" ; ls -t etomo_*.log | tail -n +$purgenum`
      # echo $purgelist
      if [ ! -z "${purgelist}" ] ; then 
        (cd "${ETOMO_LOG_DIR}" ; rm -f ${purgelist})
      fi
    fi

    # If there is an existing real log, roll it
    if [ -e etomo_err.log ] ; then
      match=`head -n 1 etomo_err.log | grep "Error log"`
      if [ -z "$match" ] ; then
        rollLogs
      fi
    fi

    # Write location of log into file here
    touch etomo_err.log
    echo "Error log for `date` is in ${errlog}" >> etomo_err.log

  else

    # Otherwise roll numbered logs here
    rollLogs

  fi

  # Copy the previous out log file to backup
  if [ -e ${outlog} ]; then
    cp -p ${outlog} ${outlog}~
  fi

	if [ ${foreground} -eq 0 ] ; then
    echo "starting eTomo with log in ${errlog}"
    java -Xmx${ETOMO_MEM_LIM} -cp "${IMOD_DIR}/bin/etomo" \
     -jar "${IMOD_DIR}/bin/etomo.jar" "$@" 2>"${errlog}" >${outlog} &
  else
    echo "starting eTomo with log in ${errlog}"
    java -Xmx${ETOMO_MEM_LIM} -cp "${IMOD_DIR}/bin/etomo" \
     -jar "${IMOD_DIR}/bin/etomo.jar" "$@" 2>"${errlog}" >${outlog}
  fi
else
  java -Xmx${ETOMO_MEM_LIM} -cp "${IMOD_DIR}/bin/etomo" \
   -jar "${IMOD_DIR}/bin/etomo.jar" "$@"
fi

